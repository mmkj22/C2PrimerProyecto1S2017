
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 20 10:27:29 CST 2017
//----------------------------------------------------

package Analisis;

import java_cup.runtime.*;
import java.io.*;
import Graphik.*;
import Errores.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 20 10:27:29 CST 2017
  */
public class sintacticoGraphik extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public sintacticoGraphik() {super();}

  /** Constructor which sets the default scanner. */
  public sintacticoGraphik(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintacticoGraphik(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\263\000\002\002\004\000\002\002\005\000\002\055" +
    "\003\000\002\055\002\000\002\056\003\000\002\056\002" +
    "\000\002\010\004\000\002\010\003\000\002\013\005\000" +
    "\002\011\004\000\002\011\003\000\002\014\005\000\002" +
    "\110\004\000\002\110\003\000\002\012\010\000\002\012" +
    "\012\000\002\015\004\000\002\015\004\000\002\015\004" +
    "\000\002\015\002\000\002\004\004\000\002\004\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\004\000\002\006\004\000\002\016" +
    "\013\000\002\016\012\000\002\017\013\000\002\017\012" +
    "\000\002\020\005\000\002\020\003\000\002\021\004\000" +
    "\002\022\011\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\005\004\000\002\005\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\004\000\002\003" +
    "\004\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\024\003\000\002\025\005\000\002" +
    "\025\010\000\002\025\011\000\002\026\005\000\002\026" +
    "\006\000\002\026\005\000\002\027\005\000\002\027\003" +
    "\000\002\030\004\000\002\031\011\000\002\032\007\000" +
    "\002\035\007\000\002\041\004\000\002\041\003\000\002" +
    "\042\006\000\002\042\004\000\002\040\015\000\002\112" +
    "\007\000\002\112\003\000\002\057\003\000\002\057\003" +
    "\000\002\033\011\000\002\034\012\000\002\036\004\000" +
    "\002\037\004\000\002\043\005\000\002\043\004\000\002" +
    "\044\007\000\002\044\006\000\002\053\007\000\002\053" +
    "\006\000\002\045\005\000\002\045\003\000\002\046\003" +
    "\000\002\111\005\000\002\111\006\000\002\047\004\000" +
    "\002\047\005\000\002\050\004\000\002\050\003\000\002" +
    "\051\004\000\002\051\004\000\002\052\011\000\002\107" +
    "\003\000\002\107\005\000\002\007\007\000\002\007\007" +
    "\000\002\060\003\000\002\060\003\000\002\061\007\000" +
    "\002\061\011\000\002\063\004\000\002\063\003\000\002" +
    "\064\005\000\002\067\003\000\002\067\003\000\002\105" +
    "\007\000\002\105\005\000\002\065\005\000\002\065\003" +
    "\000\002\066\003\000\002\066\005\000\002\062\006\000" +
    "\002\070\011\000\002\101\004\000\002\101\003\000\002" +
    "\102\003\000\002\102\003\000\002\102\003\000\002\102" +
    "\003\000\002\071\007\000\002\103\003\000\002\103\003" +
    "\000\002\073\006\000\002\104\003\000\002\104\003\000" +
    "\002\104\003\000\002\077\007\000\002\100\007\000\002" +
    "\072\005\000\002\072\003\000\002\074\011\000\002\075" +
    "\007\000\002\076\007\000\002\106\005\000\002\106\005" +
    "\000\002\106\005\000\002\106\004\000\002\106\005\000" +
    "\002\106\005\000\002\106\005\000\002\106\005\000\002" +
    "\106\005\000\002\106\005\000\002\106\005\000\002\106" +
    "\005\000\002\106\005\000\002\106\005\000\002\106\005" +
    "\000\002\106\003\000\002\106\003\000\002\106\003\000" +
    "\002\106\004\000\002\106\003\000\002\106\003\000\002" +
    "\106\003\000\002\106\003\000\002\106\004\000\002\106" +
    "\005\000\002\106\003\000\002\106\003\000\002\106\003" +
    "\000\002\106\003\000\002\106\003\000\002\054\004\000" +
    "\002\054\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u018c\000\010\024\004\025\ufffe\034\ufffe\001\002\000" +
    "\004\115\u018d\001\002\000\010\024\004\025\uffff\034\uffff" +
    "\001\002\000\010\024\ufffa\025\ufffa\034\ufffa\001\002\000" +
    "\004\002\u018b\001\002\000\006\025\ufffc\034\014\001\002" +
    "\000\006\025\ufffd\034\014\001\002\000\004\025\020\001" +
    "\002\000\006\025\ufff7\034\ufff7\001\002\000\004\006\015" +
    "\001\002\000\004\075\016\001\002\000\006\025\ufff6\034" +
    "\ufff6\001\002\000\006\002\000\025\020\001\002\000\004" +
    "\006\022\001\002\000\006\002\ufff4\025\ufff4\001\002\000" +
    "\010\026\025\065\uffee\113\023\001\002\000\010\021\u0188" +
    "\022\u0186\023\u0187\001\002\000\004\065\u0183\001\002\000" +
    "\004\006\026\001\002\000\006\065\uffee\113\023\001\002" +
    "\000\004\065\030\001\002\000\022\006\053\013\032\014" +
    "\052\015\031\016\037\017\046\020\047\027\044\001\002" +
    "\000\004\006\uffdc\001\002\000\004\006\uffda\001\002\000" +
    "\024\006\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9" +
    "\020\uffe9\027\uffe9\066\uffe9\001\002\000\024\006\uffe8\013" +
    "\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\027\uffe8" +
    "\066\uffe8\001\002\000\004\075\uff93\001\002\000\004\075" +
    "\u0182\001\002\000\004\006\uffdd\001\002\000\024\006\053" +
    "\013\032\014\052\015\031\016\037\017\046\020\047\027" +
    "\044\066\u0180\001\002\000\004\006\u0173\001\002\000\024" +
    "\006\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020" +
    "\uffec\027\uffec\066\uffec\001\002\000\004\075\uffc3\001\002" +
    "\000\016\006\354\013\032\014\052\015\031\016\037\017" +
    "\046\001\002\000\024\006\uffeb\013\uffeb\014\uffeb\015\uffeb" +
    "\016\uffeb\017\uffeb\020\uffeb\027\uffeb\066\uffeb\001\002\000" +
    "\004\006\uffd9\001\002\000\010\006\203\033\205\051\204" +
    "\001\002\000\004\075\uff92\001\002\000\004\075\202\001" +
    "\002\000\004\006\uffdb\001\002\000\006\006\uffd8\063\055" +
    "\001\002\000\024\006\uffea\013\uffea\014\uffea\015\uffea\016" +
    "\uffea\017\uffea\020\uffea\027\uffea\066\uffea\001\002\000\032" +
    "\004\072\005\065\006\103\007\066\010\074\011\100\012" +
    "\067\032\075\035\064\061\073\070\077\101\101\001\002" +
    "\000\006\063\055\112\060\001\002\000\060\062\uff8e\063" +
    "\uff8e\064\uff8e\065\uff8e\066\uff8e\067\uff8e\070\uff8e\071\uff8e" +
    "\072\uff8e\073\uff8e\074\uff8e\075\uff8e\076\uff8e\077\uff8e\100" +
    "\uff8e\102\uff8e\103\uff8e\104\uff8e\105\uff8e\106\uff8e\107\uff8e" +
    "\112\uff8e\113\uff8e\001\002\000\032\004\072\005\065\006" +
    "\103\007\066\010\074\011\100\012\067\032\075\035\064" +
    "\061\073\070\077\101\101\001\002\000\060\062\uff8f\063" +
    "\uff8f\064\uff8f\065\uff8f\066\uff8f\067\uff8f\070\uff8f\071\uff8f" +
    "\072\uff8f\073\uff8f\074\uff8f\075\uff8f\076\uff8f\077\uff8f\100" +
    "\uff8f\102\uff8f\103\uff8f\104\uff8f\105\uff8f\106\uff8f\107\uff8f" +
    "\112\uff8f\113\uff8f\001\002\000\054\062\uff54\064\uff54\065" +
    "\uff54\066\uff54\067\uff54\070\uff54\071\uff54\072\uff54\073\uff54" +
    "\074\uff54\075\uff54\076\uff54\077\uff54\100\uff54\102\uff54\103" +
    "\uff54\104\uff54\105\uff54\106\uff54\107\uff54\113\uff54\001\002" +
    "\000\054\062\uff51\064\uff51\065\uff51\066\uff51\067\uff51\070" +
    "\uff51\071\uff51\072\uff51\073\uff51\074\uff51\075\uff51\076\uff51" +
    "\077\uff51\100\uff51\102\uff51\103\uff51\104\uff51\105\uff51\106" +
    "\uff51\107\uff51\113\uff51\001\002\000\004\006\173\001\002" +
    "\000\054\062\uff5e\064\uff5e\065\uff5e\066\uff5e\067\uff5e\070" +
    "\uff5e\071\uff5e\072\uff5e\073\uff5e\074\uff5e\075\uff5e\076\uff5e" +
    "\077\uff5e\100\uff5e\102\uff5e\103\uff5e\104\uff5e\105\uff5e\106" +
    "\uff5e\107\uff5e\113\uff5e\001\002\000\054\062\uff5b\064\uff5b" +
    "\065\uff5b\066\uff5b\067\uff5b\070\uff5b\071\uff5b\072\uff5b\073" +
    "\uff5b\074\uff5b\075\uff5b\076\uff5b\077\uff5b\100\uff5b\102\uff5b" +
    "\103\uff5b\104\uff5b\105\uff5b\106\uff5b\107\uff5b\113\uff5b\001" +
    "\002\000\054\062\uff59\064\uff59\065\uff59\066\uff59\067\uff59" +
    "\070\uff59\071\uff59\072\uff59\073\uff59\074\uff59\075\uff59\076" +
    "\uff59\077\uff59\100\uff59\102\uff59\103\uff59\104\uff59\105\uff59" +
    "\106\uff59\107\uff59\113\uff59\001\002\000\054\062\uff52\064" +
    "\uff52\065\uff52\066\uff52\067\uff52\070\uff52\071\uff52\072\uff52" +
    "\073\uff52\074\uff52\075\uff52\076\uff52\077\uff52\100\uff52\102" +
    "\uff52\103\uff52\104\uff52\105\uff52\106\uff52\107\uff52\113\uff52" +
    "\001\002\000\054\062\uff55\064\uff55\065\uff55\066\uff55\067" +
    "\uff55\070\uff55\071\uff55\072\uff55\073\uff55\074\uff55\075\uff55" +
    "\076\uff55\077\uff55\100\uff55\102\uff55\103\uff55\104\uff55\105" +
    "\uff55\106\uff55\107\uff55\113\uff55\001\002\000\054\062\uff5f" +
    "\064\uff5f\065\uff5f\066\uff5f\067\uff5f\070\uff5f\071\uff5f\072" +
    "\uff5f\073\uff5f\074\uff5f\075\uff5f\076\uff5f\077\uff5f\100\uff5f" +
    "\102\uff5f\103\uff5f\104\uff5f\105\uff5f\106\uff5f\107\uff5f\113" +
    "\uff5f\001\002\000\032\004\072\005\065\006\103\007\066" +
    "\010\074\011\100\012\067\032\075\035\064\061\073\070" +
    "\077\101\101\001\002\000\054\062\uff58\064\uff58\065\uff58" +
    "\066\uff58\067\uff58\070\uff58\071\uff58\072\uff58\073\uff58\074" +
    "\uff58\075\uff58\076\uff58\077\uff58\100\uff58\102\uff58\103\uff58" +
    "\104\uff58\105\uff58\106\uff58\107\uff58\113\uff58\001\002\000" +
    "\004\006\163\001\002\000\054\062\uff53\064\uff53\065\uff53" +
    "\066\uff53\067\uff53\070\uff53\071\uff53\072\uff53\073\uff53\074" +
    "\uff53\075\uff53\076\uff53\077\uff53\100\uff53\102\uff53\103\uff53" +
    "\104\uff53\105\uff53\106\uff53\107\uff53\113\uff53\001\002\000" +
    "\032\004\072\005\065\006\103\007\066\010\074\011\100" +
    "\012\067\032\075\035\064\061\073\070\077\101\101\001" +
    "\002\000\054\062\uff5a\064\uff5a\065\uff5a\066\uff5a\067\uff5a" +
    "\070\uff5a\071\uff5a\072\uff5a\073\uff5a\074\uff5a\075\uff5a\076" +
    "\uff5a\077\uff5a\100\uff5a\102\uff5a\103\uff5a\104\uff5a\105\uff5a" +
    "\106\uff5a\107\uff5a\113\uff5a\001\002\000\032\004\072\005" +
    "\065\006\103\007\066\010\074\011\100\012\067\032\075" +
    "\035\064\061\073\070\077\101\101\001\002\000\040\067" +
    "\135\070\123\071\122\072\121\073\132\075\uff84\076\127" +
    "\077\136\100\133\102\134\103\124\104\130\105\126\106" +
    "\131\107\125\001\002\000\066\061\105\062\uff5d\063\055" +
    "\064\uff5d\065\uff5d\066\uff5d\067\uff5d\070\uff5d\071\uff5d\072" +
    "\uff5d\073\uff5d\074\uff5d\075\uff5d\076\uff5d\077\uff5d\100\uff5d" +
    "\102\uff5d\103\uff5d\104\uff5d\105\uff5d\106\uff5d\107\uff5d\110" +
    "\106\111\112\113\uff5d\114\107\001\002\000\060\062\uff9e" +
    "\064\uff9e\065\uff9e\066\uff9e\067\uff9e\070\uff9e\071\uff9e\072" +
    "\uff9e\073\uff9e\074\uff9e\075\uff9e\076\uff9e\077\uff9e\100\uff9e" +
    "\102\uff9e\103\uff9e\104\uff9e\105\uff9e\106\uff9e\107\uff9e\112" +
    "\uff9e\113\uff9e\114\107\001\002\000\034\004\072\005\065" +
    "\006\103\007\066\010\074\011\100\012\067\032\075\035" +
    "\064\061\073\062\115\070\077\101\101\001\002\000\116" +
    "\006\uff50\027\uff50\031\uff50\032\uff50\035\uff50\036\uff50\040" +
    "\uff50\041\uff50\042\uff50\043\uff50\044\uff50\045\uff50\046\uff50" +
    "\047\uff50\050\uff50\057\uff50\060\uff50\062\uff50\064\uff50\065" +
    "\uff50\066\uff50\067\uff50\070\uff50\071\uff50\072\uff50\073\uff50" +
    "\074\uff50\075\uff50\076\uff50\077\uff50\100\uff50\102\uff50\103" +
    "\uff50\104\uff50\105\uff50\106\uff50\107\uff50\113\uff50\001\002" +
    "\000\004\006\113\001\002\000\060\062\uff9b\064\uff9b\065" +
    "\uff9b\066\uff9b\067\uff9b\070\uff9b\071\uff9b\072\uff9b\073\uff9b" +
    "\074\uff9b\075\uff9b\076\uff9b\077\uff9b\100\uff9b\102\uff9b\103" +
    "\uff9b\104\uff9b\105\uff9b\106\uff9b\107\uff9b\112\uff9b\113\uff9b" +
    "\114\uff9b\001\002\000\056\062\uff5c\063\055\064\uff5c\065" +
    "\uff5c\066\uff5c\067\uff5c\070\uff5c\071\uff5c\072\uff5c\073\uff5c" +
    "\074\uff5c\075\uff5c\076\uff5c\077\uff5c\100\uff5c\102\uff5c\103" +
    "\uff5c\104\uff5c\105\uff5c\106\uff5c\107\uff5c\113\uff5c\001\002" +
    "\000\116\006\uff4f\027\uff4f\031\uff4f\032\uff4f\035\uff4f\036" +
    "\uff4f\040\uff4f\041\uff4f\042\uff4f\043\uff4f\044\uff4f\045\uff4f" +
    "\046\uff4f\047\uff4f\050\uff4f\057\uff4f\060\uff4f\062\uff4f\064" +
    "\uff4f\065\uff4f\066\uff4f\067\uff4f\070\uff4f\071\uff4f\072\uff4f" +
    "\073\uff4f\074\uff4f\075\uff4f\076\uff4f\077\uff4f\100\uff4f\102" +
    "\uff4f\103\uff4f\104\uff4f\105\uff4f\106\uff4f\107\uff4f\113\uff4f" +
    "\001\002\000\062\061\105\062\uff9a\064\uff9a\065\uff9a\066" +
    "\uff9a\067\uff9a\070\uff9a\071\uff9a\072\uff9a\073\uff9a\074\uff9a" +
    "\075\uff9a\076\uff9a\077\uff9a\100\uff9a\102\uff9a\103\uff9a\104" +
    "\uff9a\105\uff9a\106\uff9a\107\uff9a\112\uff9a\113\uff9a\114\uff9a" +
    "\001\002\000\060\062\uff99\064\uff99\065\uff99\066\uff99\067" +
    "\uff99\070\uff99\071\uff99\072\uff99\073\uff99\074\uff99\075\uff99" +
    "\076\uff99\077\uff99\100\uff99\102\uff99\103\uff99\104\uff99\105" +
    "\uff99\106\uff99\107\uff99\112\uff99\113\uff99\114\uff99\001\002" +
    "\000\060\062\uffa0\064\uffa0\065\uffa0\066\uffa0\067\uffa0\070" +
    "\uffa0\071\uffa0\072\uffa0\073\uffa0\074\uffa0\075\uffa0\076\uffa0" +
    "\077\uffa0\100\uffa0\102\uffa0\103\uffa0\104\uffa0\105\uffa0\106" +
    "\uffa0\107\uffa0\112\uffa0\113\uffa0\114\uffa0\001\002\000\006" +
    "\062\156\074\155\001\002\000\006\062\uffa2\074\uffa2\001" +
    "\002\000\042\062\uffa1\067\135\070\123\071\122\072\121" +
    "\073\132\074\uffa1\076\127\077\136\100\133\102\134\103" +
    "\124\104\130\105\126\106\131\107\125\001\002\000\032" +
    "\004\072\005\065\006\103\007\066\010\074\011\100\012" +
    "\067\032\075\035\064\061\073\070\077\101\101\001\002" +
    "\000\032\004\072\005\065\006\103\007\066\010\074\011" +
    "\100\012\067\032\075\035\064\061\073\070\077\101\101" +
    "\001\002\000\032\004\072\005\065\006\103\007\066\010" +
    "\074\011\100\012\067\032\075\035\064\061\073\070\077" +
    "\101\101\001\002\000\032\004\072\005\065\006\103\007" +
    "\066\010\074\011\100\012\067\032\075\035\064\061\073" +
    "\070\077\101\101\001\002\000\032\004\072\005\065\006" +
    "\103\007\066\010\074\011\100\012\067\032\075\035\064" +
    "\061\073\070\077\101\101\001\002\000\032\004\072\005" +
    "\065\006\103\007\066\010\074\011\100\012\067\032\075" +
    "\035\064\061\073\070\077\101\101\001\002\000\032\004" +
    "\072\005\065\006\103\007\066\010\074\011\100\012\067" +
    "\032\075\035\064\061\073\070\077\101\101\001\002\000" +
    "\032\004\072\005\065\006\103\007\066\010\074\011\100" +
    "\012\067\032\075\035\064\061\073\070\077\101\101\001" +
    "\002\000\032\004\072\005\065\006\103\007\066\010\074" +
    "\011\100\012\067\032\075\035\064\061\073\070\077\101" +
    "\101\001\002\000\032\004\072\005\065\006\103\007\066" +
    "\010\074\011\100\012\067\032\075\035\064\061\073\070" +
    "\077\101\101\001\002\000\032\004\072\005\065\006\103" +
    "\007\066\010\074\011\100\012\067\032\075\035\064\061" +
    "\073\070\077\101\101\001\002\000\032\004\072\005\065" +
    "\006\103\007\066\010\074\011\100\012\067\032\075\035" +
    "\064\061\073\070\077\101\101\001\002\000\032\004\072" +
    "\005\065\006\103\007\066\010\074\011\100\012\067\032" +
    "\075\035\064\061\073\070\077\101\101\001\002\000\032" +
    "\004\072\005\065\006\103\007\066\010\074\011\100\012" +
    "\067\032\075\035\064\061\073\070\077\101\101\001\002" +
    "\000\054\062\uff6d\064\uff6d\065\uff6d\066\uff6d\067\135\070" +
    "\123\071\122\072\121\073\132\074\uff6d\075\uff6d\076\uff6d" +
    "\077\uff6d\100\133\102\134\103\124\104\130\105\126\106" +
    "\131\107\125\113\uff6d\001\002\000\054\062\uff64\064\uff64" +
    "\065\uff64\066\uff64\067\uff64\070\uff64\071\122\072\121\073" +
    "\132\074\uff64\075\uff64\076\uff64\077\uff64\100\uff64\102\uff64" +
    "\103\uff64\104\uff64\105\uff64\106\uff64\107\uff64\113\uff64\001" +
    "\002\000\054\062\uff67\064\uff67\065\uff67\066\uff67\067\135" +
    "\070\123\071\122\072\121\073\132\074\uff67\075\uff67\076" +
    "\uff67\077\uff67\100\uff67\102\uff67\103\uff67\104\uff67\105\uff67" +
    "\106\uff67\107\uff67\113\uff67\001\002\000\054\062\uff6c\064" +
    "\uff6c\065\uff6c\066\uff6c\067\135\070\123\071\122\072\121" +
    "\073\132\074\uff6c\075\uff6c\076\uff6c\077\uff6c\100\uff6c\102" +
    "\134\103\124\104\130\105\126\106\131\107\125\113\uff6c" +
    "\001\002\000\054\062\uff62\064\uff62\065\uff62\066\uff62\067" +
    "\uff62\070\uff62\071\uff62\072\121\073\uff62\074\uff62\075\uff62" +
    "\076\uff62\077\uff62\100\uff62\102\uff62\103\uff62\104\uff62\105" +
    "\uff62\106\uff62\107\uff62\113\uff62\001\002\000\054\062\uff6a" +
    "\064\uff6a\065\uff6a\066\uff6a\067\135\070\123\071\122\072" +
    "\121\073\132\074\uff6a\075\uff6a\076\uff6a\077\uff6a\100\uff6a" +
    "\102\134\103\124\104\130\105\126\106\uff6a\107\uff6a\113" +
    "\uff6a\001\002\000\054\062\uff65\064\uff65\065\uff65\066\uff65" +
    "\067\135\070\123\071\122\072\121\073\132\074\uff65\075" +
    "\uff65\076\uff65\077\uff65\100\uff65\102\uff65\103\uff65\104\uff65" +
    "\105\uff65\106\uff65\107\uff65\113\uff65\001\002\000\054\062" +
    "\uff6e\064\uff6e\065\uff6e\066\uff6e\067\135\070\123\071\122" +
    "\072\121\073\132\074\uff6e\075\uff6e\076\uff6e\077\136\100" +
    "\133\102\134\103\124\104\130\105\126\106\131\107\125" +
    "\113\uff6e\001\002\000\054\062\uff66\064\uff66\065\uff66\066" +
    "\uff66\067\135\070\123\071\122\072\121\073\132\074\uff66" +
    "\075\uff66\076\uff66\077\uff66\100\uff66\102\uff66\103\uff66\104" +
    "\uff66\105\uff66\106\uff66\107\uff66\113\uff66\001\002\000\054" +
    "\062\uff69\064\uff69\065\uff69\066\uff69\067\135\070\123\071" +
    "\122\072\121\073\132\074\uff69\075\uff69\076\uff69\077\uff69" +
    "\100\uff69\102\134\103\124\104\130\105\126\106\uff69\107" +
    "\uff69\113\uff69\001\002\000\054\062\uff68\064\uff68\065\uff68" +
    "\066\uff68\067\135\070\123\071\122\072\121\073\132\074" +
    "\uff68\075\uff68\076\uff68\077\uff68\100\uff68\102\uff68\103\uff68" +
    "\104\uff68\105\uff68\106\uff68\107\uff68\113\uff68\001\002\000" +
    "\054\062\uff63\064\uff63\065\uff63\066\uff63\067\uff63\070\uff63" +
    "\071\122\072\121\073\132\074\uff63\075\uff63\076\uff63\077" +
    "\uff63\100\uff63\102\uff63\103\uff63\104\uff63\105\uff63\106\uff63" +
    "\107\uff63\113\uff63\001\002\000\054\062\uff61\064\uff61\065" +
    "\uff61\066\uff61\067\uff61\070\uff61\071\uff61\072\121\073\uff61" +
    "\074\uff61\075\uff61\076\uff61\077\uff61\100\uff61\102\uff61\103" +
    "\uff61\104\uff61\105\uff61\106\uff61\107\uff61\113\uff61\001\002" +
    "\000\054\062\uff60\064\uff60\065\uff60\066\uff60\067\uff60\070" +
    "\uff60\071\uff60\072\121\073\uff60\074\uff60\075\uff60\076\uff60" +
    "\077\uff60\100\uff60\102\uff60\103\uff60\104\uff60\105\uff60\106" +
    "\uff60\107\uff60\113\uff60\001\002\000\032\004\072\005\065" +
    "\006\103\007\066\010\074\011\100\012\067\032\075\035" +
    "\064\061\073\070\077\101\101\001\002\000\060\062\uff9f" +
    "\064\uff9f\065\uff9f\066\uff9f\067\uff9f\070\uff9f\071\uff9f\072" +
    "\uff9f\073\uff9f\074\uff9f\075\uff9f\076\uff9f\077\uff9f\100\uff9f" +
    "\102\uff9f\103\uff9f\104\uff9f\105\uff9f\106\uff9f\107\uff9f\112" +
    "\uff9f\113\uff9f\114\uff9f\001\002\000\006\062\uffa3\074\uffa3" +
    "\001\002\000\060\062\uff9c\064\uff9c\065\uff9c\066\uff9c\067" +
    "\uff9c\070\uff9c\071\uff9c\072\uff9c\073\uff9c\074\uff9c\075\uff9c" +
    "\076\uff9c\077\uff9c\100\uff9c\102\uff9c\103\uff9c\104\uff9c\105" +
    "\uff9c\106\uff9c\107\uff9c\112\uff9c\113\uff9c\114\uff9c\001\002" +
    "\000\054\062\uff6b\064\uff6b\065\uff6b\066\uff6b\067\135\070" +
    "\123\071\122\072\121\073\132\074\uff6b\075\uff6b\076\uff6b" +
    "\077\uff6b\100\uff6b\102\134\103\124\104\130\105\126\106" +
    "\131\107\125\113\uff6b\001\002\000\054\062\uff57\064\uff57" +
    "\065\uff57\066\uff57\067\uff57\070\uff57\071\122\072\121\073" +
    "\132\074\uff57\075\uff57\076\uff57\077\uff57\100\uff57\102\uff57" +
    "\103\uff57\104\uff57\105\uff57\106\uff57\107\uff57\113\uff57\001" +
    "\002\000\006\061\164\114\107\001\002\000\034\004\072" +
    "\005\065\006\103\007\066\010\074\011\100\012\067\032" +
    "\075\035\064\061\073\062\166\070\077\101\101\001\002" +
    "\000\060\062\uff9d\064\uff9d\065\uff9d\066\uff9d\067\uff9d\070" +
    "\uff9d\071\uff9d\072\uff9d\073\uff9d\074\uff9d\075\uff9d\076\uff9d" +
    "\077\uff9d\100\uff9d\102\uff9d\103\uff9d\104\uff9d\105\uff9d\106" +
    "\uff9d\107\uff9d\112\uff9d\113\uff9d\114\107\001\002\000\054" +
    "\062\uffa6\064\uffa6\065\uffa6\066\uffa6\067\uffa6\070\uffa6\071" +
    "\uffa6\072\uffa6\073\uffa6\074\uffa6\075\uffa6\076\uffa6\077\uffa6" +
    "\100\uffa6\102\uffa6\103\uffa6\104\uffa6\105\uffa6\106\uffa6\107" +
    "\uffa6\113\uffa6\001\002\000\006\062\170\074\155\001\002" +
    "\000\054\062\uffa7\064\uffa7\065\uffa7\066\uffa7\067\uffa7\070" +
    "\uffa7\071\uffa7\072\uffa7\073\uffa7\074\uffa7\075\uffa7\076\uffa7" +
    "\077\uffa7\100\uffa7\102\uffa7\103\uffa7\104\uffa7\105\uffa7\106" +
    "\uffa7\107\uffa7\113\uffa7\001\002\000\040\062\172\067\135" +
    "\070\123\071\122\072\121\073\132\076\127\077\136\100" +
    "\133\102\134\103\124\104\130\105\126\106\131\107\125" +
    "\001\002\000\054\062\uff56\064\uff56\065\uff56\066\uff56\067" +
    "\uff56\070\uff56\071\uff56\072\uff56\073\uff56\074\uff56\075\uff56" +
    "\076\uff56\077\uff56\100\uff56\102\uff56\103\uff56\104\uff56\105" +
    "\uff56\106\uff56\107\uff56\113\uff56\001\002\000\004\061\174" +
    "\001\002\000\034\004\072\005\065\006\103\007\066\010" +
    "\074\011\100\012\067\032\075\035\064\061\073\062\175" +
    "\070\077\101\101\001\002\000\054\062\uffa4\064\uffa4\065" +
    "\uffa4\066\uffa4\067\uffa4\070\uffa4\071\uffa4\072\uffa4\073\uffa4" +
    "\074\uffa4\075\uffa4\076\uffa4\077\uffa4\100\uffa4\102\uffa4\103" +
    "\uffa4\104\uffa4\105\uffa4\106\uffa4\107\uffa4\113\uffa4\001\002" +
    "\000\006\062\177\074\155\001\002\000\054\062\uffa5\064" +
    "\uffa5\065\uffa5\066\uffa5\067\uffa5\070\uffa5\071\uffa5\072\uffa5" +
    "\073\uffa5\074\uffa5\075\uffa5\076\uffa5\077\uffa5\100\uffa5\102" +
    "\uffa5\103\uffa5\104\uffa5\105\uffa5\106\uffa5\107\uffa5\113\uffa5" +
    "\001\002\000\040\064\201\067\135\070\123\071\122\072" +
    "\121\073\132\076\127\077\136\100\133\102\134\103\124" +
    "\104\130\105\126\106\131\107\125\001\002\000\060\062" +
    "\uff8d\063\uff8d\064\uff8d\065\uff8d\066\uff8d\067\uff8d\070\uff8d" +
    "\071\uff8d\072\uff8d\073\uff8d\074\uff8d\075\uff8d\076\uff8d\077" +
    "\uff8d\100\uff8d\102\uff8d\103\uff8d\104\uff8d\105\uff8d\106\uff8d" +
    "\107\uff8d\112\uff8d\113\uff8d\001\002\000\024\006\uffe6\013" +
    "\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\027\uffe6" +
    "\066\uffe6\001\002\000\004\061\u0148\001\002\000\004\061" +
    "\u0111\001\002\000\004\061\206\001\002\000\004\062\207" +
    "\001\002\000\004\065\210\001\002\000\040\006\217\027" +
    "\044\031\227\032\075\035\064\036\213\040\212\043\233" +
    "\044\246\045\242\046\240\047\223\050\250\057\235\060" +
    "\247\001\002\000\046\006\uffc8\027\uffc8\031\uffc8\032\uffc8" +
    "\035\uffc8\036\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044" +
    "\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\057\uffc8\060\uffc8" +
    "\066\uffc8\001\002\000\032\004\072\005\065\006\103\007" +
    "\066\010\074\011\100\012\067\032\075\035\064\061\073" +
    "\070\077\101\101\001\002\000\004\061\377\001\002\000" +
    "\046\006\uffc9\027\uffc9\031\uffc9\032\uffc9\035\uffc9\036\uffc9" +
    "\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046" +
    "\uffc9\047\uffc9\050\uffc9\057\uffc9\060\uffc9\066\uffc9\001\002" +
    "\000\050\006\uffd5\027\uffd5\031\uffd5\032\uffd5\035\uffd5\036" +
    "\uffd5\037\373\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5" +
    "\045\uffd5\046\uffd5\047\uffd5\050\uffd5\057\uffd5\060\uffd5\066" +
    "\uffd5\001\002\000\046\006\uffd6\027\uffd6\031\uffd6\032\uffd6" +
    "\035\uffd6\036\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044" +
    "\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\057\uffd6\060\uffd6" +
    "\066\uffd6\001\002\000\014\063\055\110\106\111\112\112" +
    "\343\114\107\001\002\000\046\006\uffca\027\uffca\031\uffca" +
    "\032\uffca\035\uffca\036\uffca\040\uffca\041\uffca\042\uffca\043" +
    "\uffca\044\uffca\045\uffca\046\uffca\047\uffca\050\uffca\057\uffca" +
    "\060\uffca\066\uffca\001\002\000\046\006\uffd4\027\uffd4\031" +
    "\uffd4\032\uffd4\035\uffd4\036\uffd4\040\uffd4\041\uffd4\042\uffd4" +
    "\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\057" +
    "\uffd4\060\uffd4\066\uffd4\001\002\000\046\006\uffd1\027\uffd1" +
    "\031\uffd1\032\uffd1\035\uffd1\036\uffd1\040\uffd1\041\uffd1\042" +
    "\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1" +
    "\057\uffd1\060\uffd1\066\uffd1\001\002\000\004\075\372\001" +
    "\002\000\046\006\uffd0\027\uffd0\031\uffd0\032\uffd0\035\uffd0" +
    "\036\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045" +
    "\uffd0\046\uffd0\047\uffd0\050\uffd0\057\uffd0\060\uffd0\066\uffd0" +
    "\001\002\000\004\075\371\001\002\000\046\006\uffcf\027" +
    "\uffcf\031\uffcf\032\uffcf\035\uffcf\036\uffcf\040\uffcf\041\uffcf" +
    "\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050" +
    "\uffcf\057\uffcf\060\uffcf\066\uffcf\001\002\000\034\004\072" +
    "\005\065\006\103\007\066\010\074\011\100\012\067\032" +
    "\075\035\064\061\073\070\077\075\366\101\101\001\002" +
    "\000\046\006\uffcd\027\uffcd\031\uffcd\032\uffcd\035\uffcd\036" +
    "\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd" +
    "\046\uffcd\047\uffcd\050\uffcd\057\uffcd\060\uffcd\066\uffcd\001" +
    "\002\000\042\006\217\027\044\031\227\032\075\035\064" +
    "\036\213\040\212\043\233\044\246\045\242\046\240\047" +
    "\223\050\250\057\235\060\247\066\365\001\002\000\006" +
    "\075\364\112\361\001\002\000\004\061\325\001\002\000" +
    "\004\075\324\001\002\000\004\061\320\001\002\000\046" +
    "\006\uffd3\027\uffd3\031\uffd3\032\uffd3\035\uffd3\036\uffd3\040" +
    "\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3" +
    "\047\uffd3\050\uffd3\057\uffd3\060\uffd3\066\uffd3\001\002\000" +
    "\004\075\317\001\002\000\004\075\316\001\002\000\004" +
    "\075\315\001\002\000\004\065\306\001\002\000\046\006" +
    "\uffce\027\uffce\031\uffce\032\uffce\035\uffce\036\uffce\040\uffce" +
    "\041\uffce\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce\047" +
    "\uffce\050\uffce\057\uffce\060\uffce\066\uffce\001\002\000\004" +
    "\075\305\001\002\000\046\006\uffd2\027\uffd2\031\uffd2\032" +
    "\uffd2\035\uffd2\036\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2" +
    "\044\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2\057\uffd2\060" +
    "\uffd2\066\uffd2\001\002\000\004\061\276\001\002\000\004" +
    "\061\272\001\002\000\004\061\251\001\002\000\006\006" +
    "\253\065\254\001\002\000\004\074\266\001\002\000\006" +
    "\062\uff97\074\uff97\001\002\000\034\004\072\005\065\006" +
    "\103\007\066\010\074\011\100\012\067\032\075\035\064" +
    "\061\073\065\256\070\077\101\101\001\002\000\006\066" +
    "\uff87\074\uff87\001\002\000\034\004\072\005\065\006\103" +
    "\007\066\010\074\011\100\012\067\032\075\035\064\061" +
    "\073\065\256\070\077\101\101\001\002\000\006\066\262" +
    "\074\261\001\002\000\042\066\uff86\067\135\070\123\071" +
    "\122\072\121\073\132\074\uff86\076\127\077\136\100\133" +
    "\102\134\103\124\104\130\105\126\106\131\107\125\001" +
    "\002\000\034\004\072\005\065\006\103\007\066\010\074" +
    "\011\100\012\067\032\075\035\064\061\073\065\256\070" +
    "\077\101\101\001\002\000\006\062\uff96\074\uff96\001\002" +
    "\000\006\066\uff88\074\uff88\001\002\000\006\066\265\074" +
    "\261\001\002\000\006\066\uff85\074\uff85\001\002\000\006" +
    "\006\253\065\254\001\002\000\004\062\270\001\002\000" +
    "\004\075\271\001\002\000\046\006\uff98\027\uff98\031\uff98" +
    "\032\uff98\035\uff98\036\uff98\040\uff98\041\uff98\042\uff98\043" +
    "\uff98\044\uff98\045\uff98\046\uff98\047\uff98\050\uff98\057\uff98" +
    "\060\uff98\066\uff98\001\002\000\032\004\072\005\065\006" +
    "\103\007\066\010\074\011\100\012\067\032\075\035\064" +
    "\061\073\070\077\101\101\001\002\000\040\062\274\067" +
    "\135\070\123\071\122\072\121\073\132\076\127\077\136" +
    "\100\133\102\134\103\124\104\130\105\126\106\131\107" +
    "\125\001\002\000\004\075\275\001\002\000\046\006\uff94" +
    "\027\uff94\031\uff94\032\uff94\035\uff94\036\uff94\040\uff94\041" +
    "\uff94\042\uff94\043\uff94\044\uff94\045\uff94\046\uff94\047\uff94" +
    "\050\uff94\057\uff94\060\uff94\066\uff94\001\002\000\032\004" +
    "\072\005\065\006\103\007\066\010\074\011\100\012\067" +
    "\032\075\035\064\061\073\070\077\101\101\001\002\000" +
    "\040\062\300\067\135\070\123\071\122\072\121\073\132" +
    "\076\127\077\136\100\133\102\134\103\124\104\130\105" +
    "\126\106\131\107\125\001\002\000\004\065\301\001\002" +
    "\000\040\006\217\027\044\031\227\032\075\035\064\036" +
    "\213\040\212\043\233\044\246\045\242\046\240\047\223" +
    "\050\250\057\235\060\247\001\002\000\042\006\217\027" +
    "\044\031\227\032\075\035\064\036\213\040\212\043\233" +
    "\044\246\045\242\046\240\047\223\050\250\057\235\060" +
    "\247\066\304\001\002\000\046\006\uffd7\027\uffd7\031\uffd7" +
    "\032\uffd7\035\uffd7\036\uffd7\040\uffd7\041\uffd7\042\uffd7\043" +
    "\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7\057\uffd7" +
    "\060\uffd7\066\uffd7\001\002\000\046\006\uffad\027\uffad\031" +
    "\uffad\032\uffad\035\uffad\036\uffad\040\uffad\041\uffad\042\uffad" +
    "\043\uffad\044\uffad\045\uffad\046\uffad\047\uffad\050\uffad\057" +
    "\uffad\060\uffad\066\uffad\001\002\000\046\006\uffcc\027\uffcc" +
    "\031\uffcc\032\uffcc\035\uffcc\036\uffcc\040\uffcc\041\uffcc\042" +
    "\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc" +
    "\057\uffcc\060\uffcc\066\uffcc\001\002\000\040\006\217\027" +
    "\044\031\227\032\075\035\064\036\213\040\212\043\233" +
    "\044\246\045\242\046\240\047\223\050\250\057\235\060" +
    "\247\001\002\000\042\006\217\027\044\031\227\032\075" +
    "\035\064\036\213\040\212\043\233\044\246\045\242\046" +
    "\240\047\223\050\250\057\235\060\247\066\310\001\002" +
    "\000\004\044\311\001\002\000\004\061\312\001\002\000" +
    "\032\004\072\005\065\006\103\007\066\010\074\011\100" +
    "\012\067\032\075\035\064\061\073\070\077\101\101\001" +
    "\002\000\040\062\314\067\135\070\123\071\122\072\121" +
    "\073\132\076\127\077\136\100\133\102\134\103\124\104" +
    "\130\105\126\106\131\107\125\001\002\000\046\006\uffac" +
    "\027\uffac\031\uffac\032\uffac\035\uffac\036\uffac\040\uffac\041" +
    "\uffac\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac\047\uffac" +
    "\050\uffac\057\uffac\060\uffac\066\uffac\001\002\000\046\006" +
    "\uffcb\027\uffcb\031\uffcb\032\uffcb\035\uffcb\036\uffcb\040\uffcb" +
    "\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047" +
    "\uffcb\050\uffcb\057\uffcb\060\uffcb\066\uffcb\001\002\000\046" +
    "\006\uffab\027\uffab\031\uffab\032\uffab\035\uffab\036\uffab\040" +
    "\uffab\041\uffab\042\uffab\043\uffab\044\uffab\045\uffab\046\uffab" +
    "\047\uffab\050\uffab\057\uffab\060\uffab\066\uffab\001\002\000" +
    "\046\006\uffc7\027\uffc7\031\uffc7\032\uffc7\035\uffc7\036\uffc7" +
    "\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046" +
    "\uffc7\047\uffc7\050\uffc7\057\uffc7\060\uffc7\066\uffc7\001\002" +
    "\000\032\004\072\005\065\006\103\007\066\010\074\011" +
    "\100\012\067\032\075\035\064\061\073\070\077\101\101" +
    "\001\002\000\040\062\322\067\135\070\123\071\122\072" +
    "\121\073\132\076\127\077\136\100\133\102\134\103\124" +
    "\104\130\105\126\106\131\107\125\001\002\000\004\075" +
    "\323\001\002\000\046\006\uff95\027\uff95\031\uff95\032\uff95" +
    "\035\uff95\036\uff95\040\uff95\041\uff95\042\uff95\043\uff95\044" +
    "\uff95\045\uff95\046\uff95\047\uff95\050\uff95\057\uff95\060\uff95" +
    "\066\uff95\001\002\000\046\006\uffc6\027\uffc6\031\uffc6\032" +
    "\uffc6\035\uffc6\036\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6" +
    "\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\057\uffc6\060" +
    "\uffc6\066\uffc6\001\002\000\010\006\330\027\332\032\326" +
    "\001\002\000\004\006\363\001\002\000\004\113\uffb0\001" +
    "\002\000\006\112\343\114\107\001\002\000\004\112\361" +
    "\001\002\000\016\006\354\013\032\014\052\015\031\016" +
    "\037\017\046\001\002\000\004\113\334\001\002\000\032" +
    "\004\072\005\065\006\103\007\066\010\074\011\100\012" +
    "\067\032\075\035\064\061\073\070\077\101\101\001\002" +
    "\000\040\067\135\070\123\071\122\072\121\073\132\076" +
    "\127\077\136\100\133\102\134\103\124\104\130\105\126" +
    "\106\131\107\125\113\336\001\002\000\006\006\342\032" +
    "\326\001\002\000\004\062\uffaf\001\002\000\004\062\350" +
    "\001\002\000\004\062\uffae\001\002\000\012\110\106\111" +
    "\112\112\343\114\107\001\002\000\034\004\072\005\065" +
    "\006\103\007\066\010\074\011\100\012\067\030\344\032" +
    "\075\035\064\061\073\070\077\101\101\001\002\000\004" +
    "\006\346\001\002\000\044\062\uffbf\067\135\070\123\071" +
    "\122\072\121\073\132\075\uffbf\076\127\077\136\100\133" +
    "\102\134\103\124\104\130\105\126\106\131\107\125\113" +
    "\uffbf\001\002\000\004\061\105\001\002\000\010\062\uffbe" +
    "\075\uffbe\113\uffbe\001\002\000\004\065\351\001\002\000" +
    "\040\006\217\027\044\031\227\032\075\035\064\036\213" +
    "\040\212\043\233\044\246\045\242\046\240\047\223\050" +
    "\250\057\235\060\247\001\002\000\042\006\217\027\044" +
    "\031\227\032\075\035\064\036\213\040\212\043\233\044" +
    "\246\045\242\046\240\047\223\050\250\057\235\060\247" +
    "\066\353\001\002\000\046\006\uffb2\027\uffb2\031\uffb2\032" +
    "\uffb2\035\uffb2\036\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2" +
    "\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2\057\uffb2\060" +
    "\uffb2\066\uffb2\001\002\000\004\006\uffd8\001\002\000\004" +
    "\006\356\001\002\000\004\112\357\001\002\000\032\004" +
    "\072\005\065\006\103\007\066\010\074\011\100\012\067" +
    "\032\075\035\064\061\073\070\077\101\101\001\002\000" +
    "\040\067\135\070\123\071\122\072\121\073\132\076\127" +
    "\077\136\100\133\102\134\103\124\104\130\105\126\106" +
    "\131\107\125\113\uffb1\001\002\000\032\004\072\005\065" +
    "\006\103\007\066\010\074\011\100\012\067\032\075\035" +
    "\064\061\073\070\077\101\101\001\002\000\044\062\uffbd" +
    "\067\135\070\123\071\122\072\121\073\132\075\uffbd\076" +
    "\127\077\136\100\133\102\134\103\124\104\130\105\126" +
    "\106\131\107\125\113\uffbd\001\002\000\004\114\107\001" +
    "\002\000\046\006\uffc4\027\uffc4\031\uffc4\032\uffc4\035\uffc4" +
    "\036\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045" +
    "\uffc4\046\uffc4\047\uffc4\050\uffc4\057\uffc4\060\uffc4\066\uffc4" +
    "\001\002\000\024\006\uffde\013\uffde\014\uffde\015\uffde\016" +
    "\uffde\017\uffde\020\uffde\027\uffde\066\uffde\001\002\000\046" +
    "\006\uffa8\027\uffa8\031\uffa8\032\uffa8\035\uffa8\036\uffa8\040" +
    "\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8" +
    "\047\uffa8\050\uffa8\057\uffa8\060\uffa8\066\uffa8\001\002\000" +
    "\040\067\135\070\123\071\122\072\121\073\132\075\370" +
    "\076\127\077\136\100\133\102\134\103\124\104\130\105" +
    "\126\106\131\107\125\001\002\000\046\006\uffa9\027\uffa9" +
    "\031\uffa9\032\uffa9\035\uffa9\036\uffa9\040\uffa9\041\uffa9\042" +
    "\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9" +
    "\057\uffa9\060\uffa9\066\uffa9\001\002\000\046\006\uffc5\027" +
    "\uffc5\031\uffc5\032\uffc5\035\uffc5\036\uffc5\040\uffc5\041\uffc5" +
    "\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050" +
    "\uffc5\057\uffc5\060\uffc5\066\uffc5\001\002\000\046\006\uffaa" +
    "\027\uffaa\031\uffaa\032\uffaa\035\uffaa\036\uffaa\040\uffaa\041" +
    "\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa" +
    "\050\uffaa\057\uffaa\060\uffaa\066\uffaa\001\002\000\004\065" +
    "\374\001\002\000\040\006\217\027\044\031\227\032\075" +
    "\035\064\036\213\040\212\043\233\044\246\045\242\046" +
    "\240\047\223\050\250\057\235\060\247\001\002\000\042" +
    "\006\217\027\044\031\227\032\075\035\064\036\213\040" +
    "\212\043\233\044\246\045\242\046\240\047\223\050\250" +
    "\057\235\060\247\066\376\001\002\000\046\006\uffb8\027" +
    "\uffb8\031\uffb8\032\uffb8\035\uffb8\036\uffb8\040\uffb8\041\uffb8" +
    "\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050" +
    "\uffb8\057\uffb8\060\uffb8\066\uffb8\001\002\000\032\004\072" +
    "\005\065\006\103\007\066\010\074\011\100\012\067\032" +
    "\075\035\064\061\073\070\077\101\101\001\002\000\040" +
    "\062\u0101\067\135\070\123\071\122\072\121\073\132\076" +
    "\127\077\136\100\133\102\134\103\124\104\130\105\126" +
    "\106\131\107\125\001\002\000\004\065\u0102\001\002\000" +
    "\040\006\217\027\044\031\227\032\075\035\064\036\213" +
    "\040\212\043\233\044\246\045\242\046\240\047\223\050" +
    "\250\057\235\060\247\001\002\000\042\006\217\027\044" +
    "\031\227\032\075\035\064\036\213\040\212\043\233\044" +
    "\246\045\242\046\240\047\223\050\250\057\235\060\247" +
    "\066\u0104\001\002\000\050\006\uffb9\027\uffb9\031\uffb9\032" +
    "\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9" +
    "\043\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9\057" +
    "\uffb9\060\uffb9\066\uffb9\001\002\000\040\065\u0106\067\135" +
    "\070\123\071\122\072\121\073\132\076\127\077\136\100" +
    "\133\102\134\103\124\104\130\105\126\106\131\107\125" +
    "\001\002\000\006\041\u0109\042\u0108\001\002\000\010\041" +
    "\uffb5\042\uffb5\066\uffb5\001\002\000\040\006\217\027\044" +
    "\031\227\032\075\035\064\036\213\040\212\043\233\044" +
    "\246\045\242\046\240\047\223\050\250\057\235\060\247" +
    "\001\002\000\032\004\072\005\065\006\103\007\066\010" +
    "\074\011\100\012\067\032\075\035\064\061\073\070\077" +
    "\101\101\001\002\000\010\041\u0109\042\u0108\066\u010c\001" +
    "\002\000\010\041\uffb6\042\uffb6\066\uffb6\001\002\000\046" +
    "\006\uffb7\027\uffb7\031\uffb7\032\uffb7\035\uffb7\036\uffb7\040" +
    "\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7" +
    "\047\uffb7\050\uffb7\057\uffb7\060\uffb7\066\uffb7\001\002\000" +
    "\040\067\135\070\123\071\122\072\121\073\132\076\127" +
    "\077\136\100\133\102\134\103\124\104\130\105\126\106" +
    "\131\107\125\113\u010e\001\002\000\040\006\217\027\044" +
    "\031\227\032\075\035\064\036\213\040\212\043\233\044" +
    "\246\045\242\046\240\047\223\050\250\057\235\060\247" +
    "\001\002\000\046\006\217\027\044\031\227\032\075\035" +
    "\064\036\213\040\212\041\uffb4\042\uffb4\043\233\044\246" +
    "\045\242\046\240\047\223\050\250\057\235\060\247\066" +
    "\uffb4\001\002\000\046\006\217\027\044\031\227\032\075" +
    "\035\064\036\213\040\212\041\uffb3\042\uffb3\043\233\044" +
    "\246\045\242\046\240\047\223\050\250\057\235\060\247" +
    "\066\uffb3\001\002\000\004\062\u0112\001\002\000\004\065" +
    "\u0113\001\002\000\012\053\u011d\054\u0119\055\u0116\056\u0115" +
    "\001\002\000\014\053\uff80\054\uff80\055\uff80\056\uff80\066" +
    "\uff80\001\002\000\004\061\u0144\001\002\000\004\061\u0140" +
    "\001\002\000\014\053\uff7d\054\uff7d\055\uff7d\056\uff7d\066" +
    "\uff7d\001\002\000\014\053\uff7e\054\uff7e\055\uff7e\056\uff7e" +
    "\066\uff7e\001\002\000\004\061\u013a\001\002\000\014\053" +
    "\uff7f\054\uff7f\055\uff7f\056\uff7f\066\uff7f\001\002\000\014" +
    "\053\uff81\054\uff81\055\uff81\056\uff81\066\uff81\001\002\000" +
    "\014\053\u011d\054\u0119\055\u0116\056\u0115\066\u0138\001\002" +
    "\000\004\112\u011e\001\002\000\034\004\072\005\065\006" +
    "\103\007\066\010\074\011\100\012\067\032\u0123\035\u0120" +
    "\052\u0121\061\073\070\077\101\101\001\002\000\006\062" +
    "\uff7a\075\uff7a\001\002\000\004\006\u0134\001\002\000\004" +
    "\061\u0130\001\002\000\004\075\uff76\001\002\000\004\006" +
    "\u0129\001\002\000\004\075\uff78\001\002\000\004\075\uff77" +
    "\001\002\000\004\075\u0128\001\002\000\042\062\uff7b\067" +
    "\135\070\123\071\122\072\121\073\132\075\uff7b\076\127" +
    "\077\136\100\133\102\134\103\124\104\130\105\126\106" +
    "\131\107\125\001\002\000\014\053\uff79\054\uff79\055\uff79" +
    "\056\uff79\066\uff79\001\002\000\006\061\u012a\114\107\001" +
    "\002\000\036\004\072\005\065\006\103\007\066\010\074" +
    "\011\100\012\067\032\075\035\064\052\u0121\061\073\062" +
    "\166\070\077\101\101\001\002\000\006\062\uff72\074\uff72" +
    "\001\002\000\006\062\u012e\074\u012d\001\002\000\004\052" +
    "\u0121\001\002\000\004\075\uff74\001\002\000\006\062\uff73" +
    "\074\uff73\001\002\000\032\004\072\005\065\006\103\007" +
    "\066\010\074\011\100\012\067\032\075\035\064\061\073" +
    "\070\077\101\101\001\002\000\040\062\u0132\067\135\070" +
    "\123\071\122\072\121\073\132\076\127\077\136\100\133" +
    "\102\134\103\124\104\130\105\126\106\131\107\125\001" +
    "\002\000\004\075\u0133\001\002\000\010\062\uff7c\074\uff7c" +
    "\075\uff7c\001\002\000\004\061\u0135\001\002\000\036\004" +
    "\072\005\065\006\103\007\066\010\074\011\100\012\067" +
    "\032\075\035\064\052\u0121\061\073\062\175\070\077\101" +
    "\101\001\002\000\006\062\u0137\074\u012d\001\002\000\004" +
    "\075\uff75\001\002\000\024\006\uff83\013\uff83\014\uff83\015" +
    "\uff83\016\uff83\017\uff83\020\uff83\027\uff83\066\uff83\001\002" +
    "\000\014\053\uff82\054\uff82\055\uff82\056\uff82\066\uff82\001" +
    "\002\000\034\004\072\005\065\006\103\007\066\010\074" +
    "\011\100\012\067\032\075\035\064\052\u0121\061\073\070" +
    "\077\101\101\001\002\000\004\062\u013c\001\002\000\004" +
    "\112\u013d\001\002\000\032\004\072\005\065\006\103\007" +
    "\066\010\074\011\100\012\067\032\075\035\064\061\073" +
    "\070\077\101\101\001\002\000\040\067\135\070\123\071" +
    "\122\072\121\073\132\075\u013f\076\127\077\136\100\133" +
    "\102\134\103\124\104\130\105\126\106\131\107\125\001" +
    "\002\000\014\053\uff71\054\uff71\055\uff71\056\uff71\066\uff71" +
    "\001\002\000\034\004\072\005\065\006\103\007\066\010" +
    "\074\011\100\012\067\032\075\035\064\052\u0121\061\073" +
    "\070\077\101\101\001\002\000\004\062\u0142\001\002\000" +
    "\004\075\u0143\001\002\000\014\053\uff70\054\uff70\055\uff70" +
    "\056\uff70\066\uff70\001\002\000\034\004\072\005\065\006" +
    "\103\007\066\010\074\011\100\012\067\032\075\035\064" +
    "\052\u0121\061\073\070\077\101\101\001\002\000\004\062" +
    "\u0146\001\002\000\004\075\u0147\001\002\000\014\053\uff6f" +
    "\054\uff6f\055\uff6f\056\uff6f\066\uff6f\001\002\000\020\006" +
    "\354\013\032\014\052\015\031\016\037\017\046\062\u0149" +
    "\001\002\000\006\065\uffee\113\023\001\002\000\004\006" +
    "\u0154\001\002\000\006\062\u014e\074\u014d\001\002\000\006" +
    "\062\uffe0\074\uffe0\001\002\000\016\006\354\013\032\014" +
    "\052\015\031\016\037\017\046\001\002\000\006\065\uffee" +
    "\113\023\001\002\000\004\065\u0150\001\002\000\040\006" +
    "\217\027\044\031\227\032\075\035\064\036\213\040\212" +
    "\043\233\044\246\045\242\046\240\047\223\050\250\057" +
    "\235\060\247\001\002\000\042\006\217\027\044\031\227" +
    "\032\075\035\064\036\213\040\212\043\233\044\246\045" +
    "\242\046\240\047\223\050\250\057\235\060\247\066\u0152" +
    "\001\002\000\024\006\uffe5\013\uffe5\014\uffe5\015\uffe5\016" +
    "\uffe5\017\uffe5\020\uffe5\027\uffe5\066\uffe5\001\002\000\006" +
    "\062\uffe1\074\uffe1\001\002\000\006\062\uffdf\074\uffdf\001" +
    "\002\000\004\065\u0156\001\002\000\040\006\217\027\044" +
    "\031\227\032\075\035\064\036\213\040\212\043\233\044" +
    "\246\045\242\046\240\047\223\050\250\057\235\060\247" +
    "\001\002\000\042\006\217\027\044\031\227\032\075\035" +
    "\064\036\213\040\212\043\233\044\246\045\242\046\240" +
    "\047\223\050\250\057\235\060\247\066\u0158\001\002\000" +
    "\024\006\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4" +
    "\020\uffe4\027\uffe4\066\uffe4\001\002\000\004\006\u015b\001" +
    "\002\000\006\074\uffbb\075\uffbb\001\002\000\014\063\055" +
    "\074\uffee\075\uffee\112\uffee\113\023\001\002\000\006\074" +
    "\u015d\075\uffc2\001\002\000\004\006\u015f\001\002\000\006" +
    "\074\uffbc\075\uffbc\001\002\000\010\074\uffee\075\uffee\113" +
    "\023\001\002\000\006\074\uffba\075\uffba\001\002\000\012" +
    "\063\055\075\uffee\112\uffee\113\023\001\002\000\010\074" +
    "\uffba\075\uffba\112\u0163\001\002\000\034\004\072\005\065" +
    "\006\103\007\066\010\074\011\100\012\067\030\u0164\032" +
    "\075\035\064\061\073\070\077\101\101\001\002\000\004" +
    "\006\346\001\002\000\040\067\135\070\123\071\122\072" +
    "\121\073\132\075\uffc1\076\127\077\136\100\133\102\134" +
    "\103\124\104\130\105\126\106\131\107\125\001\002\000" +
    "\004\075\uffc0\001\002\000\006\075\uff91\112\u0168\001\002" +
    "\000\006\006\u016a\065\u016c\001\002\000\006\074\u016f\075" +
    "\uff8b\001\002\000\004\075\uff8c\001\002\000\004\075\uff90" +
    "\001\002\000\034\004\072\005\065\006\103\007\066\010" +
    "\074\011\100\012\067\032\075\035\064\061\073\065\256" +
    "\070\077\101\101\001\002\000\006\066\u016e\074\261\001" +
    "\002\000\006\074\uff89\075\uff89\001\002\000\004\065\u0170" +
    "\001\002\000\034\004\072\005\065\006\103\007\066\010" +
    "\074\011\100\012\067\032\075\035\064\061\073\065\256" +
    "\070\077\101\101\001\002\000\006\066\u0172\074\261\001" +
    "\002\000\006\074\uff8a\075\uff8a\001\002\000\004\061\u0174" +
    "\001\002\000\020\006\354\013\032\014\052\015\031\016" +
    "\037\017\046\062\u0175\001\002\000\006\065\uffee\113\023" +
    "\001\002\000\006\062\u0177\074\u014d\001\002\000\006\065" +
    "\uffee\113\023\001\002\000\004\065\u0179\001\002\000\040" +
    "\006\217\027\044\031\227\032\075\035\064\036\213\040" +
    "\212\043\233\044\246\045\242\046\240\047\223\050\250" +
    "\057\235\060\247\001\002\000\042\006\217\027\044\031" +
    "\227\032\075\035\064\036\213\040\212\043\233\044\246" +
    "\045\242\046\240\047\223\050\250\057\235\060\247\066" +
    "\u017b\001\002\000\024\006\uffe3\013\uffe3\014\uffe3\015\uffe3" +
    "\016\uffe3\017\uffe3\020\uffe3\027\uffe3\066\uffe3\001\002\000" +
    "\004\065\u017d\001\002\000\040\006\217\027\044\031\227" +
    "\032\075\035\064\036\213\040\212\043\233\044\246\045" +
    "\242\046\240\047\223\050\250\057\235\060\247\001\002" +
    "\000\042\006\217\027\044\031\227\032\075\035\064\036" +
    "\213\040\212\043\233\044\246\045\242\046\240\047\223" +
    "\050\250\057\235\060\247\066\u017f\001\002\000\024\006" +
    "\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2" +
    "\027\uffe2\066\uffe2\001\002\000\006\002\ufff2\025\ufff2\001" +
    "\002\000\024\006\uffed\013\uffed\014\uffed\015\uffed\016\uffed" +
    "\017\uffed\020\uffed\027\uffed\066\uffed\001\002\000\024\006" +
    "\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7" +
    "\027\uffe7\066\uffe7\001\002\000\022\006\053\013\032\014" +
    "\052\015\031\016\037\017\046\020\047\027\044\001\002" +
    "\000\024\006\053\013\032\014\052\015\031\016\037\017" +
    "\046\020\047\027\044\066\u0185\001\002\000\006\002\ufff3" +
    "\025\ufff3\001\002\000\012\065\ufff0\074\ufff0\075\ufff0\112" +
    "\ufff0\001\002\000\012\065\uffef\074\uffef\075\uffef\112\uffef" +
    "\001\002\000\012\065\ufff1\074\ufff1\075\ufff1\112\ufff1\001" +
    "\002\000\006\002\ufff5\025\ufff5\001\002\000\006\025\ufff8" +
    "\034\ufff8\001\002\000\004\002\001\001\002\000\010\024" +
    "\ufffb\025\ufffb\034\ufffb\001\002\000\004\075\u018e\001\002" +
    "\000\010\024\ufff9\025\ufff9\034\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u018c\000\012\002\006\010\004\013\005\055\007\001" +
    "\001\000\002\001\001\000\004\013\u018b\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\011\010\014\012\056" +
    "\011\001\001\000\004\014\u0189\001\001\000\006\012\020" +
    "\110\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\u0188\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\026\001\001\000\002\001\001\000\032\004" +
    "\037\006\041\016\044\017\053\022\032\023\040\024\035" +
    "\025\042\060\050\061\034\062\047\070\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\006\u0180\016\044\017\053\022\032\023\040" +
    "\024\035\025\042\060\050\061\034\062\047\070\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\u0158\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\063\055\064\056\001\001\000" +
    "\002\001\001\000\016\044\070\047\067\053\061\054\075" +
    "\106\177\111\062\001\001\000\004\064\060\001\001\000" +
    "\002\001\001\000\016\044\070\047\067\053\061\054\075" +
    "\106\101\111\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\044\070\047\067" +
    "\053\061\054\075\106\170\111\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\044\070" +
    "\047\067\053\061\054\075\106\161\111\062\001\001\000" +
    "\002\001\001\000\016\044\070\047\067\053\061\054\075" +
    "\106\160\111\062\001\001\000\002\001\001\000\012\050" +
    "\103\051\107\063\110\064\056\001\001\000\004\051\157" +
    "\001\001\000\022\044\070\045\115\046\116\047\067\053" +
    "\061\054\075\106\117\111\062\001\001\000\002\001\001" +
    "\000\004\111\113\001\001\000\002\001\001\000\004\064" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\044\070\047\067\053\061" +
    "\054\075\106\153\111\062\001\001\000\016\044\070\047" +
    "\067\053\061\054\075\106\152\111\062\001\001\000\016" +
    "\044\070\047\067\053\061\054\075\106\151\111\062\001" +
    "\001\000\016\044\070\047\067\053\061\054\075\106\150" +
    "\111\062\001\001\000\016\044\070\047\067\053\061\054" +
    "\075\106\147\111\062\001\001\000\016\044\070\047\067" +
    "\053\061\054\075\106\146\111\062\001\001\000\016\044" +
    "\070\047\067\053\061\054\075\106\145\111\062\001\001" +
    "\000\016\044\070\047\067\053\061\054\075\106\144\111" +
    "\062\001\001\000\016\044\070\047\067\053\061\054\075" +
    "\106\143\111\062\001\001\000\016\044\070\047\067\053" +
    "\061\054\075\106\142\111\062\001\001\000\016\044\070" +
    "\047\067\053\061\054\075\106\141\111\062\001\001\000" +
    "\016\044\070\047\067\053\061\054\075\106\140\111\062" +
    "\001\001\000\016\044\070\047\067\053\061\054\075\106" +
    "\137\111\062\001\001\000\016\044\070\047\067\053\061" +
    "\054\075\106\136\111\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\044\070\046\156\047\067\053\061\054\075\106\117" +
    "\111\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\050\164\051\107\001\001\000\022\044\070\045\166\046" +
    "\116\047\067\053\061\054\075\106\117\111\062\001\001" +
    "\000\004\051\157\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\044\070\045\175\046\116\047" +
    "\067\053\061\054\075\106\117\111\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\060\003\215\005\230\007\213\024\236" +
    "\025\042\026\233\031\214\032\220\033\221\034\223\035" +
    "\235\036\225\037\242\040\244\043\227\044\243\047\231" +
    "\052\217\053\240\054\210\060\224\061\034\062\047\001" +
    "\001\000\002\001\001\000\016\044\070\047\067\053\061" +
    "\054\075\106\u0104\111\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\050\103\051\107\063\055\064\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\044\070\047\067\053\061\054\075\106\366\111\062" +
    "\001\001\000\002\001\001\000\056\003\302\007\213\024" +
    "\236\025\042\026\233\031\214\032\220\033\221\034\223" +
    "\035\235\036\225\037\242\040\244\043\227\044\243\047" +
    "\231\052\217\053\240\054\210\060\224\061\034\062\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\107" +
    "\251\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\044\070\047\067\053\061\054\075\065\256\066\254\106" +
    "\257\111\062\001\001\000\002\001\001\000\022\044\070" +
    "\047\067\053\061\054\075\065\263\066\254\106\257\111" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\044\070\047\067\053\061\054\075\066\262\106\257\111" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\107\266\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\044\070\047\067\053\061\054\075\106\272\111\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\044\070\047\067\053\061\054\075\106\276\111" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\060" +
    "\003\215\005\301\007\213\024\236\025\042\026\233\031" +
    "\214\032\220\033\221\034\223\035\235\036\225\037\242" +
    "\040\244\043\227\044\243\047\231\052\217\053\240\054" +
    "\210\060\224\061\034\062\047\001\001\000\056\003\302" +
    "\007\213\024\236\025\042\026\233\031\214\032\220\033" +
    "\221\034\223\035\235\036\225\037\242\040\244\043\227" +
    "\044\243\047\231\052\217\053\240\054\210\060\224\061" +
    "\034\062\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\003\215\005\306\007\213\024" +
    "\236\025\042\026\233\031\214\032\220\033\221\034\223" +
    "\035\235\036\225\037\242\040\244\043\227\044\243\047" +
    "\231\052\217\053\240\054\210\060\224\061\034\062\047" +
    "\001\001\000\056\003\302\007\213\024\236\025\042\026" +
    "\233\031\214\032\220\033\221\034\223\035\235\036\225" +
    "\037\242\040\244\043\227\044\243\047\231\052\217\053" +
    "\240\054\210\060\224\061\034\062\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\044\070\047\067\053" +
    "\061\054\075\106\312\111\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\044\070\047\067\053\061\054\075" +
    "\106\320\111\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\026\326" +
    "\047\330\112\332\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\050\103\051\107\001\001\000\002\001\001" +
    "\000\004\023\354\001\001\000\002\001\001\000\016\044" +
    "\070\047\067\053\061\054\075\106\334\111\062\001\001" +
    "\000\002\001\001\000\012\026\340\047\330\054\336\057" +
    "\337\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\050\103\051\107\001\001\000\016\044" +
    "\070\047\067\053\061\054\075\106\344\111\062\001\001" +
    "\000\004\111\346\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\060\003\215" +
    "\005\351\007\213\024\236\025\042\026\233\031\214\032" +
    "\220\033\221\034\223\035\235\036\225\037\242\040\244" +
    "\043\227\044\243\047\231\052\217\053\240\054\210\060" +
    "\224\061\034\062\047\001\001\000\056\003\302\007\213" +
    "\024\236\025\042\026\233\031\214\032\220\033\221\034" +
    "\223\035\235\036\225\037\242\040\244\043\227\044\243" +
    "\047\231\052\217\053\240\054\210\060\224\061\034\062" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\044\070\047\067\053" +
    "\061\054\075\106\357\111\062\001\001\000\002\001\001" +
    "\000\016\044\070\047\067\053\061\054\075\106\361\111" +
    "\062\001\001\000\002\001\001\000\006\050\164\051\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\060\003\215\005" +
    "\374\007\213\024\236\025\042\026\233\031\214\032\220" +
    "\033\221\034\223\035\235\036\225\037\242\040\244\043" +
    "\227\044\243\047\231\052\217\053\240\054\210\060\224" +
    "\061\034\062\047\001\001\000\056\003\302\007\213\024" +
    "\236\025\042\026\233\031\214\032\220\033\221\034\223" +
    "\035\235\036\225\037\242\040\244\043\227\044\243\047" +
    "\231\052\217\053\240\054\210\060\224\061\034\062\047" +
    "\001\001\000\002\001\001\000\016\044\070\047\067\053" +
    "\061\054\075\106\377\111\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\003\215\005\u0102\007\213\024" +
    "\236\025\042\026\233\031\214\032\220\033\221\034\223" +
    "\035\235\036\225\037\242\040\244\043\227\044\243\047" +
    "\231\052\217\053\240\054\210\060\224\061\034\062\047" +
    "\001\001\000\056\003\302\007\213\024\236\025\042\026" +
    "\233\031\214\032\220\033\221\034\223\035\235\036\225" +
    "\037\242\040\244\043\227\044\243\047\231\052\217\053" +
    "\240\054\210\060\224\061\034\062\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\041\u0109\042\u0106\001" +
    "\001\000\002\001\001\000\060\003\215\005\u010f\007\213" +
    "\024\236\025\042\026\233\031\214\032\220\033\221\034" +
    "\223\035\235\036\225\037\242\040\244\043\227\044\243" +
    "\047\231\052\217\053\240\054\210\060\224\061\034\062" +
    "\047\001\001\000\016\044\070\047\067\053\061\054\075" +
    "\106\u010c\111\062\001\001\000\004\042\u010a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\060" +
    "\003\215\005\u010e\007\213\024\236\025\042\026\233\031" +
    "\214\032\220\033\221\034\223\035\235\036\225\037\242" +
    "\040\244\043\227\044\243\047\231\052\217\053\240\054" +
    "\210\060\224\061\034\062\047\001\001\000\056\003\302" +
    "\007\213\024\236\025\042\026\233\031\214\032\220\033" +
    "\221\034\223\035\235\036\225\037\242\040\244\043\227" +
    "\044\243\047\231\052\217\053\240\054\210\060\224\061" +
    "\034\062\047\001\001\000\056\003\302\007\213\024\236" +
    "\025\042\026\233\031\214\032\220\033\221\034\223\035" +
    "\235\036\225\037\242\040\244\043\227\044\243\047\231" +
    "\052\217\053\240\054\210\060\224\061\034\062\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\073\u0113" +
    "\074\u0119\075\u0117\076\u0116\101\u011b\102\u011a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\073\u0113\074\u0119\075\u0117" +
    "\076\u0116\102\u0138\001\001\000\002\001\001\000\030\044" +
    "\070\047\067\053\061\054\075\071\u011e\077\u0123\100\u0124" +
    "\103\u0121\104\u0125\106\u0126\111\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\050\164\051\107\001\001\000\026\044\070\045\166\046" +
    "\116\047\067\053\061\054\075\071\u012a\072\u012b\106\117" +
    "\111\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\071\u012e\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\044\070\047\067\053\061\054\075\106\u0130\111" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\044\070\045\175\046" +
    "\116\047\067\053\061\054\075\071\u012a\072\u0135\106\117" +
    "\111\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\044\070\047\067" +
    "\053\061\054\075\071\u011e\103\u013a\106\u0126\111\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\044\070" +
    "\047\067\053\061\054\075\106\u013d\111\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\044\070\047\067" +
    "\053\061\054\075\071\u011e\103\u0140\106\u0126\111\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\044\070\047\067\053\061\054\075\071\u011e\103" +
    "\u0144\106\u0126\111\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\020\u014a\021\u014b\023" +
    "\u0149\001\001\000\004\015\u0154\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\021\u0152\023" +
    "\u0149\001\001\000\004\015\u014e\001\001\000\002\001\001" +
    "\000\060\003\215\005\u0150\007\213\024\236\025\042\026" +
    "\233\031\214\032\220\033\221\034\223\035\235\036\225" +
    "\037\242\040\244\043\227\044\243\047\231\052\217\053" +
    "\240\054\210\060\224\061\034\062\047\001\001\000\056" +
    "\003\302\007\213\024\236\025\042\026\233\031\214\032" +
    "\220\033\221\034\223\035\235\036\225\037\242\040\244" +
    "\043\227\044\243\047\231\052\217\053\240\054\210\060" +
    "\224\061\034\062\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\060\003" +
    "\215\005\u0156\007\213\024\236\025\042\026\233\031\214" +
    "\032\220\033\221\034\223\035\235\036\225\037\242\040" +
    "\244\043\227\044\243\047\231\052\217\053\240\054\210" +
    "\060\224\061\034\062\047\001\001\000\056\003\302\007" +
    "\213\024\236\025\042\026\233\031\214\032\220\033\221" +
    "\034\223\035\235\036\225\037\242\040\244\043\227\044" +
    "\243\047\231\052\217\053\240\054\210\060\224\061\034" +
    "\062\047\001\001\000\002\001\001\000\006\027\u015b\030" +
    "\u0159\001\001\000\002\001\001\000\010\015\u0161\063\u0160" +
    "\064\056\001\001\000\002\001\001\000\004\030\u015d\001" +
    "\001\000\002\001\001\000\004\015\u015f\001\001\000\002" +
    "\001\001\000\006\015\u0166\064\060\001\001\000\002\001" +
    "\001\000\016\044\070\047\067\053\061\054\075\106\u0164" +
    "\111\062\001\001\000\004\111\u0165\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\067\u016a" +
    "\105\u0168\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\044\070\047\067\053\061\054\075" +
    "\065\u016c\066\254\106\257\111\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\044\070" +
    "\047\067\053\061\054\075\065\u0170\066\254\106\257\111" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\020\u0175\021\u014b\023\u0149\001\001\000" +
    "\004\015\u017b\001\001\000\002\001\001\000\004\015\u0177" +
    "\001\001\000\002\001\001\000\060\003\215\005\u0179\007" +
    "\213\024\236\025\042\026\233\031\214\032\220\033\221" +
    "\034\223\035\235\036\225\037\242\040\244\043\227\044" +
    "\243\047\231\052\217\053\240\054\210\060\224\061\034" +
    "\062\047\001\001\000\056\003\302\007\213\024\236\025" +
    "\042\026\233\031\214\032\220\033\221\034\223\035\235" +
    "\036\225\037\242\040\244\043\227\044\243\047\231\052" +
    "\217\053\240\054\210\060\224\061\034\062\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\060\003\215\005" +
    "\u017d\007\213\024\236\025\042\026\233\031\214\032\220" +
    "\033\221\034\223\035\235\036\225\037\242\040\244\043" +
    "\227\044\243\047\231\052\217\053\240\054\210\060\224" +
    "\061\034\062\047\001\001\000\056\003\302\007\213\024" +
    "\236\025\042\026\233\031\214\032\220\033\221\034\223" +
    "\035\235\036\225\037\242\040\244\043\227\044\243\047" +
    "\231\052\217\053\240\054\210\060\224\061\034\062\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\004\u0183\006\041\016\044" +
    "\017\053\022\032\023\040\024\035\025\042\060\050\061" +
    "\034\062\047\070\033\001\001\000\030\006\u0180\016\044" +
    "\017\053\022\032\023\040\024\035\025\042\060\050\061" +
    "\034\062\047\070\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintacticoGraphik$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintacticoGraphik$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintacticoGraphik$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Errores err = Errores.getInstance();

    public void syntax_error(Symbol token) {
        err.nuevoErrorSintactico((token.left+1),(token.right+1), "Se esperaba "+token.value);
        System.out.println("Error sintactico: linea "+ (token.left+1)+" columna: "+(token.right+1)+" Lexema: "+token.value);

    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        err.nuevoErrorSintactico((s.left+1),(s.right+1), "Se esperaba "+s.value);
        System.out.println("Error sintactico: linea "+ s.left+" columna: "+s.right+" Lexema: "+s.value);

    }  

    public NodoGK nodo;

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$sintacticoGraphik$actions {


    

  private final sintacticoGraphik parser;

  /** Constructor */
  CUP$sintacticoGraphik$actions(sintacticoGraphik parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$sintacticoGraphik$do_action(
    int                        CUP$sintacticoGraphik$act_num,
    java_cup.runtime.lr_parser CUP$sintacticoGraphik$parser,
    java.util.Stack            CUP$sintacticoGraphik$stack,
    int                        CUP$sintacticoGraphik$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintacticoGraphik$result;

      /* select the action based on the action number */
      switch (CUP$sintacticoGraphik$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // AUMENTO ::= identificador decremento 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    NodoGK nodo = new NodoGK("decremento");
                    nodo.hijos.add(new NodoGK(id, idleft, idright)); 
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("AUMENTO",42, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // AUMENTO ::= identificador aumento 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    NodoGK nodo = new NodoGK("aumento");
                    nodo.hijos.add(new NodoGK(id, idleft, idright)); 
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("AUMENTO",42, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // EXPRESION ::= ACCESO_MET 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // EXPRESION ::= ACCESOBJ 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // EXPRESION ::= AUMENTO 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // EXPRESION ::= LLAMADA_HK 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // EXPRESION ::= LLAMADA_MET 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // EXPRESION ::= par_izq EXPRESION par_der 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // EXPRESION ::= menos EXPRESION 
            {
              NodoGK RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("menos");
                    nodo.hijos.add(expr);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // EXPRESION ::= caracter 
            {
              NodoGK RESULT =null;
		int caracleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int caracright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String carac = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("caracter");
                    nodo.hijos.add(new NodoGK(carac));
                    RESULT=nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // EXPRESION ::= tkn_falso 
            {
              NodoGK RESULT =null;
		int falsoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int falsoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String falso = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("bool");
                    nodo.hijos.add(new NodoGK(falso, falsoleft, falsoright));
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // EXPRESION ::= tkn_verdadero 
            {
              NodoGK RESULT =null;
		int verdaderoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int verdaderoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String verdadero = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("bool");
                    nodo.hijos.add(new NodoGK(verdadero, verdaderoleft, verdaderoright));
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // EXPRESION ::= decimal 
            {
              NodoGK RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("decimal");
                    nodo.hijos.add(new NodoGK(dec, decleft, decright));
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // EXPRESION ::= identificador LST_DIM 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int dimsleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int dimsright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK dims = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("arreglo");
                    nodo.hijos.add(new NodoGK(id, idleft, idright));
                    nodo.hijos.add(dims);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // EXPRESION ::= identificador 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("identificador");
                    nodo.hijos.add(new NodoGK(id, idleft, idright));
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // EXPRESION ::= texto 
            {
              NodoGK RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("cadena");
                    nodo.hijos.add(new NodoGK(cadena, cadenaleft, cadenaright));
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // EXPRESION ::= numero 
            {
              NodoGK RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String entero = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("entero");
                    nodo.hijos.add(new NodoGK(entero, enteroleft, enteroright));
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // EXPRESION ::= EXPRESION potencia EXPRESION 
            {
              NodoGK RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr1 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr2 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("pot");
                    nodo.hijos.add(expr1);
                    nodo.hijos.add(expr2);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // EXPRESION ::= EXPRESION div EXPRESION 
            {
              NodoGK RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr1 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr2 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("div");
                    nodo.hijos.add(expr1);
                    nodo.hijos.add(expr2);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // EXPRESION ::= EXPRESION por EXPRESION 
            {
              NodoGK RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr1 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr2 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("por");
                    nodo.hijos.add(expr1);
                    nodo.hijos.add(expr2);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // EXPRESION ::= EXPRESION menos EXPRESION 
            {
              NodoGK RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr1 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr2 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("menos");
                    nodo.hijos.add(expr1);
                    nodo.hijos.add(expr2);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // EXPRESION ::= EXPRESION mas EXPRESION 
            {
              NodoGK RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr1 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr2 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("mas");
                    nodo.hijos.add(expr1);
                    nodo.hijos.add(expr2);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // EXPRESION ::= EXPRESION mayor_igual EXPRESION 
            {
              NodoGK RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr1 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr2 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("mayorI");
                    nodo.hijos.add(expr1);
                    nodo.hijos.add(expr2);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // EXPRESION ::= EXPRESION menor_igual EXPRESION 
            {
              NodoGK RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr1 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr2 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("menorI");
                    nodo.hijos.add(expr1);
                    nodo.hijos.add(expr2);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // EXPRESION ::= EXPRESION mayor EXPRESION 
            {
              NodoGK RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr1 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr2 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("mayor");
                    nodo.hijos.add(expr1);
                    nodo.hijos.add(expr2);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // EXPRESION ::= EXPRESION menor EXPRESION 
            {
              NodoGK RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr1 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr2 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("menor");
                    nodo.hijos.add(expr1);
                    nodo.hijos.add(expr2);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // EXPRESION ::= EXPRESION diferente EXPRESION 
            {
              NodoGK RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr1 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr2 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("diferente");
                    nodo.hijos.add(expr1);
                    nodo.hijos.add(expr2);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // EXPRESION ::= EXPRESION igualacion EXPRESION 
            {
              NodoGK RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr1 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr2 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("igualacion");
                    nodo.hijos.add(expr1);
                    nodo.hijos.add(expr2);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // EXPRESION ::= tkn_not EXPRESION 
            {
              NodoGK RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr1 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("not");
                    nodo.hijos.add(expr1);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // EXPRESION ::= EXPRESION tkn_and EXPRESION 
            {
              NodoGK RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr1 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr2 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("and");
                    nodo.hijos.add(expr1);
                    nodo.hijos.add(expr2);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // EXPRESION ::= EXPRESION tkn_xor EXPRESION 
            {
              NodoGK RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr1 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr2 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("xor");
                    nodo.hijos.add(expr1);
                    nodo.hijos.add(expr2);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // EXPRESION ::= EXPRESION tkn_or EXPRESION 
            {
              NodoGK RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr1 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr2 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("or");
                    nodo.hijos.add(expr1);
                    nodo.hijos.add(expr2);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // DONDETODO ::= tkn_dondetodo par_izq EXP par_der int_der 
            {
              NodoGK RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK exp = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		
                    NodoGK nodo = new NodoGK("DONDETODO");
                    nodo.hijos.add(exp);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("DONDETODO",60, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // DONDECADA ::= tkn_dondecada par_izq EXP par_der int_der 
            {
              NodoGK RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK exp = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		
                    NodoGK nodo = new NodoGK("DONDECADA");
                    nodo.hijos.add(exp);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("DONDECADA",59, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // DONDE ::= tkn_donde par_izq EXP par_der igual EXPRESION int_der 
            {
              NodoGK RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).right;
		NodoGK exp = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK expr = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    NodoGK nodo = new NodoGK("DONDE");
                    nodo.hijos.add(exp);
                    nodo.hijos.add(expr);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("DONDE",58, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // LST_COLUMNA ::= COLUMNA 
            {
              NodoGK RESULT =null;
		int colleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int colright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK col = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                        NodoGK nodo = new NodoGK("COLUMNAS");
                        nodo.hijos.add(col);
                        RESULT = nodo;
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_COLUMNA",56, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // LST_COLUMNA ::= LST_COLUMNA coma COLUMNA 
            {
              NodoGK RESULT =null;
		int colsleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int colsright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK cols = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int colright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK col = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                        cols.hijos.add(col);
                        RESULT = cols;
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_COLUMNA",56, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // NORMAL ::= tkn_llamar identificador par_izq LST_COLUMNA par_der 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).value;
		int colsleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int colsright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK cols = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                NodoGK nodo = new NodoGK("LLAMADA_MET_DATOS");
                nodo.hijos.add(new NodoGK(id, idleft, idright));
                nodo.hijos.add(cols);
                RESULT = nodo;
                
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("NORMAL",62, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // HASKELL ::= tkn_llamarHK identificador par_izq LST_COLUMNA par_der 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).value;
		int colsleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int colsright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK cols = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                NodoGK nodo = new NodoGK("LLAMADA_HK_DATOS");
                nodo.hijos.add(new NodoGK(id, idleft, idright));
                nodo.hijos.add(cols);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("HASKELL",61, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // MET_ESPECIALES ::= EXP 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("MET_ESPECIALES",66, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // MET_ESPECIALES ::= NORMAL 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("MET_ESPECIALES",66, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // MET_ESPECIALES ::= HASKELL 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("MET_ESPECIALES",66, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // PROCESAR ::= tkn_procesar igual MET_ESPECIALES int_der 
            {
              NodoGK RESULT =null;
		int metleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK met = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    NodoGK nodo = new NodoGK("PROCESAR");
                    nodo.hijos.add(met);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("PROCESAR",57, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // EXP ::= COLUMNA 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXP",65, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // EXP ::= EXPRESION 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXP",65, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // COLUMNA ::= tkn_columna par_izq EXPRESION par_der int_der 
            {
              NodoGK RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		
                NodoGK nodo = new NodoGK("columna");
                nodo.hijos.add(expr);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("COLUMNA",55, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // SDATOS ::= DONDETODO 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SDATOS",64, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // SDATOS ::= DONDECADA 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SDATOS",64, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // SDATOS ::= DONDE 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SDATOS",64, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // SDATOS ::= PROCESAR 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SDATOS",64, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // SENT_DATOS ::= SDATOS 
            {
              NodoGK RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK dato = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("SENTENCIAS");
                    nodo.hijos.add(dato);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENT_DATOS",63, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // SENT_DATOS ::= SENT_DATOS SDATOS 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK dato = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    nodo.hijos.add(dato);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENT_DATOS",63, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // DATOS ::= tkn_vacio tkn_datos par_izq par_der llave_izq SENT_DATOS llave_der 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK sent = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                NodoGK nodo = new NodoGK("METODO");
                nodo.hijos.add(new NodoGK(id, idleft, idright));
                nodo.hijos.add(sent);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("DATOS",54, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // AARR ::= identificador LST_DIM igual EXPRESION 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).value;
		int dimsleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int dimsright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK dims = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                NodoGK nodo = new NodoGK("ASIGNA_ARR");
                nodo.hijos.add(new NodoGK(id, idleft, idright));
                nodo.hijos.add(dims);
                nodo.hijos.add(expr);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("AARR",48, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // DIMENSIONES ::= llave_izq LST_DIMENSIONES llave_der 
            {
              NodoGK RESULT =null;
		int dimsleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int dimsright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK dims = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		 RESULT = dims; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("DIMENSIONES",52, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // DIMENSIONES ::= EXPRESION 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("DIMENSIONES",52, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // LST_DIMENSIONES ::= DIMENSIONES 
            {
              NodoGK RESULT =null;
		int dimsleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int dimsright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK dims = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                            NodoGK nodo = new NodoGK("DIMENSIONES");
                            nodo.hijos.add(dims);
                            RESULT = nodo;
                        
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_DIMENSIONES",51, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // LST_DIMENSIONES ::= LST_DIMENSIONES coma DIMENSIONES 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int dimsleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int dimsright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK dims = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                            nodo.hijos.add(dims);
                            RESULT = nodo;
                        
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_DIMENSIONES",51, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // LST_DARR ::= llave_izq LST_DIMENSIONES llave_der 
            {
              NodoGK RESULT =null;
		int dimsleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int dimsright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK dims = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    NodoGK nodo = new NodoGK("LISTA");
                    nodo.hijos.add(dims);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_DARR",67, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // LST_DARR ::= LST_DARR coma llave_izq LST_DIMENSIONES llave_der 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).value;
		int dimsleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int dimsright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK dims = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    nodo.hijos.add(dims);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_DARR",67, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ASIGNA_ARR ::= LST_DARR 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIGNA_ARR",53, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ASIGNA_ARR ::= identificador 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                        NodoGK nodo = new NodoGK("identificador");
                        nodo.hijos.add(new NodoGK(id, idleft, idright));
                        RESULT = nodo;
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIGNA_ARR",53, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // DIM ::= cor_izq EXPRESION cor_der 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("DIM",50, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // LST_DIM ::= DIM 
            {
              NodoGK RESULT =null;
		int dimsleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int dimsright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK dims = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                NodoGK nodo = new NodoGK("DIMS");
                nodo.hijos.add(dims);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_DIM",49, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // LST_DIM ::= LST_DIM DIM 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int dimsleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int dimsright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK dims = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                nodo.hijos.add(dims);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_DIM",49, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // DARR ::= tkn_var TIPO identificador LST_DIM VISIBILIDAD igual ASIGNA_ARR 
            {
              NodoGK RESULT =null;
		int tpoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).left;
		int tporight = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).right;
		NodoGK tpo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).value;
		int dimsleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).left;
		int dimsright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).right;
		NodoGK dims = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).value;
		int visleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int visright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK vis = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int asgleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int asgright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK asg = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                NodoGK nodo = new NodoGK("DECLARA_ASIG_ARR");
                nodo.hijos.add(tpo);
                nodo.hijos.add(new NodoGK(id, idleft, idright));
                nodo.hijos.add(dims);
                nodo.hijos.add(vis);
                nodo.hijos.add(asg);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("DARR",47, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // DARR ::= tkn_var TIPO identificador LST_DIM VISIBILIDAD 
            {
              NodoGK RESULT =null;
		int tpoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).left;
		int tporight = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).right;
		NodoGK tpo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int dimsleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int dimsright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK dims = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int visleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int visright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK vis = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                NodoGK nodo = new NodoGK("DECLARA_ARR");
                nodo.hijos.add(tpo);
                nodo.hijos.add(new NodoGK(id, idleft, idright));
                nodo.hijos.add(dims);
                nodo.hijos.add(vis);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("DARR",47, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ARREGLOS ::= AARR 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ARREGLOS",46, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ARREGLOS ::= DARR 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ARREGLOS",46, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // IMPRIMIR ::= tkn_imprimirK par_izq EXPRESION par_der int_der 
            {
              NodoGK RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		
                    NodoGK nodo = new NodoGK("IMPRIMIR");
                    nodo.hijos.add(expr);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",5, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // IMPRIMIR ::= tkn_imprimir par_izq EXPRESION par_der int_der 
            {
              NodoGK RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		
                    NodoGK nodo = new NodoGK("IMPRIMIR");
                    nodo.hijos.add(expr);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",5, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ASIG_GRAFICAR ::= llave_izq LST_DIMENSIONES llave_der 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		 RESULT = nodo;
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIG_GRAFICAR",69, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ASIG_GRAFICAR ::= identificador 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                        NodoGK nodo = new NodoGK(id, idleft, idright);
                        RESULT = nodo;
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIG_GRAFICAR",69, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // GRAFICAR ::= tkn_graphikar par_izq ASIG_GRAFICAR coma ASIG_GRAFICAR par_der int_der 
            {
              NodoGK RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).right;
		NodoGK expr1 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr2 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		
                    NodoGK nodo = new NodoGK("GRAFICAR");
                    nodo.hijos.add(expr1);
                    nodo.hijos.add(expr2);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("GRAFICAR",40, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NIVEL ::= punto ACCESO_MET 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("NIVEL",39, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NIVEL ::= punto identificador 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 
                NodoGK nodo = new NodoGK(id, idleft, idright);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("NIVEL",39, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // LST_NIVEL ::= NIVEL 
            {
              NodoGK RESULT =null;
		int nivleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nivright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK niv = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("NIVELES");
                    nodo.hijos.add(niv);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_NIVEL",38, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // LST_NIVEL ::= LST_NIVEL NIVEL 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int nivleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nivright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK niv = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    nodo.hijos.add(niv);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_NIVEL",38, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ACCESOBJ ::= tkn_llamar identificador LST_NIVEL 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK lst = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("ACCESOBJ");
                    nodo.hijos.add(new NodoGK(id, idleft, idright));
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ACCESOBJ",37, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ACCESOBJ ::= identificador LST_NIVEL 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK lst = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("ACCESOBJ");
                    nodo.hijos.add(new NodoGK(id, idleft, idright));
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ACCESOBJ",37, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ACCESO_MET ::= identificador par_izq LST_PARAM par_der 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).value;
		int lstparleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int lstparright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK lstpar = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    NodoGK nodo = new NodoGK("LLAMAR_MET");
                    nodo.hijos.add(new NodoGK(id, idleft, idright));
                    nodo.hijos.add(lstpar);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ACCESO_MET",71, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ACCESO_MET ::= identificador par_izq par_der 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		
                    NodoGK nodo = new NodoGK("LLAMAR_MET");
                    nodo.hijos.add(new NodoGK(id, idleft, idright));
                    nodo.hijos.add(new NodoGK("sinparametros"));
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ACCESO_MET",71, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // PARAM ::= EXPRESION 
            {
              NodoGK RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		RESULT = expr;
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("PARAM",36, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LST_PARAM ::= PARAM 
            {
              NodoGK RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK par = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("PARAMETROS");
                    nodo.hijos.add(par);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_PARAM",35, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // LST_PARAM ::= LST_PARAM coma PARAM 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK par = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    nodo.hijos.add(par);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_PARAM",35, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // LLAMADA_HK ::= tkn_llamarHK identificador par_izq par_der 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		
                    NodoGK nodo = new NodoGK("LLAMARHK");
                    nodo.hijos.add(new NodoGK(id, idleft, idright));
                    nodo.hijos.add(new NodoGK("sinparametros"));
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLAMADA_HK",41, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // LLAMADA_HK ::= tkn_llamarHK identificador par_izq LST_PARAM par_der 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).value;
		int lstparleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int lstparright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK lstpar = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    NodoGK nodo = new NodoGK("LLAMARHK");
                    nodo.hijos.add(new NodoGK(id, idleft, idright));
                    nodo.hijos.add(lstpar);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLAMADA_HK",41, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // LLAMADA_MET ::= tkn_llamar identificador par_izq par_der 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		
                    NodoGK nodo = new NodoGK("LLAMAR_MET");
                    nodo.hijos.add(new NodoGK(id, idleft, idright));
                    nodo.hijos.add(new NodoGK("sinparametros"));
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLAMADA_MET",34, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // LLAMADA_MET ::= tkn_llamar identificador par_izq LST_PARAM par_der 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).value;
		int lstparleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int lstparright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK lstpar = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    NodoGK nodo = new NodoGK("LLAMAR_MET");
                    nodo.hijos.add(new NodoGK(id, idleft, idright));
                    nodo.hijos.add(lstpar);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLAMADA_MET",34, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // RETORNO ::= tkn_retornar int_der 
            {
              NodoGK RESULT =null;
		
                    NodoGK nodo = new NodoGK("RETORNO");
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("RETORNO",33, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // RETORNO ::= tkn_retornar EXPRESION int_der 
            {
              NodoGK RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK expr = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    NodoGK nodo = new NodoGK("RETORNO");
                    nodo.hijos.add(expr);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("RETORNO",33, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TERMINAR ::= tkn_terminar int_der 
            {
              NodoGK RESULT =null;
		
                    NodoGK nodo = new NodoGK("TERMINAR");   
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TERMINAR",29, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CONTINUAR ::= tkn_continuar int_der 
            {
              NodoGK RESULT =null;
		
                    NodoGK nodo = new NodoGK("CONTINUAR");   
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CONTINUAR",28, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // HACERMIENTRAS ::= tkn_hacer llave_izq LST_SENTENCIAS llave_der tkn_mientras par_izq EXPRESION par_der 
            {
              NodoGK RESULT =null;
		int lstsenleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).left;
		int lstsenright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).right;
		NodoGK lstsen = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK expr = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                        NodoGK nodo = new NodoGK("HACERMIENTRAS");
                        nodo.hijos.add(expr);
                        nodo.hijos.add(lstsen);
                        RESULT = nodo;
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("HACERMIENTRAS",26, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // MIENTRAS ::= tkn_mientras par_izq EXPRESION par_der llave_izq LST_SENTENCIAS llave_der 
            {
              NodoGK RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).right;
		NodoGK expr = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).value;
		int lstsenleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int lstsenright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK lstsen = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                        NodoGK nodo = new NodoGK("MIENTRAS");
                        nodo.hijos.add(expr);
                        nodo.hijos.add(lstsen);
                        RESULT = nodo;
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("MIENTRAS",25, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ACCION ::= ASIGNACION 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ACCION",45, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ACCION ::= AUMENTO 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ACCION",45, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ASIG_PARA ::= ASIGNACION 
            {
              NodoGK RESULT =null;
		int asgleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int asgright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK asg = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = asg; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIG_PARA",72, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ASIG_PARA ::= tkn_var TIPO identificador igual EXPRESION 
            {
              NodoGK RESULT =null;
		int tpoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).left;
		int tporight = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).right;
		NodoGK tpo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("DECLARA_ASIG_VAR");
                    nodo.hijos.add(tpo);
                    nodo.hijos.add(new NodoGK(id, idleft, idright));
                    nodo.hijos.add(new NodoGK("publico"));
                    nodo.hijos.add(expr);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIG_PARA",72, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // PARA ::= tkn_para par_izq ASIG_PARA dosp EXPRESION dosp ACCION par_der llave_izq LST_SENTENCIAS llave_der 
            {
              NodoGK RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-8)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-8)).right;
		NodoGK asig = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-8)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)).right;
		NodoGK exp = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)).value;
		int accleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).left;
		int accright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).right;
		NodoGK acc = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).value;
		int lstsenleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int lstsenright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK lstsen = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                NodoGK nodo = new NodoGK("PARA");
                nodo.hijos.add(asig);
                nodo.hijos.add(exp);
                nodo.hijos.add(acc);
                nodo.hijos.add(lstsen);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("PARA",30, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-10)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CASOS ::= tkn_defecto LST_SENTENCIAS 
            {
              NodoGK RESULT =null;
		int lstsenleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int lstsenright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK lstsen = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                NodoGK nodo = new NodoGK("DEFECTO");
                nodo.hijos.add(lstsen);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CASOS",32, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CASOS ::= tkn_caso EXPRESION dosp LST_SENTENCIAS 
            {
              NodoGK RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK exp = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int lstsenleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int lstsenright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK lstsen = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                NodoGK nodo = new NodoGK("CASE");
                nodo.hijos.add(exp);
                nodo.hijos.add(lstsen);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CASOS",32, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LST_CASOS ::= CASOS 
            {
              NodoGK RESULT =null;
		int casleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int casright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK cas = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("CASOS");
                    nodo.hijos.add(cas);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_CASOS",31, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // LST_CASOS ::= LST_CASOS CASOS 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int casleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int casright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK cas = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    nodo.hijos.add(cas);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_CASOS",31, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SELECCIONA ::= tkn_seleccion EXPRESION llave_izq LST_CASOS llave_der 
            {
              NodoGK RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).right;
		NodoGK expr = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK lst = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    NodoGK nodo = new NodoGK("SELECCIONA");
                    nodo.hijos.add(expr);
                    nodo.hijos.add(lst);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SELECCIONA",27, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SINO ::= SI tkn_sino llave_izq LST_SENTENCIAS llave_der 
            {
              NodoGK RESULT =null;
		int nsileft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).left;
		int nsiright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).right;
		NodoGK nsi = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK lst = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                NodoGK nodo = new NodoGK("SINO");
                nodo.hijos.add(nsi);
                nodo.hijos.add(lst);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SINO",24, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SI ::= tkn_si par_izq EXPRESION par_der llave_izq LST_SENTENCIAS llave_der 
            {
              NodoGK RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).right;
		NodoGK expr = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK lst = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                NodoGK nodo = new NodoGK("SI");
                nodo.hijos.add(expr);
                nodo.hijos.add(lst);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SI",23, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // VAR ::= identificador VISIBILIDAD 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int visleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int visright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK vis = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                NodoGK nodo = new NodoGK("VAR");
                nodo.hijos.add(new NodoGK(id, idleft, idright));
                nodo.hijos.add(vis);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VAR",22, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LST_VARIABLES ::= VAR 
            {
              NodoGK RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK vars = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                        NodoGK nodo = new NodoGK("VARIABLES");
                        nodo.hijos.add(vars);
                        RESULT = nodo;
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_VARIABLES",21, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LST_VARIABLES ::= LST_VARIABLES coma VAR 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK vars = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                        nodo.hijos.add(vars);
                        RESULT = nodo;
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_VARIABLES",21, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ASIGNACION ::= ACCESOBJ igual EXPRESION 
            {
              NodoGK RESULT =null;
		int accleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int accright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK acc = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK exp = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                        NodoGK nodo = new NodoGK("ASIG_ACCESOBJ");
                        nodo.hijos.add(acc);
                        nodo.hijos.add(exp);
                        RESULT = nodo;
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIGNACION",20, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ASIGNACION ::= identificador igual tkn_nuevo ACCESO_MET 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).value;
		int asgleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int asgright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK asg = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                        NodoGK nodo = new NodoGK("ASIG_OBJ");
                        nodo.hijos.add(new NodoGK(id, idleft, idright));
                        nodo.hijos.add(asg);
                        RESULT = nodo;
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIGNACION",20, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ASIGNACION ::= identificador igual EXPRESION 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                        NodoGK nodo = new NodoGK("ASIGNACION");
                        nodo.hijos.add(new NodoGK(id, idleft, idright));
                        nodo.hijos.add(expr);
                        RESULT = nodo;
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIGNACION",20, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VARIABLES ::= tkn_var TIPO identificador VISIBILIDAD igual tkn_nuevo ACCESO_MET 
            {
              NodoGK RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).right;
		NodoGK tip = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).value;
		int visleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).left;
		int visright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).right;
		NodoGK vis = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).value;
		int asgleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int asgright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK asg = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                        NodoGK nodo = new NodoGK("DECLARA_ASIG_OBJ");
                        nodo.hijos.add(tip);
                        nodo.hijos.add(new NodoGK(id, idleft, idright));
                        nodo.hijos.add(vis);
                        nodo.hijos.add(asg);
                        RESULT = nodo;
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VARIABLES",19, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VARIABLES ::= tkn_var TIPO identificador VISIBILIDAD igual EXPRESION 
            {
              NodoGK RESULT =null;
		int tpoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).left;
		int tporight = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).right;
		NodoGK tpo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).value;
		int visleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int visright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK vis = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                        NodoGK nodo = new NodoGK("DECLARA_ASIG_VAR");
                        nodo.hijos.add(tpo);
                        nodo.hijos.add(new NodoGK(id, idleft, idright));
                        nodo.hijos.add(vis);
                        nodo.hijos.add(expr);
                        RESULT = nodo;
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VARIABLES",19, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VARIABLES ::= tkn_var TIPO LST_VARIABLES 
            {
              NodoGK RESULT =null;
		int tpoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int tporight = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK tpo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK lst = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                        NodoGK nodo = new NodoGK("DECLARA_VAR");
                        nodo.hijos.add(tpo);
                        nodo.hijos.add(lst);
                        RESULT = nodo;
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VARIABLES",19, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION ::= VARIABLES 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("DECLARACION",18, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTENCIAS ::= ACCESOBJ int_der 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIAS ::= ARREGLOS int_der 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTENCIAS ::= ASIGNACION int_der 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTENCIAS ::= DECLARACION int_der 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIAS ::= AUMENTO 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIAS ::= IMPRIMIR 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIAS ::= GRAFICAR 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIAS ::= LLAMADA_HK int_der 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIAS ::= LLAMADA_MET int_der 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIAS ::= RETORNO 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIAS ::= TERMINAR 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIAS ::= CONTINUAR 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIAS ::= HACERMIENTRAS 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIAS ::= MIENTRAS 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIAS ::= PARA 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIAS ::= SELECCIONA 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIAS ::= SINO 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIAS ::= SI 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LST_SENTENCIAS ::= SENTENCIAS 
            {
              NodoGK RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK sent = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                            NodoGK nodo = new NodoGK("SENTENCIAS");
                            nodo.hijos.add(sent);
                            RESULT = nodo;
                        
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_SENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LST_SENTENCIAS ::= LST_SENTENCIAS SENTENCIAS 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK sent = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                            nodo.hijos.add(sent);
                            RESULT = nodo;
                        
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_SENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPO ::= identificador 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                NodoGK nodo = new NodoGK(id, idleft, idright);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TIPO",17, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPO ::= tkn_bool 
            {
              NodoGK RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String bool = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                NodoGK nodo = new NodoGK(bool, boolleft, boolright);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TIPO",17, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TIPO ::= tkn_entero 
            {
              NodoGK RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String ent = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                NodoGK nodo = new NodoGK(ent, entleft, entright);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TIPO",17, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIPO ::= tkn_decimal 
            {
              NodoGK RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                NodoGK nodo = new NodoGK(dec, decleft, decright);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TIPO",17, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIPO ::= tkn_caracter 
            {
              NodoGK RESULT =null;
		int carleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int carright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String car = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                NodoGK nodo = new NodoGK(car, carleft, carright);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TIPO",17, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIPO ::= tkn_cadena 
            {
              NodoGK RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                NodoGK nodo = new NodoGK(cad, cadleft, cadright);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TIPO",17, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // MET_INICIO ::= tkn_vacio tkn_inicio par_izq par_der llave_izq LST_SENTENCIAS llave_der 
            {
              NodoGK RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK lst = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    NodoGK nodo = new NodoGK("MAIN");
                    nodo.hijos.add(lst);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("MET_INICIO",16, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PARAMETRO ::= TIPO identificador 
            {
              NodoGK RESULT =null;
		int tpoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int tporight = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK tpo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("PAR");
                    nodo.hijos.add(tpo);
                    nodo.hijos.add(new NodoGK(id, idleft, idright));
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("PARAMETRO",15, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LST_PARAMETROS ::= PARAMETRO 
            {
              NodoGK RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK par = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                            NodoGK nodo = new NodoGK("PARAMETROS");
                            nodo.hijos.add(par);
                            RESULT = nodo;
                        
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_PARAMETROS",14, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LST_PARAMETROS ::= LST_PARAMETROS coma PARAMETRO 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK par = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                            nodo.hijos.add(par);
                            RESULT = nodo;
                        
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_PARAMETROS",14, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FUNCION ::= TIPO identificador par_izq par_der VISIBILIDAD llave_izq LST_SENTENCIAS llave_der 
            {
              NodoGK RESULT =null;
		int tpoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-7)).left;
		int tporight = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-7)).right;
		NodoGK tpo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)).value;
		int visleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).left;
		int visright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).right;
		NodoGK vis = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK lst = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    NodoGK nodo = new NodoGK("FUNCION");
                    nodo.hijos.add(tpo);
                    nodo.hijos.add(new NodoGK(id, idleft, idright));
                    nodo.hijos.add(new NodoGK("sinparametros"));
                    nodo.hijos.add(vis);
                    nodo.hijos.add(lst);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("FUNCION",13, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FUNCION ::= TIPO identificador par_izq LST_PARAMETROS par_der VISIBILIDAD llave_izq LST_SENTENCIAS llave_der 
            {
              NodoGK RESULT =null;
		int tpoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-8)).left;
		int tporight = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-8)).right;
		NodoGK tpo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-7)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).right;
		NodoGK par = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).value;
		int visleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).left;
		int visright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).right;
		NodoGK vis = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK lst = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    NodoGK nodo = new NodoGK("FUNCION");
                    nodo.hijos.add(tpo);
                    nodo.hijos.add(new NodoGK(id, idleft, idright));
                    nodo.hijos.add(par);
                    nodo.hijos.add(vis);
                    nodo.hijos.add(lst);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("FUNCION",13, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-8)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // METODO ::= tkn_vacio identificador par_izq par_der VISIBILIDAD llave_izq LST_SENTENCIAS llave_der 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)).value;
		int visleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).left;
		int visright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).right;
		NodoGK vis = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK lst = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    NodoGK nodo = new NodoGK("METODO");
                    nodo.hijos.add(new NodoGK(id, idleft, idright));
                    nodo.hijos.add(new NodoGK("sinparametros"));
                    nodo.hijos.add(vis);
                    nodo.hijos.add(lst);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("METODO",12, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // METODO ::= tkn_vacio identificador par_izq LST_PARAMETROS par_der VISIBILIDAD llave_izq LST_SENTENCIAS llave_der 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-7)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).right;
		NodoGK par = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).value;
		int visleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).left;
		int visright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).right;
		NodoGK vis = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK lst = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    NodoGK nodo = new NodoGK("METODO");
                    nodo.hijos.add(new NodoGK(id, idleft, idright));
                    nodo.hijos.add(par);
                    nodo.hijos.add(vis);
                    nodo.hijos.add(lst);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("METODO",12, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-8)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTS ::= ARREGLOS int_der 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTS",4, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTS ::= DECLARACION int_der 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTS",4, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTS ::= DATOS 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTS",4, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTS ::= MET_INICIO 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTS",4, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTS ::= FUNCION 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTS",4, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTS ::= METODO 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTS",4, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LST_SEN ::= SENTS 
            {
              NodoGK RESULT =null;
		int senleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int senright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK sen = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("CUERPO");
                    nodo.hijos.add(sen);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_SEN",2, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LST_SEN ::= LST_SEN SENTS 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int senleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int senright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK sen = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    nodo.hijos.add(sen);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_SEN",2, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VISIBILIDAD ::= 
            {
              NodoGK RESULT =null;
		
                        NodoGK nodo = new NodoGK("publico");
                        RESULT = nodo; 
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",11, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VISIBILIDAD ::= dosp tkn_protegido 
            {
              NodoGK RESULT =null;
		int proleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int proright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String pro = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                        NodoGK nodo = new NodoGK(pro, proleft, proright);
                        RESULT = nodo; 
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",11, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VISIBILIDAD ::= dosp tkn_privado 
            {
              NodoGK RESULT =null;
		int prileft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int priright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String pri = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                        NodoGK nodo = new NodoGK(pri, prileft, priright);
                        RESULT = nodo; 
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",11, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VISIBILIDAD ::= dosp tkn_publico 
            {
              NodoGK RESULT =null;
		int publeft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int pubright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String pub = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                        NodoGK nodo = new NodoGK(pub, publeft, pubright);
                        RESULT = nodo; 
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",11, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CUERPO ::= tkn_als identificador tkn_hereda identificador VISIBILIDAD llave_izq LST_SEN llave_der 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).value;
		int visleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).left;
		int visright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).right;
		NodoGK vis = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK lst = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                NodoGK nodo = new NodoGK("ALS");
                nodo.hijos.add(new NodoGK(id, idleft, idright));
                nodo.hijos.add(new NodoGK(id2, id2left, id2right));
                nodo.hijos.add(vis);
                nodo.hijos.add(lst);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",8, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CUERPO ::= tkn_als identificador VISIBILIDAD llave_izq LST_SEN llave_der 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).value;
		int visleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).left;
		int visright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).right;
		NodoGK vis = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK lst = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                NodoGK nodo = new NodoGK("ALS");
                nodo.hijos.add(new NodoGK(id, idleft, idright));
                nodo.hijos.add(vis);
                nodo.hijos.add(lst);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",8, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LST_CUERPO ::= CUERPO 
            {
              NodoGK RESULT =null;
		int culeft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int curight = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK cu = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("CLASES");
                    nodo.hijos.add(cu);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_CUERPO",70, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LST_CUERPO ::= LST_CUERPO CUERPO 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int culeft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int curight = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK cu = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    nodo.hijos.add(cu);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_CUERPO",70, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LLAMADAS ::= tkn_incluirHK identificador int_der 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    NodoGK nodo = new NodoGK(id, idleft, idright);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLAMADAS",10, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LLAMADASHK ::= LLAMADAS 
            {
              NodoGK RESULT =null;
		int llamadaleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int llamadaright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK llamada = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("LLAMADASHK");
                    nodo.hijos.add(llamada);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLAMADASHK",7, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LLAMADASHK ::= LLAMADASHK LLAMADAS 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int llamadaleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int llamadaright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK llamada = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    nodo.hijos.add(llamada);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLAMADASHK",7, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IMPORTAR ::= tkn_importar nombreArchivo int_der 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    NodoGK nodo = new NodoGK(id, idleft, idright);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("IMPORTAR",9, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LST_IMPORTAR ::= IMPORTAR 
            {
              NodoGK RESULT =null;
		int impleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int impright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK imp = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                        NodoGK nodo = new NodoGK("IMPORTS");
                        nodo.hijos.add(imp);
                        RESULT = nodo;
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_IMPORTAR",6, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LST_IMPORTAR ::= LST_IMPORTAR IMPORTAR 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int impleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int impright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK imp = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                        nodo.hijos.add(imp);
                        RESULT = nodo; 
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_IMPORTAR",6, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LLAMARHK ::= 
            {
              NodoGK RESULT =null;
		
                    NodoGK nodo = new NodoGK("LLAMADASHK");
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLAMARHK",44, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LLAMARHK ::= LLAMADASHK 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo;
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLAMARHK",44, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IMPORTS ::= 
            {
              NodoGK RESULT =null;
		
                    NodoGK nodo = new NodoGK("IMPORTS");
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("IMPORTS",43, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // IMPORTS ::= LST_IMPORTAR 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo;
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("IMPORTS",43, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= IMPORTS LLAMARHK LST_CUERPO 
            {
              NodoGK RESULT =null;
		int impleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int impright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK imp = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int llamleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int llamright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK llam = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int cueleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int cueright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK cue = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("GRAPHIK");
                    nodo.hijos.add(imp);
                    nodo.hijos.add(llam);
                    nodo.hijos.add(cue);
                    parser.nodo=nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK start_val = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		RESULT = start_val;
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintacticoGraphik$parser.done_parsing();
          return CUP$sintacticoGraphik$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

