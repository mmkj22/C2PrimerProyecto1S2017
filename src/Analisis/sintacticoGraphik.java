
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 06 14:55:35 CST 2017
//----------------------------------------------------

package Analisis;

import java_cup.runtime.*;
import java.io.*;
import Graphik.*;
import Errores.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 06 14:55:35 CST 2017
  */
public class sintacticoGraphik extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public sintacticoGraphik() {super();}

  /** Constructor which sets the default scanner. */
  public sintacticoGraphik(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintacticoGraphik(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\246\000\002\002\004\000\002\002\005\000\002\055" +
    "\003\000\002\055\002\000\002\056\003\000\002\056\002" +
    "\000\002\010\004\000\002\010\003\000\002\013\005\000" +
    "\002\011\004\000\002\011\003\000\002\014\005\000\002" +
    "\110\004\000\002\110\003\000\002\012\010\000\002\012" +
    "\012\000\002\015\004\000\002\015\004\000\002\015\004" +
    "\000\002\015\002\000\002\004\004\000\002\004\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\016\013\000\002\016\012\000\002\017" +
    "\013\000\002\017\012\000\002\020\004\000\002\020\003" +
    "\000\002\021\004\000\002\022\011\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\005\004\000\002\005" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\004\000\002\003\004\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\024\003\000\002\025\005\000" +
    "\002\025\010\000\002\025\012\000\002\026\005\000\002" +
    "\027\005\000\002\027\003\000\002\030\004\000\002\031" +
    "\011\000\002\032\007\000\002\035\007\000\002\041\004" +
    "\000\002\041\003\000\002\042\006\000\002\042\004\000" +
    "\002\040\015\000\002\057\003\000\002\057\003\000\002" +
    "\033\011\000\002\034\012\000\002\036\004\000\002\037" +
    "\004\000\002\043\005\000\002\043\004\000\002\044\007" +
    "\000\002\044\006\000\002\053\007\000\002\053\006\000" +
    "\002\045\005\000\002\045\003\000\002\046\003\000\002" +
    "\047\004\000\002\050\004\000\002\050\003\000\002\051" +
    "\004\000\002\051\004\000\002\052\011\000\002\107\003" +
    "\000\002\107\005\000\002\007\007\000\002\060\003\000" +
    "\002\060\003\000\002\061\007\000\002\061\011\000\002" +
    "\063\004\000\002\063\003\000\002\064\005\000\002\067" +
    "\003\000\002\067\003\000\002\105\007\000\002\105\005" +
    "\000\002\065\005\000\002\065\003\000\002\066\003\000" +
    "\002\066\005\000\002\062\006\000\002\070\011\000\002" +
    "\101\004\000\002\101\003\000\002\102\003\000\002\102" +
    "\003\000\002\102\003\000\002\102\003\000\002\071\007" +
    "\000\002\103\003\000\002\103\003\000\002\073\006\000" +
    "\002\104\003\000\002\104\003\000\002\077\007\000\002" +
    "\100\007\000\002\072\005\000\002\072\003\000\002\074" +
    "\011\000\002\075\007\000\002\076\007\000\002\106\005" +
    "\000\002\106\005\000\002\106\005\000\002\106\004\000" +
    "\002\106\005\000\002\106\005\000\002\106\005\000\002" +
    "\106\005\000\002\106\005\000\002\106\005\000\002\106" +
    "\005\000\002\106\005\000\002\106\005\000\002\106\005" +
    "\000\002\106\005\000\002\106\003\000\002\106\003\000" +
    "\002\106\003\000\002\106\004\000\002\106\003\000\002" +
    "\106\003\000\002\106\003\000\002\106\003\000\002\106" +
    "\004\000\002\106\005\000\002\106\003\000\002\106\003" +
    "\000\002\106\003\000\002\106\003\000\002\054\004\000" +
    "\002\054\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u016b\000\010\024\004\025\ufffe\034\ufffe\001\002\000" +
    "\004\114\u016c\001\002\000\010\024\004\025\uffff\034\uffff" +
    "\001\002\000\010\024\ufffa\025\ufffa\034\ufffa\001\002\000" +
    "\004\002\u016a\001\002\000\006\025\ufffc\034\014\001\002" +
    "\000\006\025\ufffd\034\014\001\002\000\004\025\020\001" +
    "\002\000\006\025\ufff7\034\ufff7\001\002\000\004\006\015" +
    "\001\002\000\004\074\016\001\002\000\006\025\ufff6\034" +
    "\ufff6\001\002\000\006\002\000\025\020\001\002\000\004" +
    "\006\022\001\002\000\006\002\ufff4\025\ufff4\001\002\000" +
    "\010\026\025\064\uffee\112\023\001\002\000\010\021\u0167" +
    "\022\u0165\023\u0166\001\002\000\004\064\u0162\001\002\000" +
    "\004\006\026\001\002\000\006\064\uffee\112\023\001\002" +
    "\000\004\064\030\001\002\000\020\006\046\013\036\014" +
    "\037\015\041\016\031\017\043\020\034\001\002\000\004" +
    "\006\uffdf\001\002\000\022\006\046\013\036\014\037\015" +
    "\041\016\031\017\043\020\034\065\u0160\001\002\000\022" +
    "\006\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020" +
    "\uffe9\065\uffe9\001\002\000\010\006\u0117\033\u0118\051\u0116" +
    "\001\002\000\022\006\uffe8\013\uffe8\014\uffe8\015\uffe8\016" +
    "\uffe8\017\uffe8\020\uffe8\065\uffe8\001\002\000\004\006\uffdc" +
    "\001\002\000\004\006\uffdd\001\002\000\004\006\047\001" +
    "\002\000\004\006\uffde\001\002\000\022\006\uffeb\013\uffeb" +
    "\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\065\uffeb\001" +
    "\002\000\004\006\uffdb\001\002\000\022\006\uffea\013\uffea" +
    "\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea\065\uffea\001" +
    "\002\000\022\006\uffec\013\uffec\014\uffec\015\uffec\016\uffec" +
    "\017\uffec\020\uffec\065\uffec\001\002\000\004\006\uffda\001" +
    "\002\000\004\060\050\001\002\000\020\006\046\013\036" +
    "\014\037\015\041\016\031\017\043\061\051\001\002\000" +
    "\006\064\uffee\112\023\001\002\000\004\006\u0111\001\002" +
    "\000\020\006\046\013\036\014\037\015\041\016\031\017" +
    "\043\061\055\001\002\000\020\006\uffe2\013\uffe2\014\uffe2" +
    "\015\uffe2\016\uffe2\017\uffe2\061\uffe2\001\002\000\006\064" +
    "\uffee\112\023\001\002\000\020\006\uffe3\013\uffe3\014\uffe3" +
    "\015\uffe3\016\uffe3\017\uffe3\061\uffe3\001\002\000\004\064" +
    "\060\001\002\000\036\006\070\027\122\031\100\032\063" +
    "\035\117\036\064\040\062\043\104\044\123\045\115\046" +
    "\112\047\074\050\124\057\106\001\002\000\044\006\uffca" +
    "\027\uffca\031\uffca\032\uffca\035\uffca\036\uffca\040\uffca\041" +
    "\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca\047\uffca" +
    "\050\uffca\057\uffca\065\uffca\001\002\000\032\004\140\005" +
    "\133\006\152\007\134\010\144\011\147\012\135\032\063" +
    "\035\117\060\142\100\150\102\146\001\002\000\004\006" +
    "\u0100\001\002\000\004\060\372\001\002\000\044\006\uffcb" +
    "\027\uffcb\031\uffcb\032\uffcb\035\uffcb\036\uffcb\040\uffcb\041" +
    "\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb" +
    "\050\uffcb\057\uffcb\065\uffcb\001\002\000\046\006\uffd7\027" +
    "\uffd7\031\uffd7\032\uffd7\035\uffd7\036\uffd7\037\366\040\uffd7" +
    "\041\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\047" +
    "\uffd7\050\uffd7\057\uffd7\065\uffd7\001\002\000\044\006\uffd8" +
    "\027\uffd8\031\uffd8\032\uffd8\035\uffd8\036\uffd8\040\uffd8\041" +
    "\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8" +
    "\050\uffd8\057\uffd8\065\uffd8\001\002\000\012\062\156\107" +
    "\154\110\161\111\340\001\002\000\044\006\uffcc\027\uffcc" +
    "\031\uffcc\032\uffcc\035\uffcc\036\uffcc\040\uffcc\041\uffcc\042" +
    "\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc" +
    "\057\uffcc\065\uffcc\001\002\000\044\006\uffd6\027\uffd6\031" +
    "\uffd6\032\uffd6\035\uffd6\036\uffd6\040\uffd6\041\uffd6\042\uffd6" +
    "\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\057" +
    "\uffd6\065\uffd6\001\002\000\044\006\uffd3\027\uffd3\031\uffd3" +
    "\032\uffd3\035\uffd3\036\uffd3\040\uffd3\041\uffd3\042\uffd3\043" +
    "\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\057\uffd3" +
    "\065\uffd3\001\002\000\004\074\362\001\002\000\044\006" +
    "\uffd2\027\uffd2\031\uffd2\032\uffd2\035\uffd2\036\uffd2\040\uffd2" +
    "\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047" +
    "\uffd2\050\uffd2\057\uffd2\065\uffd2\001\002\000\004\074\361" +
    "\001\002\000\044\006\uffd1\027\uffd1\031\uffd1\032\uffd1\035" +
    "\uffd1\036\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1" +
    "\045\uffd1\046\uffd1\047\uffd1\050\uffd1\057\uffd1\065\uffd1\001" +
    "\002\000\034\004\140\005\133\006\152\007\134\010\144" +
    "\011\147\012\135\032\063\035\117\060\142\074\356\100" +
    "\150\102\146\001\002\000\044\006\uffcf\027\uffcf\031\uffcf" +
    "\032\uffcf\035\uffcf\036\uffcf\040\uffcf\041\uffcf\042\uffcf\043" +
    "\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\057\uffcf" +
    "\065\uffcf\001\002\000\040\006\070\027\122\031\100\032" +
    "\063\035\117\036\064\040\062\043\104\044\123\045\115" +
    "\046\112\047\074\050\124\057\106\065\355\001\002\000" +
    "\004\074\uff9d\001\002\000\004\060\335\001\002\000\004" +
    "\074\334\001\002\000\004\060\330\001\002\000\004\074" +
    "\327\001\002\000\044\006\uffd5\027\uffd5\031\uffd5\032\uffd5" +
    "\035\uffd5\036\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044" +
    "\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\057\uffd5\065\uffd5" +
    "\001\002\000\004\074\uffc6\001\002\000\004\074\326\001" +
    "\002\000\004\074\uff9e\001\002\000\004\074\325\001\002" +
    "\000\004\064\316\001\002\000\044\006\uffd0\027\uffd0\031" +
    "\uffd0\032\uffd0\035\uffd0\036\uffd0\040\uffd0\041\uffd0\042\uffd0" +
    "\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\057" +
    "\uffd0\065\uffd0\001\002\000\004\006\305\001\002\000\004" +
    "\074\304\001\002\000\044\006\uffd4\027\uffd4\031\uffd4\032" +
    "\uffd4\035\uffd4\036\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4" +
    "\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\057\uffd4\065" +
    "\uffd4\001\002\000\016\006\046\013\036\014\037\015\041" +
    "\016\031\017\043\001\002\000\004\060\242\001\002\000" +
    "\004\060\125\001\002\000\006\006\127\064\130\001\002" +
    "\000\004\073\236\001\002\000\006\061\uffa1\073\uffa1\001" +
    "\002\000\034\004\140\005\133\006\152\007\134\010\144" +
    "\011\147\012\135\032\063\035\117\060\142\064\141\100" +
    "\150\102\146\001\002\000\054\061\uff60\063\uff60\064\uff60" +
    "\065\uff60\066\uff60\067\uff60\070\uff60\071\uff60\072\uff60\073" +
    "\uff60\074\uff60\075\uff60\076\uff60\077\uff60\101\uff60\102\uff60" +
    "\103\uff60\104\uff60\105\uff60\106\uff60\112\uff60\001\002\000" +
    "\006\065\uff92\073\uff92\001\002\000\054\061\uff6a\063\uff6a" +
    "\064\uff6a\065\uff6a\066\uff6a\067\uff6a\070\uff6a\071\uff6a\072" +
    "\uff6a\073\uff6a\074\uff6a\075\uff6a\076\uff6a\077\uff6a\101\uff6a" +
    "\102\uff6a\103\uff6a\104\uff6a\105\uff6a\106\uff6a\112\uff6a\001" +
    "\002\000\054\061\uff67\063\uff67\064\uff67\065\uff67\066\uff67" +
    "\067\uff67\070\uff67\071\uff67\072\uff67\073\uff67\074\uff67\075" +
    "\uff67\076\uff67\077\uff67\101\uff67\102\uff67\103\uff67\104\uff67" +
    "\105\uff67\106\uff67\112\uff67\001\002\000\054\061\uff65\063" +
    "\uff65\064\uff65\065\uff65\066\uff65\067\uff65\070\uff65\071\uff65" +
    "\072\uff65\073\uff65\074\uff65\075\uff65\076\uff65\077\uff65\101" +
    "\uff65\102\uff65\103\uff65\104\uff65\105\uff65\106\uff65\112\uff65" +
    "\001\002\000\054\061\uff5e\063\uff5e\064\uff5e\065\uff5e\066" +
    "\uff5e\067\uff5e\070\uff5e\071\uff5e\072\uff5e\073\uff5e\074\uff5e" +
    "\075\uff5e\076\uff5e\077\uff5e\101\uff5e\102\uff5e\103\uff5e\104" +
    "\uff5e\105\uff5e\106\uff5e\112\uff5e\001\002\000\054\061\uff61" +
    "\063\uff61\064\uff61\065\uff61\066\uff61\067\uff61\070\uff61\071" +
    "\uff61\072\uff61\073\uff61\074\uff61\075\uff61\076\uff61\077\uff61" +
    "\101\uff61\102\uff61\103\uff61\104\uff61\105\uff61\106\uff61\112" +
    "\uff61\001\002\000\054\061\uff6b\063\uff6b\064\uff6b\065\uff6b" +
    "\066\uff6b\067\uff6b\070\uff6b\071\uff6b\072\uff6b\073\uff6b\074" +
    "\uff6b\075\uff6b\076\uff6b\077\uff6b\101\uff6b\102\uff6b\103\uff6b" +
    "\104\uff6b\105\uff6b\106\uff6b\112\uff6b\001\002\000\034\004" +
    "\140\005\133\006\152\007\134\010\144\011\147\012\135" +
    "\032\063\035\117\060\142\064\141\100\150\102\146\001" +
    "\002\000\032\004\140\005\133\006\152\007\134\010\144" +
    "\011\147\012\135\032\063\035\117\060\142\100\150\102" +
    "\146\001\002\000\006\065\230\073\227\001\002\000\054" +
    "\061\uff64\063\uff64\064\uff64\065\uff64\066\uff64\067\uff64\070" +
    "\uff64\071\uff64\072\uff64\073\uff64\074\uff64\075\uff64\076\uff64" +
    "\077\uff64\101\uff64\102\uff64\103\uff64\104\uff64\105\uff64\106" +
    "\uff64\112\uff64\001\002\000\054\061\uff5f\063\uff5f\064\uff5f" +
    "\065\uff5f\066\uff5f\067\uff5f\070\uff5f\071\uff5f\072\uff5f\073" +
    "\uff5f\074\uff5f\075\uff5f\076\uff5f\077\uff5f\101\uff5f\102\uff5f" +
    "\103\uff5f\104\uff5f\105\uff5f\106\uff5f\112\uff5f\001\002\000" +
    "\032\004\140\005\133\006\152\007\134\010\144\011\147" +
    "\012\135\032\063\035\117\060\142\100\150\102\146\001" +
    "\002\000\054\061\uff66\063\uff66\064\uff66\065\uff66\066\uff66" +
    "\067\uff66\070\uff66\071\uff66\072\uff66\073\uff66\074\uff66\075" +
    "\uff66\076\uff66\077\uff66\101\uff66\102\uff66\103\uff66\104\uff66" +
    "\105\uff66\106\uff66\112\uff66\001\002\000\032\004\140\005" +
    "\133\006\152\007\134\010\144\011\147\012\135\032\063" +
    "\035\117\060\142\100\150\102\146\001\002\000\042\065" +
    "\uff91\066\204\067\170\070\167\071\166\072\200\073\uff91" +
    "\075\174\076\202\077\201\101\203\102\171\103\175\104" +
    "\173\105\176\106\172\001\002\000\064\061\uff69\062\156" +
    "\063\uff69\064\uff69\065\uff69\066\uff69\067\uff69\070\uff69\071" +
    "\uff69\072\uff69\073\uff69\074\uff69\075\uff69\076\uff69\077\uff69" +
    "\101\uff69\102\uff69\103\uff69\104\uff69\105\uff69\106\uff69\107" +
    "\154\110\161\112\uff69\113\153\001\002\000\006\006\224" +
    "\032\063\001\002\000\114\006\uff5d\027\uff5d\031\uff5d\032" +
    "\uff5d\035\uff5d\036\uff5d\040\uff5d\041\uff5d\042\uff5d\043\uff5d" +
    "\044\uff5d\045\uff5d\046\uff5d\047\uff5d\050\uff5d\057\uff5d\061" +
    "\uff5d\063\uff5d\064\uff5d\065\uff5d\066\uff5d\067\uff5d\070\uff5d" +
    "\071\uff5d\072\uff5d\073\uff5d\074\uff5d\075\uff5d\076\uff5d\077" +
    "\uff5d\101\uff5d\102\uff5d\103\uff5d\104\uff5d\105\uff5d\106\uff5d" +
    "\112\uff5d\001\002\000\060\061\uff99\062\uff99\063\uff99\064" +
    "\uff99\065\uff99\066\uff99\067\uff99\070\uff99\071\uff99\072\uff99" +
    "\073\uff99\074\uff99\075\uff99\076\uff99\077\uff99\101\uff99\102" +
    "\uff99\103\uff99\104\uff99\105\uff99\106\uff99\111\uff99\112\uff99" +
    "\001\002\000\032\004\140\005\133\006\152\007\134\010" +
    "\144\011\147\012\135\032\063\035\117\060\142\100\150" +
    "\102\146\001\002\000\056\061\uffa7\063\uffa7\064\uffa7\065" +
    "\uffa7\066\uffa7\067\uffa7\070\uffa7\071\uffa7\072\uffa7\073\uffa7" +
    "\074\uffa7\075\uffa7\076\uffa7\077\uffa7\101\uffa7\102\uffa7\103" +
    "\uffa7\104\uffa7\105\uffa7\106\uffa7\112\uffa7\113\153\001\002" +
    "\000\056\061\uff68\062\156\063\uff68\064\uff68\065\uff68\066" +
    "\uff68\067\uff68\070\uff68\071\uff68\072\uff68\073\uff68\074\uff68" +
    "\075\uff68\076\uff68\077\uff68\101\uff68\102\uff68\103\uff68\104" +
    "\uff68\105\uff68\106\uff68\112\uff68\001\002\000\114\006\uff5c" +
    "\027\uff5c\031\uff5c\032\uff5c\035\uff5c\036\uff5c\040\uff5c\041" +
    "\uff5c\042\uff5c\043\uff5c\044\uff5c\045\uff5c\046\uff5c\047\uff5c" +
    "\050\uff5c\057\uff5c\061\uff5c\063\uff5c\064\uff5c\065\uff5c\066" +
    "\uff5c\067\uff5c\070\uff5c\071\uff5c\072\uff5c\073\uff5c\074\uff5c" +
    "\075\uff5c\076\uff5c\077\uff5c\101\uff5c\102\uff5c\103\uff5c\104" +
    "\uff5c\105\uff5c\106\uff5c\112\uff5c\001\002\000\056\061\uffa5" +
    "\063\uffa5\064\uffa5\065\uffa5\066\uffa5\067\uffa5\070\uffa5\071" +
    "\uffa5\072\uffa5\073\uffa5\074\uffa5\075\uffa5\076\uffa5\077\uffa5" +
    "\101\uffa5\102\uffa5\103\uffa5\104\uffa5\105\uffa5\106\uffa5\112" +
    "\uffa5\113\uffa5\001\002\000\060\061\uff9a\062\uff9a\063\uff9a" +
    "\064\uff9a\065\uff9a\066\uff9a\067\uff9a\070\uff9a\071\uff9a\072" +
    "\uff9a\073\uff9a\074\uff9a\075\uff9a\076\uff9a\077\uff9a\101\uff9a" +
    "\102\uff9a\103\uff9a\104\uff9a\105\uff9a\106\uff9a\111\uff9a\112" +
    "\uff9a\001\002\000\056\061\uffa6\063\uffa6\064\uffa6\065\uffa6" +
    "\066\uffa6\067\uffa6\070\uffa6\071\uffa6\072\uffa6\073\uffa6\074" +
    "\uffa6\075\uffa6\076\uffa6\077\uffa6\101\uffa6\102\uffa6\103\uffa6" +
    "\104\uffa6\105\uffa6\106\uffa6\112\uffa6\113\uffa6\001\002\000" +
    "\040\063\177\066\204\067\170\070\167\071\166\072\200" +
    "\075\174\076\202\077\201\101\203\102\171\103\175\104" +
    "\173\105\176\106\172\001\002\000\032\004\140\005\133" +
    "\006\152\007\134\010\144\011\147\012\135\032\063\035" +
    "\117\060\142\100\150\102\146\001\002\000\032\004\140" +
    "\005\133\006\152\007\134\010\144\011\147\012\135\032" +
    "\063\035\117\060\142\100\150\102\146\001\002\000\032" +
    "\004\140\005\133\006\152\007\134\010\144\011\147\012" +
    "\135\032\063\035\117\060\142\100\150\102\146\001\002" +
    "\000\032\004\140\005\133\006\152\007\134\010\144\011" +
    "\147\012\135\032\063\035\117\060\142\100\150\102\146" +
    "\001\002\000\032\004\140\005\133\006\152\007\134\010" +
    "\144\011\147\012\135\032\063\035\117\060\142\100\150" +
    "\102\146\001\002\000\032\004\140\005\133\006\152\007" +
    "\134\010\144\011\147\012\135\032\063\035\117\060\142" +
    "\100\150\102\146\001\002\000\032\004\140\005\133\006" +
    "\152\007\134\010\144\011\147\012\135\032\063\035\117" +
    "\060\142\100\150\102\146\001\002\000\032\004\140\005" +
    "\133\006\152\007\134\010\144\011\147\012\135\032\063" +
    "\035\117\060\142\100\150\102\146\001\002\000\032\004" +
    "\140\005\133\006\152\007\134\010\144\011\147\012\135" +
    "\032\063\035\117\060\142\100\150\102\146\001\002\000" +
    "\060\061\uff98\062\uff98\063\uff98\064\uff98\065\uff98\066\uff98" +
    "\067\uff98\070\uff98\071\uff98\072\uff98\073\uff98\074\uff98\075" +
    "\uff98\076\uff98\077\uff98\101\uff98\102\uff98\103\uff98\104\uff98" +
    "\105\uff98\106\uff98\111\uff98\112\uff98\001\002\000\032\004" +
    "\140\005\133\006\152\007\134\010\144\011\147\012\135" +
    "\032\063\035\117\060\142\100\150\102\146\001\002\000" +
    "\032\004\140\005\133\006\152\007\134\010\144\011\147" +
    "\012\135\032\063\035\117\060\142\100\150\102\146\001" +
    "\002\000\032\004\140\005\133\006\152\007\134\010\144" +
    "\011\147\012\135\032\063\035\117\060\142\100\150\102" +
    "\146\001\002\000\032\004\140\005\133\006\152\007\134" +
    "\010\144\011\147\012\135\032\063\035\117\060\142\100" +
    "\150\102\146\001\002\000\032\004\140\005\133\006\152" +
    "\007\134\010\144\011\147\012\135\032\063\035\117\060" +
    "\142\100\150\102\146\001\002\000\054\061\uff70\063\uff70" +
    "\064\uff70\065\uff70\066\uff70\067\uff70\070\167\071\166\072" +
    "\200\073\uff70\074\uff70\075\uff70\076\uff70\077\uff70\101\uff70" +
    "\102\uff70\103\uff70\104\uff70\105\uff70\106\uff70\112\uff70\001" +
    "\002\000\054\061\uff73\063\uff73\064\uff73\065\uff73\066\204" +
    "\067\170\070\167\071\166\072\200\073\uff73\074\uff73\075" +
    "\uff73\076\uff73\077\uff73\101\uff73\102\uff73\103\uff73\104\uff73" +
    "\105\uff73\106\uff73\112\uff73\001\002\000\054\061\uff79\063" +
    "\uff79\064\uff79\065\uff79\066\204\067\170\070\167\071\166" +
    "\072\200\073\uff79\074\uff79\075\uff79\076\uff79\077\201\101" +
    "\203\102\171\103\175\104\173\105\176\106\172\112\uff79" +
    "\001\002\000\054\061\uff78\063\uff78\064\uff78\065\uff78\066" +
    "\204\067\170\070\167\071\166\072\200\073\uff78\074\uff78" +
    "\075\uff78\076\uff78\077\uff78\101\203\102\171\103\175\104" +
    "\173\105\176\106\172\112\uff78\001\002\000\054\061\uff6e" +
    "\063\uff6e\064\uff6e\065\uff6e\066\uff6e\067\uff6e\070\uff6e\071" +
    "\166\072\uff6e\073\uff6e\074\uff6e\075\uff6e\076\uff6e\077\uff6e" +
    "\101\uff6e\102\uff6e\103\uff6e\104\uff6e\105\uff6e\106\uff6e\112" +
    "\uff6e\001\002\000\054\061\uff76\063\uff76\064\uff76\065\uff76" +
    "\066\204\067\170\070\167\071\166\072\200\073\uff76\074" +
    "\uff76\075\uff76\076\uff76\077\uff76\101\203\102\171\103\175" +
    "\104\173\105\uff76\106\uff76\112\uff76\001\002\000\054\061" +
    "\uff71\063\uff71\064\uff71\065\uff71\066\204\067\170\070\167" +
    "\071\166\072\200\073\uff71\074\uff71\075\uff71\076\uff71\077" +
    "\uff71\101\uff71\102\uff71\103\uff71\104\uff71\105\uff71\106\uff71" +
    "\112\uff71\001\002\000\054\061\uff7a\063\uff7a\064\uff7a\065" +
    "\uff7a\066\204\067\170\070\167\071\166\072\200\073\uff7a" +
    "\074\uff7a\075\uff7a\076\202\077\201\101\203\102\171\103" +
    "\175\104\173\105\176\106\172\112\uff7a\001\002\000\054" +
    "\061\uff72\063\uff72\064\uff72\065\uff72\066\204\067\170\070" +
    "\167\071\166\072\200\073\uff72\074\uff72\075\uff72\076\uff72" +
    "\077\uff72\101\uff72\102\uff72\103\uff72\104\uff72\105\uff72\106" +
    "\uff72\112\uff72\001\002\000\054\061\uff75\063\uff75\064\uff75" +
    "\065\uff75\066\204\067\170\070\167\071\166\072\200\073" +
    "\uff75\074\uff75\075\uff75\076\uff75\077\uff75\101\203\102\171" +
    "\103\175\104\173\105\uff75\106\uff75\112\uff75\001\002\000" +
    "\054\061\uff74\063\uff74\064\uff74\065\uff74\066\204\067\170" +
    "\070\167\071\166\072\200\073\uff74\074\uff74\075\uff74\076" +
    "\uff74\077\uff74\101\uff74\102\uff74\103\uff74\104\uff74\105\uff74" +
    "\106\uff74\112\uff74\001\002\000\054\061\uff6f\063\uff6f\064" +
    "\uff6f\065\uff6f\066\uff6f\067\uff6f\070\167\071\166\072\200" +
    "\073\uff6f\074\uff6f\075\uff6f\076\uff6f\077\uff6f\101\uff6f\102" +
    "\uff6f\103\uff6f\104\uff6f\105\uff6f\106\uff6f\112\uff6f\001\002" +
    "\000\054\061\uff6d\063\uff6d\064\uff6d\065\uff6d\066\uff6d\067" +
    "\uff6d\070\uff6d\071\166\072\uff6d\073\uff6d\074\uff6d\075\uff6d" +
    "\076\uff6d\077\uff6d\101\uff6d\102\uff6d\103\uff6d\104\uff6d\105" +
    "\uff6d\106\uff6d\112\uff6d\001\002\000\054\061\uff6c\063\uff6c" +
    "\064\uff6c\065\uff6c\066\uff6c\067\uff6c\070\uff6c\071\166\072" +
    "\uff6c\073\uff6c\074\uff6c\075\uff6c\076\uff6c\077\uff6c\101\uff6c" +
    "\102\uff6c\103\uff6c\104\uff6c\105\uff6c\106\uff6c\112\uff6c\001" +
    "\002\000\056\061\uffa3\063\uffa3\064\uffa3\065\uffa3\066\uffa3" +
    "\067\uffa3\070\uffa3\071\uffa3\072\uffa3\073\uffa3\074\uffa3\075" +
    "\uffa3\076\uffa3\077\uffa3\101\uffa3\102\uffa3\103\uffa3\104\uffa3" +
    "\105\uffa3\106\uffa3\112\uffa3\113\uffa3\001\002\000\056\061" +
    "\uffa4\063\uffa4\064\uffa4\065\uffa4\066\uffa4\067\uffa4\070\uffa4" +
    "\071\uffa4\072\uffa4\073\uffa4\074\uffa4\075\uffa4\076\uffa4\077" +
    "\uffa4\101\uffa4\102\uffa4\103\uffa4\104\uffa4\105\uffa4\106\uffa4" +
    "\112\uffa4\113\uffa4\001\002\000\054\061\uff77\063\uff77\064" +
    "\uff77\065\uff77\066\204\067\170\070\167\071\166\072\200" +
    "\073\uff77\074\uff77\075\uff77\076\uff77\077\uff77\101\203\102" +
    "\171\103\175\104\173\105\176\106\172\112\uff77\001\002" +
    "\000\054\061\uff63\063\uff63\064\uff63\065\uff63\066\204\067" +
    "\170\070\167\071\166\072\200\073\uff63\074\uff63\075\uff63" +
    "\076\uff63\077\uff63\101\uff63\102\uff63\103\uff63\104\uff63\105" +
    "\uff63\106\uff63\112\uff63\001\002\000\034\004\140\005\133" +
    "\006\152\007\134\010\144\011\147\012\135\032\063\035" +
    "\117\060\142\064\141\100\150\102\146\001\002\000\006" +
    "\061\uffa0\073\uffa0\001\002\000\006\065\uff93\073\uff93\001" +
    "\002\000\040\061\233\066\204\067\170\070\167\071\166" +
    "\072\200\075\174\076\202\077\201\101\203\102\171\103" +
    "\175\104\173\105\176\106\172\001\002\000\054\061\uff62" +
    "\063\uff62\064\uff62\065\uff62\066\uff62\067\uff62\070\uff62\071" +
    "\uff62\072\uff62\073\uff62\074\uff62\075\uff62\076\uff62\077\uff62" +
    "\101\uff62\102\uff62\103\uff62\104\uff62\105\uff62\106\uff62\112" +
    "\uff62\001\002\000\006\065\235\073\227\001\002\000\006" +
    "\065\uff90\073\uff90\001\002\000\006\006\127\064\130\001" +
    "\002\000\004\061\240\001\002\000\004\074\241\001\002" +
    "\000\044\006\uffa2\027\uffa2\031\uffa2\032\uffa2\035\uffa2\036" +
    "\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2" +
    "\046\uffa2\047\uffa2\050\uffa2\057\uffa2\065\uffa2\001\002\000" +
    "\032\004\140\005\133\006\152\007\134\010\144\011\147" +
    "\012\135\032\063\035\117\060\142\100\150\102\146\001" +
    "\002\000\040\061\244\066\204\067\170\070\167\071\166" +
    "\072\200\075\174\076\202\077\201\101\203\102\171\103" +
    "\175\104\173\105\176\106\172\001\002\000\004\064\245" +
    "\001\002\000\036\006\070\027\122\031\100\032\063\035" +
    "\117\036\064\040\062\043\104\044\123\045\115\046\112" +
    "\047\074\050\124\057\106\001\002\000\040\006\070\027" +
    "\122\031\100\032\063\035\117\036\064\040\062\043\104" +
    "\044\123\045\115\046\112\047\074\050\124\057\106\065" +
    "\250\001\002\000\044\006\uffd9\027\uffd9\031\uffd9\032\uffd9" +
    "\035\uffd9\036\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044" +
    "\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9\057\uffd9\065\uffd9" +
    "\001\002\000\044\006\uffb4\027\uffb4\031\uffb4\032\uffb4\035" +
    "\uffb4\036\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4" +
    "\045\uffb4\046\uffb4\047\uffb4\050\uffb4\057\uffb4\065\uffb4\001" +
    "\002\000\004\006\253\001\002\000\006\073\uffc0\074\uffc0" +
    "\001\002\000\014\062\156\073\uffee\074\uffee\111\uffee\112" +
    "\023\001\002\000\006\073\255\074\uffc5\001\002\000\004" +
    "\006\257\001\002\000\006\073\uffc1\074\uffc1\001\002\000" +
    "\010\073\uffee\074\uffee\112\023\001\002\000\006\073\uffbf" +
    "\074\uffbf\001\002\000\012\062\156\074\uffee\111\uffee\112" +
    "\023\001\002\000\010\073\uffbf\074\uffbf\111\263\001\002" +
    "\000\034\004\140\005\133\006\152\007\134\010\144\011" +
    "\147\012\135\030\264\032\063\035\117\060\142\100\150" +
    "\102\146\001\002\000\004\032\063\001\002\000\040\066" +
    "\204\067\170\070\167\071\166\072\200\074\uffc4\075\174" +
    "\076\202\077\201\101\203\102\171\103\175\104\173\105" +
    "\176\106\172\001\002\000\004\074\267\001\002\000\004" +
    "\074\uffc3\001\002\000\006\074\uff9c\111\271\001\002\000" +
    "\006\006\273\064\275\001\002\000\006\073\300\074\uff96" +
    "\001\002\000\004\074\uff97\001\002\000\004\074\uff9b\001" +
    "\002\000\034\004\140\005\133\006\152\007\134\010\144" +
    "\011\147\012\135\032\063\035\117\060\142\064\141\100" +
    "\150\102\146\001\002\000\006\065\277\073\227\001\002" +
    "\000\006\073\uff94\074\uff94\001\002\000\004\064\301\001" +
    "\002\000\034\004\140\005\133\006\152\007\134\010\144" +
    "\011\147\012\135\032\063\035\117\060\142\064\141\100" +
    "\150\102\146\001\002\000\006\065\303\073\227\001\002" +
    "\000\006\073\uff95\074\uff95\001\002\000\044\006\uffce\027" +
    "\uffce\031\uffce\032\uffce\035\uffce\036\uffce\040\uffce\041\uffce" +
    "\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050" +
    "\uffce\057\uffce\065\uffce\001\002\000\004\060\306\001\002" +
    "\000\034\004\140\005\133\006\152\007\134\010\144\011" +
    "\147\012\135\032\063\035\117\060\142\061\307\100\150" +
    "\102\146\001\002\000\054\061\uffab\063\uffab\064\uffab\065" +
    "\uffab\066\uffab\067\uffab\070\uffab\071\uffab\072\uffab\073\uffab" +
    "\074\uffab\075\uffab\076\uffab\077\uffab\101\uffab\102\uffab\103" +
    "\uffab\104\uffab\105\uffab\106\uffab\112\uffab\001\002\000\006" +
    "\061\314\073\313\001\002\000\006\061\uffa9\073\uffa9\001" +
    "\002\000\042\061\uffa8\066\204\067\170\070\167\071\166" +
    "\072\200\073\uffa8\075\174\076\202\077\201\101\203\102" +
    "\171\103\175\104\173\105\176\106\172\001\002\000\032" +
    "\004\140\005\133\006\152\007\134\010\144\011\147\012" +
    "\135\032\063\035\117\060\142\100\150\102\146\001\002" +
    "\000\054\061\uffac\063\uffac\064\uffac\065\uffac\066\uffac\067" +
    "\uffac\070\uffac\071\uffac\072\uffac\073\uffac\074\uffac\075\uffac" +
    "\076\uffac\077\uffac\101\uffac\102\uffac\103\uffac\104\uffac\105" +
    "\uffac\106\uffac\112\uffac\001\002\000\006\061\uffaa\073\uffaa" +
    "\001\002\000\036\006\070\027\122\031\100\032\063\035" +
    "\117\036\064\040\062\043\104\044\123\045\115\046\112" +
    "\047\074\050\124\057\106\001\002\000\040\006\070\027" +
    "\122\031\100\032\063\035\117\036\064\040\062\043\104" +
    "\044\123\045\115\046\112\047\074\050\124\057\106\065" +
    "\320\001\002\000\004\044\321\001\002\000\004\060\322" +
    "\001\002\000\032\004\140\005\133\006\152\007\134\010" +
    "\144\011\147\012\135\032\063\035\117\060\142\100\150" +
    "\102\146\001\002\000\040\061\324\066\204\067\170\070" +
    "\167\071\166\072\200\075\174\076\202\077\201\101\203" +
    "\102\171\103\175\104\173\105\176\106\172\001\002\000" +
    "\044\006\uffb3\027\uffb3\031\uffb3\032\uffb3\035\uffb3\036\uffb3" +
    "\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046" +
    "\uffb3\047\uffb3\050\uffb3\057\uffb3\065\uffb3\001\002\000\044" +
    "\006\uffcd\027\uffcd\031\uffcd\032\uffcd\035\uffcd\036\uffcd\040" +
    "\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd" +
    "\047\uffcd\050\uffcd\057\uffcd\065\uffcd\001\002\000\044\006" +
    "\uffb2\027\uffb2\031\uffb2\032\uffb2\035\uffb2\036\uffb2\040\uffb2" +
    "\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047" +
    "\uffb2\050\uffb2\057\uffb2\065\uffb2\001\002\000\044\006\uffc9" +
    "\027\uffc9\031\uffc9\032\uffc9\035\uffc9\036\uffc9\040\uffc9\041" +
    "\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9" +
    "\050\uffc9\057\uffc9\065\uffc9\001\002\000\032\004\140\005" +
    "\133\006\152\007\134\010\144\011\147\012\135\032\063" +
    "\035\117\060\142\100\150\102\146\001\002\000\040\061" +
    "\332\066\204\067\170\070\167\071\166\072\200\075\174" +
    "\076\202\077\201\101\203\102\171\103\175\104\173\105" +
    "\176\106\172\001\002\000\004\074\333\001\002\000\044" +
    "\006\uff9f\027\uff9f\031\uff9f\032\uff9f\035\uff9f\036\uff9f\040" +
    "\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f" +
    "\047\uff9f\050\uff9f\057\uff9f\065\uff9f\001\002\000\044\006" +
    "\uffc8\027\uffc8\031\uffc8\032\uffc8\035\uffc8\036\uffc8\040\uffc8" +
    "\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047" +
    "\uffc8\050\uffc8\057\uffc8\065\uffc8\001\002\000\004\006\337" +
    "\001\002\000\004\112\342\001\002\000\004\111\340\001" +
    "\002\000\032\004\140\005\133\006\152\007\134\010\144" +
    "\011\147\012\135\032\063\035\117\060\142\100\150\102" +
    "\146\001\002\000\044\061\uffc2\066\204\067\170\070\167" +
    "\071\166\072\200\074\uffc2\075\174\076\202\077\201\101" +
    "\203\102\171\103\175\104\173\105\176\106\172\112\uffc2" +
    "\001\002\000\032\004\140\005\133\006\152\007\134\010" +
    "\144\011\147\012\135\032\063\035\117\060\142\100\150" +
    "\102\146\001\002\000\040\066\204\067\170\070\167\071" +
    "\166\072\200\075\174\076\202\077\201\101\203\102\171" +
    "\103\175\104\173\105\176\106\172\112\344\001\002\000" +
    "\004\006\350\001\002\000\004\061\uffb6\001\002\000\004" +
    "\061\351\001\002\000\004\061\uffb5\001\002\000\010\107" +
    "\154\110\161\111\340\001\002\000\004\064\352\001\002" +
    "\000\036\006\070\027\122\031\100\032\063\035\117\036" +
    "\064\040\062\043\104\044\123\045\115\046\112\047\074" +
    "\050\124\057\106\001\002\000\040\006\070\027\122\031" +
    "\100\032\063\035\117\036\064\040\062\043\104\044\123" +
    "\045\115\046\112\047\074\050\124\057\106\065\354\001" +
    "\002\000\044\006\uffb7\027\uffb7\031\uffb7\032\uffb7\035\uffb7" +
    "\036\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045" +
    "\uffb7\046\uffb7\047\uffb7\050\uffb7\057\uffb7\065\uffb7\001\002" +
    "\000\022\006\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017" +
    "\uffe5\020\uffe5\065\uffe5\001\002\000\044\006\uffaf\027\uffaf" +
    "\031\uffaf\032\uffaf\035\uffaf\036\uffaf\040\uffaf\041\uffaf\042" +
    "\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf" +
    "\057\uffaf\065\uffaf\001\002\000\040\066\204\067\170\070" +
    "\167\071\166\072\200\074\360\075\174\076\202\077\201" +
    "\101\203\102\171\103\175\104\173\105\176\106\172\001" +
    "\002\000\044\006\uffb0\027\uffb0\031\uffb0\032\uffb0\035\uffb0" +
    "\036\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045" +
    "\uffb0\046\uffb0\047\uffb0\050\uffb0\057\uffb0\065\uffb0\001\002" +
    "\000\044\006\uffc7\027\uffc7\031\uffc7\032\uffc7\035\uffc7\036" +
    "\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7" +
    "\046\uffc7\047\uffc7\050\uffc7\057\uffc7\065\uffc7\001\002\000" +
    "\044\006\uffb1\027\uffb1\031\uffb1\032\uffb1\035\uffb1\036\uffb1" +
    "\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046" +
    "\uffb1\047\uffb1\050\uffb1\057\uffb1\065\uffb1\001\002\000\006" +
    "\062\156\111\364\001\002\000\032\004\140\005\133\006" +
    "\152\007\134\010\144\011\147\012\135\032\063\035\117" +
    "\060\142\100\150\102\146\001\002\000\040\066\204\067" +
    "\170\070\167\071\166\072\200\074\uff8f\075\174\076\202" +
    "\077\201\101\203\102\171\103\175\104\173\105\176\106" +
    "\172\001\002\000\004\064\367\001\002\000\036\006\070" +
    "\027\122\031\100\032\063\035\117\036\064\040\062\043" +
    "\104\044\123\045\115\046\112\047\074\050\124\057\106" +
    "\001\002\000\040\006\070\027\122\031\100\032\063\035" +
    "\117\036\064\040\062\043\104\044\123\045\115\046\112" +
    "\047\074\050\124\057\106\065\371\001\002\000\044\006" +
    "\uffbd\027\uffbd\031\uffbd\032\uffbd\035\uffbd\036\uffbd\040\uffbd" +
    "\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047" +
    "\uffbd\050\uffbd\057\uffbd\065\uffbd\001\002\000\032\004\140" +
    "\005\133\006\152\007\134\010\144\011\147\012\135\032" +
    "\063\035\117\060\142\100\150\102\146\001\002\000\040" +
    "\061\374\066\204\067\170\070\167\071\166\072\200\075" +
    "\174\076\202\077\201\101\203\102\171\103\175\104\173" +
    "\105\176\106\172\001\002\000\004\064\375\001\002\000" +
    "\036\006\070\027\122\031\100\032\063\035\117\036\064" +
    "\040\062\043\104\044\123\045\115\046\112\047\074\050" +
    "\124\057\106\001\002\000\040\006\070\027\122\031\100" +
    "\032\063\035\117\036\064\040\062\043\104\044\123\045" +
    "\115\046\112\047\074\050\124\057\106\065\377\001\002" +
    "\000\046\006\uffbe\027\uffbe\031\uffbe\032\uffbe\035\uffbe\036" +
    "\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe" +
    "\045\uffbe\046\uffbe\047\uffbe\050\uffbe\057\uffbe\065\uffbe\001" +
    "\002\000\004\060\u0101\001\002\000\034\004\140\005\133" +
    "\006\152\007\134\010\144\011\147\012\135\032\063\035" +
    "\117\060\142\061\u0102\100\150\102\146\001\002\000\056" +
    "\061\uffad\063\uffad\064\uffad\065\uffad\066\uffad\067\uffad\070" +
    "\uffad\071\uffad\072\uffad\073\uffad\074\uffad\075\uffad\076\uffad" +
    "\077\uffad\101\uffad\102\uffad\103\uffad\104\uffad\105\uffad\106" +
    "\uffad\112\uffad\113\uffad\001\002\000\006\061\u0104\073\313" +
    "\001\002\000\056\061\uffae\063\uffae\064\uffae\065\uffae\066" +
    "\uffae\067\uffae\070\uffae\071\uffae\072\uffae\073\uffae\074\uffae" +
    "\075\uffae\076\uffae\077\uffae\101\uffae\102\uffae\103\uffae\104" +
    "\uffae\105\uffae\106\uffae\112\uffae\113\uffae\001\002\000\040" +
    "\064\u0106\066\204\067\170\070\167\071\166\072\200\075" +
    "\174\076\202\077\201\101\203\102\171\103\175\104\173" +
    "\105\176\106\172\001\002\000\006\041\u0109\042\u0108\001" +
    "\002\000\010\041\uffba\042\uffba\065\uffba\001\002\000\036" +
    "\006\070\027\122\031\100\032\063\035\117\036\064\040" +
    "\062\043\104\044\123\045\115\046\112\047\074\050\124" +
    "\057\106\001\002\000\032\004\140\005\133\006\152\007" +
    "\134\010\144\011\147\012\135\032\063\035\117\060\142" +
    "\100\150\102\146\001\002\000\010\041\u0109\042\u0108\065" +
    "\u010c\001\002\000\010\041\uffbb\042\uffbb\065\uffbb\001\002" +
    "\000\044\006\uffbc\027\uffbc\031\uffbc\032\uffbc\035\uffbc\036" +
    "\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc" +
    "\046\uffbc\047\uffbc\050\uffbc\057\uffbc\065\uffbc\001\002\000" +
    "\040\066\204\067\170\070\167\071\166\072\200\075\174" +
    "\076\202\077\201\101\203\102\171\103\175\104\173\105" +
    "\176\106\172\112\u010e\001\002\000\036\006\070\027\122" +
    "\031\100\032\063\035\117\036\064\040\062\043\104\044" +
    "\123\045\115\046\112\047\074\050\124\057\106\001\002" +
    "\000\044\006\070\027\122\031\100\032\063\035\117\036" +
    "\064\040\062\041\uffb9\042\uffb9\043\104\044\123\045\115" +
    "\046\112\047\074\050\124\057\106\065\uffb9\001\002\000" +
    "\044\006\070\027\122\031\100\032\063\035\117\036\064" +
    "\040\062\041\uffb8\042\uffb8\043\104\044\123\045\115\046" +
    "\112\047\074\050\124\057\106\065\uffb8\001\002\000\020" +
    "\006\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\061" +
    "\uffe1\001\002\000\004\064\u0113\001\002\000\036\006\070" +
    "\027\122\031\100\032\063\035\117\036\064\040\062\043" +
    "\104\044\123\045\115\046\112\047\074\050\124\057\106" +
    "\001\002\000\040\006\070\027\122\031\100\032\063\035" +
    "\117\036\064\040\062\043\104\044\123\045\115\046\112" +
    "\047\074\050\124\057\106\065\u0115\001\002\000\022\006" +
    "\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4" +
    "\065\uffe4\001\002\000\004\060\u012a\001\002\000\004\060" +
    "\u011e\001\002\000\004\060\u0119\001\002\000\004\061\u011a" +
    "\001\002\000\004\064\u011b\001\002\000\036\006\070\027" +
    "\122\031\100\032\063\035\117\036\064\040\062\043\104" +
    "\044\123\045\115\046\112\047\074\050\124\057\106\001" +
    "\002\000\040\006\070\027\122\031\100\032\063\035\117" +
    "\036\064\040\062\043\104\044\123\045\115\046\112\047" +
    "\074\050\124\057\106\065\u011d\001\002\000\022\006\uffe0" +
    "\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\065" +
    "\uffe0\001\002\000\020\006\046\013\036\014\037\015\041" +
    "\016\031\017\043\061\u011f\001\002\000\006\064\uffee\112" +
    "\023\001\002\000\020\006\046\013\036\014\037\015\041" +
    "\016\031\017\043\061\u0121\001\002\000\006\064\uffee\112" +
    "\023\001\002\000\004\064\u0123\001\002\000\036\006\070" +
    "\027\122\031\100\032\063\035\117\036\064\040\062\043" +
    "\104\044\123\045\115\046\112\047\074\050\124\057\106" +
    "\001\002\000\040\006\070\027\122\031\100\032\063\035" +
    "\117\036\064\040\062\043\104\044\123\045\115\046\112" +
    "\047\074\050\124\057\106\065\u0125\001\002\000\022\006" +
    "\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7" +
    "\065\uffe7\001\002\000\004\064\u0127\001\002\000\036\006" +
    "\070\027\122\031\100\032\063\035\117\036\064\040\062" +
    "\043\104\044\123\045\115\046\112\047\074\050\124\057" +
    "\106\001\002\000\040\006\070\027\122\031\100\032\063" +
    "\035\117\036\064\040\062\043\104\044\123\045\115\046" +
    "\112\047\074\050\124\057\106\065\u0129\001\002\000\022" +
    "\006\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020" +
    "\uffe6\065\uffe6\001\002\000\004\061\u012b\001\002\000\004" +
    "\064\u012c\001\002\000\012\053\u0136\054\u0132\055\u012f\056" +
    "\u012e\001\002\000\014\053\uff8b\054\uff8b\055\uff8b\056\uff8b" +
    "\065\uff8b\001\002\000\004\060\u015c\001\002\000\004\060" +
    "\u0158\001\002\000\014\053\uff88\054\uff88\055\uff88\056\uff88" +
    "\065\uff88\001\002\000\014\053\uff89\054\uff89\055\uff89\056" +
    "\uff89\065\uff89\001\002\000\004\060\u0150\001\002\000\014" +
    "\053\uff8a\054\uff8a\055\uff8a\056\uff8a\065\uff8a\001\002\000" +
    "\014\053\uff8c\054\uff8c\055\uff8c\056\uff8c\065\uff8c\001\002" +
    "\000\014\053\u0136\054\u0132\055\u012f\056\u012e\065\u014e\001" +
    "\002\000\004\111\u0137\001\002\000\006\032\u0138\035\u013a" +
    "\001\002\000\004\006\u014a\001\002\000\004\074\uff83\001" +
    "\002\000\004\006\u013e\001\002\000\004\074\u013d\001\002" +
    "\000\004\074\uff82\001\002\000\014\053\uff84\054\uff84\055" +
    "\uff84\056\uff84\065\uff84\001\002\000\004\060\u013f\001\002" +
    "\000\004\052\u0140\001\002\000\004\060\u0146\001\002\000" +
    "\006\061\u0144\073\u0143\001\002\000\006\061\uff7e\073\uff7e" +
    "\001\002\000\004\052\u0140\001\002\000\004\074\uff81\001" +
    "\002\000\006\061\uff7f\073\uff7f\001\002\000\032\004\140" +
    "\005\133\006\152\007\134\010\144\011\147\012\135\032" +
    "\063\035\117\060\142\100\150\102\146\001\002\000\040" +
    "\061\u0148\066\204\067\170\070\167\071\166\072\200\075" +
    "\174\076\202\077\201\101\203\102\171\103\175\104\173" +
    "\105\176\106\172\001\002\000\004\074\u0149\001\002\000" +
    "\006\061\uff87\073\uff87\001\002\000\004\060\u014b\001\002" +
    "\000\004\052\u0140\001\002\000\006\061\u014d\073\u0143\001" +
    "\002\000\004\074\uff80\001\002\000\022\006\uff8e\013\uff8e" +
    "\014\uff8e\015\uff8e\016\uff8e\017\uff8e\020\uff8e\065\uff8e\001" +
    "\002\000\014\053\uff8d\054\uff8d\055\uff8d\056\uff8d\065\uff8d" +
    "\001\002\000\034\004\140\005\133\006\152\007\134\010" +
    "\144\011\147\012\135\032\063\035\117\052\u0140\060\142" +
    "\100\150\102\146\001\002\000\004\061\uff85\001\002\000" +
    "\004\061\u0154\001\002\000\040\061\uff86\066\204\067\170" +
    "\070\167\071\166\072\200\075\174\076\202\077\201\101" +
    "\203\102\171\103\175\104\173\105\176\106\172\001\002" +
    "\000\004\111\u0155\001\002\000\032\004\140\005\133\006" +
    "\152\007\134\010\144\011\147\012\135\032\063\035\117" +
    "\060\142\100\150\102\146\001\002\000\040\066\204\067" +
    "\170\070\167\071\166\072\200\074\u0157\075\174\076\202" +
    "\077\201\101\203\102\171\103\175\104\173\105\176\106" +
    "\172\001\002\000\014\053\uff7d\054\uff7d\055\uff7d\056\uff7d" +
    "\065\uff7d\001\002\000\034\004\140\005\133\006\152\007" +
    "\134\010\144\011\147\012\135\032\063\035\117\052\u0140" +
    "\060\142\100\150\102\146\001\002\000\004\061\u015a\001" +
    "\002\000\004\074\u015b\001\002\000\014\053\uff7c\054\uff7c" +
    "\055\uff7c\056\uff7c\065\uff7c\001\002\000\034\004\140\005" +
    "\133\006\152\007\134\010\144\011\147\012\135\032\063" +
    "\035\117\052\u0140\060\142\100\150\102\146\001\002\000" +
    "\004\061\u015e\001\002\000\004\074\u015f\001\002\000\014" +
    "\053\uff7b\054\uff7b\055\uff7b\056\uff7b\065\uff7b\001\002\000" +
    "\006\002\ufff2\025\ufff2\001\002\000\022\006\uffed\013\uffed" +
    "\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\065\uffed\001" +
    "\002\000\020\006\046\013\036\014\037\015\041\016\031" +
    "\017\043\020\034\001\002\000\022\006\046\013\036\014" +
    "\037\015\041\016\031\017\043\020\034\065\u0164\001\002" +
    "\000\006\002\ufff3\025\ufff3\001\002\000\012\064\ufff0\073" +
    "\ufff0\074\ufff0\111\ufff0\001\002\000\012\064\uffef\073\uffef" +
    "\074\uffef\111\uffef\001\002\000\012\064\ufff1\073\ufff1\074" +
    "\ufff1\111\ufff1\001\002\000\006\002\ufff5\025\ufff5\001\002" +
    "\000\006\025\ufff8\034\ufff8\001\002\000\004\002\001\001" +
    "\002\000\010\024\ufffb\025\ufffb\034\ufffb\001\002\000\004" +
    "\074\u016d\001\002\000\010\024\ufff9\025\ufff9\034\ufff9\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u016b\000\012\002\006\010\004\013\005\055\007\001" +
    "\001\000\002\001\001\000\004\013\u016a\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\011\010\014\012\056" +
    "\011\001\001\000\004\014\u0168\001\001\000\006\012\020" +
    "\110\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\u0167\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\026\001\001\000\002\001\001\000\020\004" +
    "\031\006\044\016\041\017\043\022\032\023\037\070\034" +
    "\001\001\000\002\001\001\000\016\006\u0160\016\041\017" +
    "\043\022\032\023\037\070\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\020\052" +
    "\021\053\023\051\001\001\000\004\015\u0111\001\001\000" +
    "\002\001\001\000\006\021\055\023\051\001\001\000\002" +
    "\001\001\000\004\015\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\003\066\005\101\007\064\024\106" +
    "\025\110\026\104\031\065\032\071\033\072\034\074\035" +
    "\107\036\076\037\115\040\120\043\100\044\117\052\070" +
    "\053\113\054\060\060\075\061\112\062\102\001\001\000" +
    "\002\001\001\000\014\044\136\047\135\053\130\054\144" +
    "\106\u0104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\063\362\064\154\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\044\136\047" +
    "\135\053\130\054\144\106\356\001\001\000\002\001\001" +
    "\000\054\003\246\007\064\024\106\025\110\026\104\031" +
    "\065\032\071\033\072\034\074\035\107\036\076\037\115" +
    "\040\120\043\100\044\117\052\070\053\113\054\060\060" +
    "\075\061\112\062\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\250\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\107\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\044\136\047\135\053\130\054" +
    "\144\065\142\066\131\106\150\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\044\136\047\135\053\130\054\144\065" +
    "\233\066\131\106\150\001\001\000\014\044\136\047\135" +
    "\053\130\054\144\106\231\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\044\136\047\135" +
    "\053\130\054\144\106\225\001\001\000\002\001\001\000" +
    "\014\044\136\047\135\053\130\054\144\106\224\001\001" +
    "\000\002\001\001\000\012\050\156\051\161\063\157\064" +
    "\154\001\001\000\004\044\222\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\044\136\047\135\053\130\054" +
    "\144\106\164\001\001\000\004\051\163\001\001\000\004" +
    "\064\162\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\044\136\047\135\053\130\054\144\106\221\001\001\000" +
    "\014\044\136\047\135\053\130\054\144\106\220\001\001" +
    "\000\014\044\136\047\135\053\130\054\144\106\217\001" +
    "\001\000\014\044\136\047\135\053\130\054\144\106\216" +
    "\001\001\000\014\044\136\047\135\053\130\054\144\106" +
    "\215\001\001\000\014\044\136\047\135\053\130\054\144" +
    "\106\214\001\001\000\014\044\136\047\135\053\130\054" +
    "\144\106\213\001\001\000\014\044\136\047\135\053\130" +
    "\054\144\106\212\001\001\000\014\044\136\047\135\053" +
    "\130\054\144\106\211\001\001\000\002\001\001\000\014" +
    "\044\136\047\135\053\130\054\144\106\210\001\001\000" +
    "\014\044\136\047\135\053\130\054\144\106\207\001\001" +
    "\000\014\044\136\047\135\053\130\054\144\106\206\001" +
    "\001\000\014\044\136\047\135\053\130\054\144\106\205" +
    "\001\001\000\014\044\136\047\135\053\130\054\144\106" +
    "\204\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\044" +
    "\136\047\135\053\130\054\144\066\230\106\150\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\107\236\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\044\136\047\135\053\130\054\144" +
    "\106\242\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\003\066\005\245\007\064\024\106\025\110\026\104" +
    "\031\065\032\071\033\072\034\074\035\107\036\076\037" +
    "\115\040\120\043\100\044\117\052\070\053\113\054\060" +
    "\060\075\061\112\062\102\001\001\000\054\003\246\007" +
    "\064\024\106\025\110\026\104\031\065\032\071\033\072" +
    "\034\074\035\107\036\076\037\115\040\120\043\100\044" +
    "\117\052\070\053\113\054\060\060\075\061\112\062\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
    "\253\030\251\001\001\000\002\001\001\000\010\015\261" +
    "\063\260\064\154\001\001\000\002\001\001\000\004\030" +
    "\255\001\001\000\002\001\001\000\004\015\257\001\001" +
    "\000\002\001\001\000\006\015\267\064\162\001\001\000" +
    "\002\001\001\000\014\044\136\047\135\053\130\054\144" +
    "\106\264\001\001\000\004\044\265\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\067\273\105\271\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\044\136\047\135" +
    "\053\130\054\144\065\275\066\131\106\150\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\044\136\047\135\053\130\054\144\065\301\066\131\106" +
    "\150\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\044\136\045\307\046" +
    "\310\047\135\053\130\054\144\106\311\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\044\136\046\314\047\135\053\130\054\144" +
    "\106\311\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\003\066\005\316\007\064\024\106\025\110\026\104" +
    "\031\065\032\071\033\072\034\074\035\107\036\076\037" +
    "\115\040\120\043\100\044\117\052\070\053\113\054\060" +
    "\060\075\061\112\062\102\001\001\000\054\003\246\007" +
    "\064\024\106\025\110\026\104\031\065\032\071\033\072" +
    "\034\074\035\107\036\076\037\115\040\120\043\100\044" +
    "\117\052\070\053\113\054\060\060\075\061\112\062\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\044" +
    "\136\047\135\053\130\054\144\106\322\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\044\136\047\135\053\130" +
    "\054\144\106\330\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\335" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\044" +
    "\136\047\135\053\130\054\144\106\340\001\001\000\002" +
    "\001\001\000\014\044\136\047\135\053\130\054\144\106" +
    "\342\001\001\000\002\001\001\000\010\026\346\054\344" +
    "\057\345\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\003\066\005\352\007\064\024\106\025\110\026\104\031" +
    "\065\032\071\033\072\034\074\035\107\036\076\037\115" +
    "\040\120\043\100\044\117\052\070\053\113\054\060\060" +
    "\075\061\112\062\102\001\001\000\054\003\246\007\064" +
    "\024\106\025\110\026\104\031\065\032\071\033\072\034" +
    "\074\035\107\036\076\037\115\040\120\043\100\044\117" +
    "\052\070\053\113\054\060\060\075\061\112\062\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\064\162\001\001\000\014\044\136" +
    "\047\135\053\130\054\144\106\364\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\003\066\005\367\007\064" +
    "\024\106\025\110\026\104\031\065\032\071\033\072\034" +
    "\074\035\107\036\076\037\115\040\120\043\100\044\117" +
    "\052\070\053\113\054\060\060\075\061\112\062\102\001" +
    "\001\000\054\003\246\007\064\024\106\025\110\026\104" +
    "\031\065\032\071\033\072\034\074\035\107\036\076\037" +
    "\115\040\120\043\100\044\117\052\070\053\113\054\060" +
    "\060\075\061\112\062\102\001\001\000\002\001\001\000" +
    "\014\044\136\047\135\053\130\054\144\106\372\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\003\066\005" +
    "\375\007\064\024\106\025\110\026\104\031\065\032\071" +
    "\033\072\034\074\035\107\036\076\037\115\040\120\043" +
    "\100\044\117\052\070\053\113\054\060\060\075\061\112" +
    "\062\102\001\001\000\054\003\246\007\064\024\106\025" +
    "\110\026\104\031\065\032\071\033\072\034\074\035\107" +
    "\036\076\037\115\040\120\043\100\044\117\052\070\053" +
    "\113\054\060\060\075\061\112\062\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\044\136\045\u0102\046" +
    "\310\047\135\053\130\054\144\106\311\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\041\u0109\042\u0106\001\001\000\002\001\001" +
    "\000\056\003\066\005\u010f\007\064\024\106\025\110\026" +
    "\104\031\065\032\071\033\072\034\074\035\107\036\076" +
    "\037\115\040\120\043\100\044\117\052\070\053\113\054" +
    "\060\060\075\061\112\062\102\001\001\000\014\044\136" +
    "\047\135\053\130\054\144\106\u010c\001\001\000\004\042" +
    "\u010a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\003\066\005\u010e\007\064\024\106\025" +
    "\110\026\104\031\065\032\071\033\072\034\074\035\107" +
    "\036\076\037\115\040\120\043\100\044\117\052\070\053" +
    "\113\054\060\060\075\061\112\062\102\001\001\000\054" +
    "\003\246\007\064\024\106\025\110\026\104\031\065\032" +
    "\071\033\072\034\074\035\107\036\076\037\115\040\120" +
    "\043\100\044\117\052\070\053\113\054\060\060\075\061" +
    "\112\062\102\001\001\000\054\003\246\007\064\024\106" +
    "\025\110\026\104\031\065\032\071\033\072\034\074\035" +
    "\107\036\076\037\115\040\120\043\100\044\117\052\070" +
    "\053\113\054\060\060\075\061\112\062\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\003\066\005\u0113" +
    "\007\064\024\106\025\110\026\104\031\065\032\071\033" +
    "\072\034\074\035\107\036\076\037\115\040\120\043\100" +
    "\044\117\052\070\053\113\054\060\060\075\061\112\062" +
    "\102\001\001\000\054\003\246\007\064\024\106\025\110" +
    "\026\104\031\065\032\071\033\072\034\074\035\107\036" +
    "\076\037\115\040\120\043\100\044\117\052\070\053\113" +
    "\054\060\060\075\061\112\062\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\003\066\005" +
    "\u011b\007\064\024\106\025\110\026\104\031\065\032\071" +
    "\033\072\034\074\035\107\036\076\037\115\040\120\043" +
    "\100\044\117\052\070\053\113\054\060\060\075\061\112" +
    "\062\102\001\001\000\054\003\246\007\064\024\106\025" +
    "\110\026\104\031\065\032\071\033\072\034\074\035\107" +
    "\036\076\037\115\040\120\043\100\044\117\052\070\053" +
    "\113\054\060\060\075\061\112\062\102\001\001\000\002" +
    "\001\001\000\010\020\u011f\021\053\023\051\001\001\000" +
    "\004\015\u0125\001\001\000\006\021\055\023\051\001\001" +
    "\000\004\015\u0121\001\001\000\002\001\001\000\056\003" +
    "\066\005\u0123\007\064\024\106\025\110\026\104\031\065" +
    "\032\071\033\072\034\074\035\107\036\076\037\115\040" +
    "\120\043\100\044\117\052\070\053\113\054\060\060\075" +
    "\061\112\062\102\001\001\000\054\003\246\007\064\024" +
    "\106\025\110\026\104\031\065\032\071\033\072\034\074" +
    "\035\107\036\076\037\115\040\120\043\100\044\117\052" +
    "\070\053\113\054\060\060\075\061\112\062\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\003\066\005" +
    "\u0127\007\064\024\106\025\110\026\104\031\065\032\071" +
    "\033\072\034\074\035\107\036\076\037\115\040\120\043" +
    "\100\044\117\052\070\053\113\054\060\060\075\061\112" +
    "\062\102\001\001\000\054\003\246\007\064\024\106\025" +
    "\110\026\104\031\065\032\071\033\072\034\074\035\107" +
    "\036\076\037\115\040\120\043\100\044\117\052\070\053" +
    "\113\054\060\060\075\061\112\062\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\073" +
    "\u012c\074\u0132\075\u0130\076\u012f\101\u0134\102\u0133\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\073\u012c\074\u0132\075" +
    "\u0130\076\u012f\102\u014e\001\001\000\002\001\001\000\010" +
    "\077\u0138\100\u013b\104\u013a\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\071" +
    "\u0141\072\u0140\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\071\u0144\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\044\136\047\135\053\130" +
    "\054\144\106\u0146\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\071\u0141" +
    "\072\u014b\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\044\136\047\135" +
    "\053\130\054\144\071\u0150\103\u0151\106\u0152\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\044\136\047\135\053\130\054\144\106" +
    "\u0155\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\044\136\047\135\053\130\054\144\071\u0150\103\u0158\106" +
    "\u0152\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\044\136\047\135\053\130\054\144\071" +
    "\u0150\103\u015c\106\u0152\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\004\u0162\006\044\016\041\017\043\022\032" +
    "\023\037\070\034\001\001\000\016\006\u0160\016\041\017" +
    "\043\022\032\023\037\070\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintacticoGraphik$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintacticoGraphik$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintacticoGraphik$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Errores err = Errores.getInstance();

    public void syntax_error(Symbol token) {
        err.nuevoErrorSintactico((token.left+1),(token.right+1), "Se esperaba "+token.value);
        System.out.println("Error sintactico: linea "+ (token.left+1)+" columna: "+(token.right+1)+" Lexema: "+token.value);

    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        err.nuevoErrorSintactico((s.left+1),(s.right+1), "Se esperaba "+s.value);
        System.out.println("Error sintactico: linea "+ s.left+" columna: "+s.right+" Lexema: "+s.value);

    }  

    public NodoGK nodo;

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$sintacticoGraphik$actions {


    

  private final sintacticoGraphik parser;

  /** Constructor */
  CUP$sintacticoGraphik$actions(sintacticoGraphik parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$sintacticoGraphik$do_action(
    int                        CUP$sintacticoGraphik$act_num,
    java_cup.runtime.lr_parser CUP$sintacticoGraphik$parser,
    java.util.Stack            CUP$sintacticoGraphik$stack,
    int                        CUP$sintacticoGraphik$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintacticoGraphik$result;

      /* select the action based on the action number */
      switch (CUP$sintacticoGraphik$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // AUMENTO ::= identificador decremento 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    NodoGK nodo = new NodoGK("decremento");
                    nodo.hijos.add(new NodoGK(id, idleft, idright)); 
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("AUMENTO",42, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // AUMENTO ::= identificador aumento 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    NodoGK nodo = new NodoGK("aumento");
                    nodo.hijos.add(new NodoGK(id, idleft, idright)); 
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("AUMENTO",42, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // EXPRESION ::= ACCESOBJ 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // EXPRESION ::= AUMENTO 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // EXPRESION ::= LLAMADA_HK 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // EXPRESION ::= LLAMADA_MET 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // EXPRESION ::= par_izq EXPRESION par_der 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // EXPRESION ::= menor EXPRESION 
            {
              NodoGK RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("menos");
                    nodo.hijos.add(expr);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // EXPRESION ::= caracter 
            {
              NodoGK RESULT =null;
		int caracleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int caracright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String carac = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("caracter");
                    nodo.hijos.add(new NodoGK(carac));
                    RESULT=nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // EXPRESION ::= tkn_falso 
            {
              NodoGK RESULT =null;
		int falsoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int falsoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String falso = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("bool");
                    nodo.hijos.add(new NodoGK(falso, falsoleft, falsoright));
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // EXPRESION ::= tkn_verdadero 
            {
              NodoGK RESULT =null;
		int verdaderoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int verdaderoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String verdadero = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("bool");
                    nodo.hijos.add(new NodoGK(verdadero, verdaderoleft, verdaderoright));
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // EXPRESION ::= decimal 
            {
              NodoGK RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("decimal");
                    nodo.hijos.add(new NodoGK(dec, decleft, decright));
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // EXPRESION ::= identificador LST_DIM 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int dimsleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int dimsright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK dims = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("arreglo");
                    nodo.hijos.add(new NodoGK(id, idleft, idright));
                    nodo.hijos.add(dims);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // EXPRESION ::= identificador 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("identificador");
                    nodo.hijos.add(new NodoGK(id, idleft, idright));
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // EXPRESION ::= texto 
            {
              NodoGK RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("cadena");
                    nodo.hijos.add(new NodoGK(cadena, cadenaleft, cadenaright));
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // EXPRESION ::= numero 
            {
              NodoGK RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String entero = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("entero");
                    nodo.hijos.add(new NodoGK(entero, enteroleft, enteroright));
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // EXPRESION ::= EXPRESION potencia EXPRESION 
            {
              NodoGK RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr1 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr2 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("pot");
                    nodo.hijos.add(expr1);
                    nodo.hijos.add(expr2);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // EXPRESION ::= EXPRESION div EXPRESION 
            {
              NodoGK RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr1 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr2 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("div");
                    nodo.hijos.add(expr1);
                    nodo.hijos.add(expr2);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // EXPRESION ::= EXPRESION por EXPRESION 
            {
              NodoGK RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr1 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr2 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("por");
                    nodo.hijos.add(expr1);
                    nodo.hijos.add(expr2);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // EXPRESION ::= EXPRESION menos EXPRESION 
            {
              NodoGK RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr1 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr2 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("menos");
                    nodo.hijos.add(expr1);
                    nodo.hijos.add(expr2);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // EXPRESION ::= EXPRESION mas EXPRESION 
            {
              NodoGK RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr1 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr2 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("mas");
                    nodo.hijos.add(expr1);
                    nodo.hijos.add(expr2);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // EXPRESION ::= EXPRESION mayor_igual EXPRESION 
            {
              NodoGK RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr1 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr2 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("mayorI");
                    nodo.hijos.add(expr1);
                    nodo.hijos.add(expr2);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // EXPRESION ::= EXPRESION menor_igual EXPRESION 
            {
              NodoGK RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr1 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr2 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("menorI");
                    nodo.hijos.add(expr1);
                    nodo.hijos.add(expr2);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // EXPRESION ::= EXPRESION mayor EXPRESION 
            {
              NodoGK RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr1 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr2 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("mayor");
                    nodo.hijos.add(expr1);
                    nodo.hijos.add(expr2);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // EXPRESION ::= EXPRESION menor EXPRESION 
            {
              NodoGK RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr1 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr2 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("menor");
                    nodo.hijos.add(expr1);
                    nodo.hijos.add(expr2);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // EXPRESION ::= EXPRESION diferente EXPRESION 
            {
              NodoGK RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr1 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr2 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("diferente");
                    nodo.hijos.add(expr1);
                    nodo.hijos.add(expr2);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // EXPRESION ::= EXPRESION igualacion EXPRESION 
            {
              NodoGK RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr1 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr2 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("igualacion");
                    nodo.hijos.add(expr1);
                    nodo.hijos.add(expr2);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // EXPRESION ::= tkn_not EXPRESION 
            {
              NodoGK RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr1 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("not");
                    nodo.hijos.add(expr1);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // EXPRESION ::= EXPRESION tkn_and EXPRESION 
            {
              NodoGK RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr1 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr2 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("amd");
                    nodo.hijos.add(expr1);
                    nodo.hijos.add(expr2);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // EXPRESION ::= EXPRESION tkn_xor EXPRESION 
            {
              NodoGK RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr1 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr2 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("xor");
                    nodo.hijos.add(expr1);
                    nodo.hijos.add(expr2);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // EXPRESION ::= EXPRESION tkn_or EXPRESION 
            {
              NodoGK RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr1 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr2 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("or");
                    nodo.hijos.add(expr1);
                    nodo.hijos.add(expr2);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // DONDETODO ::= tkn_dondetodo par_izq EXP par_der int_der 
            {
              NodoGK RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK exp = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		
                    NodoGK nodo = new NodoGK("DONDETODO");
                    nodo.hijos.add(exp);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("DONDETODO",60, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // DONDECADA ::= tkn_dondecada par_izq EXP par_der int_der 
            {
              NodoGK RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK exp = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		
                    NodoGK nodo = new NodoGK("DONDECADA");
                    nodo.hijos.add(exp);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("DONDECADA",59, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // DONDE ::= tkn_donde par_izq EXP par_der igual EXPRESION int_der 
            {
              NodoGK RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).right;
		NodoGK exp = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK expr = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    NodoGK nodo = new NodoGK("DONDE");
                    nodo.hijos.add(exp);
                    nodo.hijos.add(expr);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("DONDE",58, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // LST_COLUMNA ::= COLUMNA 
            {
              NodoGK RESULT =null;
		int colleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int colright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK col = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                        NodoGK nodo = new NodoGK("COLUMNAS");
                        nodo.hijos.add(col);
                        RESULT = nodo;
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_COLUMNA",56, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // LST_COLUMNA ::= LST_COLUMNA coma COLUMNA 
            {
              NodoGK RESULT =null;
		int colsleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int colsright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK cols = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int colright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK col = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                        cols.hijos.add(col);
                        RESULT = cols;
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_COLUMNA",56, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // NORMAL ::= tkn_llamar identificador par_izq LST_COLUMNA par_der 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).value;
		int colsleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int colsright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK cols = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                NodoGK nodo = new NodoGK("LLAMADA_MET_DATOS");
                nodo.hijos.add(new NodoGK(id, idleft, idright));
                nodo.hijos.add(cols);
                RESULT = nodo;
                
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("NORMAL",62, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // HASKELL ::= tkn_llamarHK identificador par_izq LST_COLUMNA par_der 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).value;
		int colsleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int colsright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK cols = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                NodoGK nodo = new NodoGK("LLAMADA_HK_DATOS");
                nodo.hijos.add(new NodoGK(id, idleft, idright));
                nodo.hijos.add(cols);
                RESULT = nodo;
                
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("HASKELL",61, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // MET_ESPECIALES ::= NORMAL 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("MET_ESPECIALES",66, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // MET_ESPECIALES ::= HASKELL 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("MET_ESPECIALES",66, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // PROCESAR ::= tkn_procesar igual MET_ESPECIALES int_der 
            {
              NodoGK RESULT =null;
		int metleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK met = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    NodoGK nodo = new NodoGK("PROCESAR");
                    nodo.hijos.add(met);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("PROCESAR",57, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // EXP ::= COLUMNA 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXP",65, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // EXP ::= EXPRESION 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXP",65, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // COLUMNA ::= tkn_columna par_izq EXPRESION par_der int_der 
            {
              NodoGK RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		
                NodoGK nodo = new NodoGK("columna");
                nodo.hijos.add(expr);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("COLUMNA",55, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SDATOS ::= DONDETODO 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SDATOS",64, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // SDATOS ::= DONDECADA 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SDATOS",64, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // SDATOS ::= DONDE 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SDATOS",64, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // SDATOS ::= PROCESAR 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SDATOS",64, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // SENT_DATOS ::= SDATOS 
            {
              NodoGK RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK dato = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("SENTENCIAS");
                    nodo.hijos.add(dato);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENT_DATOS",63, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // SENT_DATOS ::= SENT_DATOS SDATOS 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK dato = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    nodo.hijos.add(dato);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENT_DATOS",63, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // DATOS ::= tkn_vacio tkn_datos par_izq par_der llave_izq SENT_DATOS llave_der 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK sent = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                NodoGK nodo = new NodoGK("METODO");
                nodo.hijos.add(new NodoGK(id, idleft, idright));
                nodo.hijos.add(sent);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("DATOS",54, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // AARR ::= identificador LST_DIM igual EXPRESION 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).value;
		int dimsleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int dimsright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK dims = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                NodoGK nodo = new NodoGK("ASIGNA_ARR");
                nodo.hijos.add(new NodoGK(id, idleft, idright));
                nodo.hijos.add(dims);
                nodo.hijos.add(expr);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("AARR",48, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // DIMENSIONES ::= llave_izq LST_DIMENSIONES llave_der 
            {
              NodoGK RESULT =null;
		int dimsleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int dimsright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK dims = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		 RESULT = dims; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("DIMENSIONES",52, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // DIMENSIONES ::= EXPRESION 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("DIMENSIONES",52, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // LST_DIMENSIONES ::= DIMENSIONES 
            {
              NodoGK RESULT =null;
		int dimsleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int dimsright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK dims = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                            NodoGK nodo = new NodoGK("DIMENSIONES");
                            nodo.hijos.add(dims);
                            RESULT = nodo;
                        
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_DIMENSIONES",51, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // LST_DIMENSIONES ::= LST_DIMENSIONES coma DIMENSIONES 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int dimsleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int dimsright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK dims = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                            nodo.hijos.add(dims);
                            RESULT = nodo;
                        
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_DIMENSIONES",51, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // LST_DARR ::= llave_izq LST_DIMENSIONES llave_der 
            {
              NodoGK RESULT =null;
		int dimsleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int dimsright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK dims = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    NodoGK nodo = new NodoGK("LISTA");
                    nodo.hijos.add(dims);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_DARR",67, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // LST_DARR ::= LST_DARR coma llave_izq LST_DIMENSIONES llave_der 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).value;
		int dimsleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int dimsright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK dims = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    nodo.hijos.add(dims);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_DARR",67, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ASIGNA_ARR ::= LST_DARR 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIGNA_ARR",53, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ASIGNA_ARR ::= identificador 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                        NodoGK nodo = new NodoGK("identificador");
                        nodo.hijos.add(new NodoGK(id, idleft, idright));
                        RESULT = nodo;
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIGNA_ARR",53, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DIM ::= cor_izq EXPRESION cor_der 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("DIM",50, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // LST_DIM ::= DIM 
            {
              NodoGK RESULT =null;
		int dimsleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int dimsright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK dims = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                NodoGK nodo = new NodoGK("DIMS");
                nodo.hijos.add(dims);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_DIM",49, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // LST_DIM ::= LST_DIM DIM 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int dimsleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int dimsright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK dims = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                nodo.hijos.add(dims);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_DIM",49, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // DARR ::= tkn_var TIPO identificador LST_DIM VISIBILIDAD igual ASIGNA_ARR 
            {
              NodoGK RESULT =null;
		int tpoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).left;
		int tporight = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).right;
		NodoGK tpo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).value;
		int dimsleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).left;
		int dimsright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).right;
		NodoGK dims = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).value;
		int visleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int visright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK vis = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int asgleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int asgright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK asg = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                NodoGK nodo = new NodoGK("DECLARA_ASIG_ARR");
                nodo.hijos.add(tpo);
                nodo.hijos.add(new NodoGK(id, idleft, idright));
                nodo.hijos.add(dims);
                nodo.hijos.add(vis);
                nodo.hijos.add(asg);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("DARR",47, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // DARR ::= tkn_var TIPO identificador LST_DIM VISIBILIDAD 
            {
              NodoGK RESULT =null;
		int tpoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).left;
		int tporight = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).right;
		NodoGK tpo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int dimsleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int dimsright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK dims = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int visleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int visright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK vis = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                NodoGK nodo = new NodoGK("DECLARA_ARR");
                nodo.hijos.add(tpo);
                nodo.hijos.add(new NodoGK(id, idleft, idright));
                nodo.hijos.add(dims);
                nodo.hijos.add(vis);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("DARR",47, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ARREGLOS ::= AARR 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ARREGLOS",46, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ARREGLOS ::= DARR 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ARREGLOS",46, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // IMPRIMIR ::= tkn_imprimir par_izq EXPRESION par_der int_der 
            {
              NodoGK RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		
                    NodoGK nodo = new NodoGK("IMPRIMIR");
                    nodo.hijos.add(expr);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",5, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ASIG_GRAFICAR ::= llave_izq LST_DIMENSIONES llave_der 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		 RESULT = nodo;
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIG_GRAFICAR",69, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ASIG_GRAFICAR ::= identificador 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                        NodoGK nodo = new NodoGK(id, idleft, idright);
                        RESULT = nodo;
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIG_GRAFICAR",69, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // GRAFICAR ::= tkn_graphikar par_izq ASIG_GRAFICAR coma ASIG_GRAFICAR par_der int_der 
            {
              NodoGK RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).right;
		NodoGK expr1 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr2 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		
                    NodoGK nodo = new NodoGK("GRAFICAR");
                    nodo.hijos.add(expr1);
                    nodo.hijos.add(expr2);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("GRAFICAR",40, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NIVEL ::= punto LLAMADA_MET 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("NIVEL",39, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NIVEL ::= punto identificador 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 
                NodoGK nodo = new NodoGK(id, idleft, idright);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("NIVEL",39, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // LST_NIVEL ::= NIVEL 
            {
              NodoGK RESULT =null;
		int nivleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nivright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK niv = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("NIVELES");
                    nodo.hijos.add(niv);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_NIVEL",38, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // LST_NIVEL ::= LST_NIVEL NIVEL 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int nivleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nivright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK niv = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    nodo.hijos.add(niv);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_NIVEL",38, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ACCESOBJ ::= identificador LST_NIVEL 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK lst = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("ACCESOBJ");
                    nodo.hijos.add(new NodoGK(id, idleft, idright));
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ACCESOBJ",37, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // PARAM ::= EXPRESION 
            {
              NodoGK RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		RESULT = expr;
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("PARAM",36, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LST_PARAM ::= PARAM 
            {
              NodoGK RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK par = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("PARAMETROS");
                    nodo.hijos.add(par);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_PARAM",35, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LST_PARAM ::= LST_PARAM coma PARAM 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK par = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    nodo.hijos.add(par);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_PARAM",35, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LLAMADA_HK ::= tkn_llamarHK identificador par_izq par_der 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		
                    NodoGK nodo = new NodoGK("LLAMARHK");
                    nodo.hijos.add(new NodoGK(id, idleft, idright));
                    nodo.hijos.add(new NodoGK("sinparametros"));
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLAMADA_HK",41, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LLAMADA_HK ::= tkn_llamarHK identificador par_izq LST_PARAM par_der 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).value;
		int lstparleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int lstparright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK lstpar = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    NodoGK nodo = new NodoGK("LLAMARHK");
                    nodo.hijos.add(new NodoGK(id, idleft, idright));
                    nodo.hijos.add(lstpar);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLAMADA_HK",41, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LLAMADA_MET ::= tkn_llamar identificador par_izq par_der 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		
                    NodoGK nodo = new NodoGK("LLAMAR_MET");
                    nodo.hijos.add(new NodoGK(id, idleft, idright));
                    nodo.hijos.add(new NodoGK("sinparametros"));
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLAMADA_MET",34, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LLAMADA_MET ::= tkn_llamar identificador par_izq LST_PARAM par_der 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).value;
		int lstparleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int lstparright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK lstpar = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    NodoGK nodo = new NodoGK("LLAMAR_MET");
                    nodo.hijos.add(new NodoGK(id, idleft, idright));
                    nodo.hijos.add(lstpar);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLAMADA_MET",34, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // RETORNO ::= tkn_retornar int_der 
            {
              NodoGK RESULT =null;
		
                    NodoGK nodo = new NodoGK("RETORNO");
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("RETORNO",33, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // RETORNO ::= tkn_retornar EXPRESION int_der 
            {
              NodoGK RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK expr = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    NodoGK nodo = new NodoGK("RETORNO");
                    nodo.hijos.add(expr);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("RETORNO",33, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TERMINAR ::= tkn_terminar int_der 
            {
              NodoGK RESULT =null;
		
                    NodoGK nodo = new NodoGK("TERMINAR");   
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TERMINAR",29, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CONTINUAR ::= tkn_continuar int_der 
            {
              NodoGK RESULT =null;
		
                    NodoGK nodo = new NodoGK("CONTINUAR");   
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CONTINUAR",28, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // HACERMIENTRAS ::= tkn_hacer llave_izq LST_SENTENCIAS llave_der tkn_mientras par_izq EXPRESION par_der 
            {
              NodoGK RESULT =null;
		int lstsenleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).left;
		int lstsenright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).right;
		NodoGK lstsen = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK expr = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                        NodoGK nodo = new NodoGK("HACERMIENTRAS");
                        nodo.hijos.add(expr);
                        nodo.hijos.add(lstsen);
                        RESULT = nodo;
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("HACERMIENTRAS",26, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // MIENTRAS ::= tkn_mientras par_izq EXPRESION par_der llave_izq LST_SENTENCIAS llave_der 
            {
              NodoGK RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).right;
		NodoGK expr = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).value;
		int lstsenleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int lstsenright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK lstsen = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                        NodoGK nodo = new NodoGK("MIENTRAS");
                        nodo.hijos.add(expr);
                        nodo.hijos.add(lstsen);
                        RESULT = nodo;
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("MIENTRAS",25, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ACCION ::= ASIGNACION 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ACCION",45, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ACCION ::= AUMENTO 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ACCION",45, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // PARA ::= tkn_para par_izq ASIGNACION dosp EXPRESION dosp ACCION par_der llave_izq LST_SENTENCIAS llave_der 
            {
              NodoGK RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-8)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-8)).right;
		NodoGK asig = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-8)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)).right;
		NodoGK exp = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)).value;
		int accleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).left;
		int accright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).right;
		NodoGK acc = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).value;
		int lstsenleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int lstsenright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK lstsen = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                NodoGK nodo = new NodoGK("PARA");
                nodo.hijos.add(asig);
                nodo.hijos.add(exp);
                nodo.hijos.add(acc);
                nodo.hijos.add(lstsen);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("PARA",30, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-10)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CASOS ::= tkn_defecto LST_SENTENCIAS 
            {
              NodoGK RESULT =null;
		int lstsenleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int lstsenright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK lstsen = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                NodoGK nodo = new NodoGK("DEFECTO");
                nodo.hijos.add(lstsen);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CASOS",32, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CASOS ::= tkn_caso EXPRESION dosp LST_SENTENCIAS 
            {
              NodoGK RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK exp = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int lstsenleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int lstsenright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK lstsen = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                NodoGK nodo = new NodoGK("CASE");
                nodo.hijos.add(exp);
                nodo.hijos.add(lstsen);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CASOS",32, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LST_CASOS ::= CASOS 
            {
              NodoGK RESULT =null;
		int casleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int casright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK cas = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("CASOS");
                    nodo.hijos.add(cas);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_CASOS",31, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LST_CASOS ::= LST_CASOS CASOS 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int casleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int casright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK cas = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    nodo.hijos.add(cas);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_CASOS",31, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SELECCIONA ::= tkn_seleccion EXPRESION llave_izq LST_CASOS llave_der 
            {
              NodoGK RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).right;
		NodoGK expr = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK lst = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    NodoGK nodo = new NodoGK("SELECCIONA");
                    nodo.hijos.add(expr);
                    nodo.hijos.add(lst);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SELECCIONA",27, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SINO ::= SI tkn_sino llave_izq LST_SENTENCIAS llave_der 
            {
              NodoGK RESULT =null;
		int nsileft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).left;
		int nsiright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).right;
		NodoGK nsi = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK lst = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                NodoGK nodo = new NodoGK("SINO");
                nodo.hijos.add(nsi);
                nodo.hijos.add(lst);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SINO",24, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SI ::= tkn_si par_izq EXPRESION par_der llave_izq LST_SENTENCIAS llave_der 
            {
              NodoGK RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).right;
		NodoGK expr = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK lst = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                NodoGK nodo = new NodoGK("SI");
                nodo.hijos.add(expr);
                nodo.hijos.add(lst);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SI",23, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VAR ::= identificador VISIBILIDAD 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int visleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int visright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK vis = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                NodoGK nodo = new NodoGK("VAR");
                nodo.hijos.add(new NodoGK(id, idleft, idright));
                nodo.hijos.add(vis);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VAR",22, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LST_VARIABLES ::= VAR 
            {
              NodoGK RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK vars = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                        NodoGK nodo = new NodoGK("VARIABLES");
                        nodo.hijos.add(vars);
                        RESULT = nodo;
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_VARIABLES",21, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LST_VARIABLES ::= LST_VARIABLES coma VAR 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK vars = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                        nodo.hijos.add(vars);
                        RESULT = nodo;
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_VARIABLES",21, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ASIGNACION ::= identificador igual EXPRESION 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                        NodoGK nodo = new NodoGK("ASIGNACION");
                        nodo.hijos.add(new NodoGK(id, idleft, idright));
                        nodo.hijos.add(expr);
                        RESULT = nodo;
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIGNACION",20, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VARIABLES ::= tkn_var TIPO identificador VISIBILIDAD igual tkn_nuevo LLAMADA_MET int_der 
            {
              NodoGK RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)).right;
		NodoGK tip = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).value;
		int visleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).left;
		int visright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).right;
		NodoGK vis = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).value;
		int asgleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int asgright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK asg = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                        NodoGK nodo = new NodoGK("DECLARA_ASIG_OBJ");
                        nodo.hijos.add(tip);
                        nodo.hijos.add(new NodoGK(id, idleft, idright));
                        nodo.hijos.add(vis);
                        nodo.hijos.add(asg);
                        RESULT = nodo;
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VARIABLES",19, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VARIABLES ::= tkn_var TIPO identificador VISIBILIDAD igual EXPRESION 
            {
              NodoGK RESULT =null;
		int tpoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).left;
		int tporight = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).right;
		NodoGK tpo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).value;
		int visleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int visright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK vis = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                        NodoGK nodo = new NodoGK("DECLARA_ASIG_VAR");
                        nodo.hijos.add(tpo);
                        nodo.hijos.add(new NodoGK(id, idleft, idright));
                        nodo.hijos.add(vis);
                        nodo.hijos.add(expr);
                        RESULT = nodo;
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VARIABLES",19, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VARIABLES ::= tkn_var TIPO LST_VARIABLES 
            {
              NodoGK RESULT =null;
		int tpoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int tporight = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK tpo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK lst = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                        NodoGK nodo = new NodoGK("DECLARA_VAR");
                        nodo.hijos.add(tpo);
                        nodo.hijos.add(lst);
                        RESULT = nodo;
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VARIABLES",19, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION ::= VARIABLES 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("DECLARACION",18, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTENCIAS ::= ARREGLOS int_der 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIAS ::= ASIGNACION int_der 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIAS ::= DECLARACION int_der 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIAS ::= AUMENTO 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIAS ::= IMPRIMIR 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIAS ::= GRAFICAR 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIAS ::= LLAMADA_HK int_der 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIAS ::= LLAMADA_MET int_der 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIAS ::= RETORNO 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIAS ::= TERMINAR 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIAS ::= CONTINUAR 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIAS ::= HACERMIENTRAS 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIAS ::= MIENTRAS 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIAS ::= PARA 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIAS ::= SELECCIONA 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIAS ::= SINO 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIAS ::= SI 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LST_SENTENCIAS ::= SENTENCIAS 
            {
              NodoGK RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK sent = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                            NodoGK nodo = new NodoGK("SENTENCIAS");
                            nodo.hijos.add(sent);
                            RESULT = nodo;
                        
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_SENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LST_SENTENCIAS ::= LST_SENTENCIAS SENTENCIAS 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK sent = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                            nodo.hijos.add(sent);
                            RESULT = nodo;
                        
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_SENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TIPO ::= identificador 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                NodoGK nodo = new NodoGK(id, idleft, idright);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TIPO",17, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIPO ::= tkn_bool 
            {
              NodoGK RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String bool = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                NodoGK nodo = new NodoGK(bool, boolleft, boolright);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TIPO",17, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIPO ::= tkn_entero 
            {
              NodoGK RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String ent = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                NodoGK nodo = new NodoGK(ent, entleft, entright);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TIPO",17, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIPO ::= tkn_decimal 
            {
              NodoGK RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                NodoGK nodo = new NodoGK(dec, decleft, decright);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TIPO",17, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TIPO ::= tkn_caracter 
            {
              NodoGK RESULT =null;
		int carleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int carright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String car = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                NodoGK nodo = new NodoGK(car, carleft, carright);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TIPO",17, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TIPO ::= tkn_cadena 
            {
              NodoGK RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                NodoGK nodo = new NodoGK(cad, cadleft, cadright);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TIPO",17, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // MET_INICIO ::= tkn_vacio tkn_inicio par_izq par_der llave_izq LST_SENTENCIAS llave_der 
            {
              NodoGK RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK lst = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    NodoGK nodo = new NodoGK("MAIN");
                    nodo.hijos.add(lst);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("MET_INICIO",16, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PARAMETRO ::= TIPO identificador 
            {
              NodoGK RESULT =null;
		int tpoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int tporight = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK tpo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("PAR");
                    nodo.hijos.add(tpo);
                    nodo.hijos.add(new NodoGK(id, idleft, idright));
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("PARAMETRO",15, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LST_PARAMETROS ::= PARAMETRO 
            {
              NodoGK RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK par = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                            NodoGK nodo = new NodoGK("PARAMETROS");
                            nodo.hijos.add(par);
                            RESULT = nodo;
                        
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_PARAMETROS",14, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LST_PARAMETROS ::= LST_PARAMETROS PARAMETRO 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK par = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                            nodo.hijos.add(par);
                            RESULT = nodo;
                        
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_PARAMETROS",14, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FUNCION ::= TIPO identificador par_izq par_der VISIBILIDAD llave_izq LST_SENTENCIAS llave_der 
            {
              NodoGK RESULT =null;
		int tpoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-7)).left;
		int tporight = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-7)).right;
		NodoGK tpo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)).value;
		int visleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).left;
		int visright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).right;
		NodoGK vis = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK lst = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    NodoGK nodo = new NodoGK("FUNCION");
                    nodo.hijos.add(tpo);
                    nodo.hijos.add(new NodoGK(id, idleft, idright));
                    nodo.hijos.add(new NodoGK("sinparametros"));
                    nodo.hijos.add(vis);
                    nodo.hijos.add(lst);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("FUNCION",13, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FUNCION ::= TIPO identificador par_izq LST_PARAMETROS par_der VISIBILIDAD llave_izq LST_SENTENCIAS llave_der 
            {
              NodoGK RESULT =null;
		int tpoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-8)).left;
		int tporight = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-8)).right;
		NodoGK tpo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-7)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).right;
		NodoGK par = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).value;
		int visleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).left;
		int visright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).right;
		NodoGK vis = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK lst = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    NodoGK nodo = new NodoGK("FUNCION");
                    nodo.hijos.add(tpo);
                    nodo.hijos.add(new NodoGK(id, idleft, idright));
                    nodo.hijos.add(par);
                    nodo.hijos.add(vis);
                    nodo.hijos.add(lst);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("FUNCION",13, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-8)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // METODO ::= tkn_vacio identificador par_izq par_der VISIBILIDAD llave_izq LST_SENTENCIAS llave_der 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)).value;
		int visleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).left;
		int visright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).right;
		NodoGK vis = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK lst = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    NodoGK nodo = new NodoGK("METODO");
                    nodo.hijos.add(new NodoGK(id, idleft, idright));
                    nodo.hijos.add(new NodoGK("sinparametros"));
                    nodo.hijos.add(vis);
                    nodo.hijos.add(lst);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("METODO",12, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // METODO ::= tkn_vacio identificador par_izq LST_PARAMETROS par_der VISIBILIDAD llave_izq LST_SENTENCIAS llave_der 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-7)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).right;
		NodoGK par = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).value;
		int visleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).left;
		int visright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).right;
		NodoGK vis = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK lst = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    NodoGK nodo = new NodoGK("METODO");
                    nodo.hijos.add(new NodoGK(id, idleft, idright));
                    nodo.hijos.add(par);
                    nodo.hijos.add(vis);
                    nodo.hijos.add(lst);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("METODO",12, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-8)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTS ::= DATOS 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTS",4, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTS ::= MET_INICIO 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTS",4, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTS ::= FUNCION 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTS",4, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTS ::= METODO 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTS",4, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LST_SEN ::= SENTS 
            {
              NodoGK RESULT =null;
		int senleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int senright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK sen = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("CUERPO");
                    nodo.hijos.add(sen);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_SEN",2, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LST_SEN ::= LST_SEN SENTS 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int senleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int senright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK sen = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    nodo.hijos.add(sen);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_SEN",2, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VISIBILIDAD ::= 
            {
              NodoGK RESULT =null;
		
                        NodoGK nodo = new NodoGK("publico");
                        RESULT = nodo; 
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",11, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VISIBILIDAD ::= dosp tkn_protegido 
            {
              NodoGK RESULT =null;
		int proleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int proright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String pro = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                        NodoGK nodo = new NodoGK(pro, proleft, proright);
                        RESULT = nodo; 
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",11, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VISIBILIDAD ::= dosp tkn_privado 
            {
              NodoGK RESULT =null;
		int prileft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int priright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String pri = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                        NodoGK nodo = new NodoGK(pri, prileft, priright);
                        RESULT = nodo; 
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",11, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VISIBILIDAD ::= dosp tkn_publico 
            {
              NodoGK RESULT =null;
		int publeft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int pubright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String pub = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                        NodoGK nodo = new NodoGK(pub, publeft, pubright);
                        RESULT = nodo; 
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",11, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CUERPO ::= tkn_als identificador tkn_hereda identificador VISIBILIDAD llave_izq LST_SEN llave_der 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).value;
		int visleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).left;
		int visright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).right;
		NodoGK vis = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK lst = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                NodoGK nodo = new NodoGK("ALS");
                nodo.hijos.add(new NodoGK(id, idleft, idright));
                nodo.hijos.add(new NodoGK(id2, id2left, id2right));
                nodo.hijos.add(vis);
                nodo.hijos.add(lst);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",8, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CUERPO ::= tkn_als identificador VISIBILIDAD llave_izq LST_SEN llave_der 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).value;
		int visleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).left;
		int visright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).right;
		NodoGK vis = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK lst = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                NodoGK nodo = new NodoGK("ALS");
                nodo.hijos.add(new NodoGK(id, idleft, idright));
                nodo.hijos.add(vis);
                nodo.hijos.add(lst);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",8, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LST_CUERPO ::= CUERPO 
            {
              NodoGK RESULT =null;
		int culeft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int curight = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK cu = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("CLASES");
                    nodo.hijos.add(cu);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_CUERPO",70, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LST_CUERPO ::= LST_CUERPO CUERPO 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int culeft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int curight = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK cu = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    nodo.hijos.add(cu);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_CUERPO",70, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LLAMADAS ::= tkn_incluirHK identificador int_der 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    NodoGK nodo = new NodoGK(id, idleft, idright);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLAMADAS",10, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LLAMADASHK ::= LLAMADAS 
            {
              NodoGK RESULT =null;
		int llamadaleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int llamadaright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK llamada = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("LLAMADASHK");
                    nodo.hijos.add(llamada);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLAMADASHK",7, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LLAMADASHK ::= LLAMADASHK LLAMADAS 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int llamadaleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int llamadaright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK llamada = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    nodo.hijos.add(llamada);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLAMADASHK",7, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IMPORTAR ::= tkn_importar nombreArchivo int_der 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    NodoGK nodo = new NodoGK(id, idleft, idright);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("IMPORTAR",9, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LST_IMPORTAR ::= IMPORTAR 
            {
              NodoGK RESULT =null;
		int impleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int impright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK imp = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                        NodoGK nodo = new NodoGK("IMPORTS");
                        nodo.hijos.add(imp);
                        RESULT = nodo;
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_IMPORTAR",6, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LST_IMPORTAR ::= LST_IMPORTAR IMPORTAR 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int impleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int impright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK imp = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                        nodo.hijos.add(imp);
                        RESULT = nodo; 
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_IMPORTAR",6, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LLAMARHK ::= 
            {
              NodoGK RESULT =null;
		
                    NodoGK nodo = new NodoGK("LLAMADASHK");
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLAMARHK",44, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LLAMARHK ::= LLAMADASHK 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo;
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLAMARHK",44, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IMPORTS ::= 
            {
              NodoGK RESULT =null;
		
                    NodoGK nodo = new NodoGK("IMPORTS");
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("IMPORTS",43, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // IMPORTS ::= LST_IMPORTAR 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo;
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("IMPORTS",43, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= IMPORTS LLAMARHK LST_CUERPO 
            {
              NodoGK RESULT =null;
		int impleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int impright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK imp = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int llamleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int llamright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK llam = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int cueleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int cueright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK cue = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("GRAPHIK");
                    nodo.hijos.add(imp);
                    nodo.hijos.add(llam);
                    nodo.hijos.add(cue);
                    parser.nodo=nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK start_val = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		RESULT = start_val;
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintacticoGraphik$parser.done_parsing();
          return CUP$sintacticoGraphik$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

