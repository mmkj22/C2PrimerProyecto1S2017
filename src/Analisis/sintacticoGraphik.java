
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Mar 31 20:53:45 CST 2017
//----------------------------------------------------

package Analisis;

import java_cup.runtime.*;
import java.io.*;
import Graphik.*;
import Errores.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Mar 31 20:53:45 CST 2017
  */
public class sintacticoGraphik extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public sintacticoGraphik() {super();}

  /** Constructor which sets the default scanner. */
  public sintacticoGraphik(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintacticoGraphik(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\260\000\002\002\004\000\002\002\005\000\002\054" +
    "\003\000\002\054\002\000\002\055\003\000\002\055\002" +
    "\000\002\010\004\000\002\010\003\000\002\013\005\000" +
    "\002\011\004\000\002\011\003\000\002\014\005\000\002" +
    "\103\004\000\002\103\003\000\002\012\010\000\002\012" +
    "\012\000\002\015\004\000\002\015\004\000\002\015\004" +
    "\000\002\015\002\000\002\004\004\000\002\004\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\004\000\002\006\004\000\002\016" +
    "\013\000\002\016\012\000\002\017\013\000\002\017\012" +
    "\000\002\020\005\000\002\020\003\000\002\021\004\000" +
    "\002\022\011\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\005\004\000\002\005\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\004\000\002\003" +
    "\004\000\002\003\003\000\002\003\003\000\002\003\005" +
    "\000\002\003\005\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\024\003\000\002" +
    "\025\005\000\002\025\010\000\002\025\013\000\002\026" +
    "\005\000\002\026\010\000\002\026\005\000\002\026\010" +
    "\000\002\027\005\000\002\027\003\000\002\030\004\000" +
    "\002\031\011\000\002\032\007\000\002\035\007\000\002" +
    "\041\004\000\002\041\003\000\002\042\006\000\002\042" +
    "\005\000\002\040\015\000\002\105\007\000\002\105\003" +
    "\000\002\056\004\000\002\056\004\000\002\056\003\000" +
    "\002\033\011\000\002\034\012\000\002\036\004\000\002" +
    "\037\004\000\002\043\005\000\002\043\004\000\002\044" +
    "\007\000\002\044\006\000\002\044\006\000\002\053\007" +
    "\000\002\053\006\000\002\045\005\000\002\045\003\000" +
    "\002\046\003\000\002\104\005\000\002\104\006\000\002" +
    "\047\004\000\002\047\005\000\002\050\004\000\002\050" +
    "\003\000\002\051\004\000\002\051\004\000\002\051\005" +
    "\000\002\052\011\000\002\007\007\000\002\007\007\000" +
    "\002\057\003\000\002\057\003\000\002\060\007\000\002" +
    "\060\011\000\002\062\004\000\002\062\003\000\002\063" +
    "\005\000\002\061\006\000\002\064\011\000\002\075\004" +
    "\000\002\075\003\000\002\076\003\000\002\106\003\000" +
    "\002\106\003\000\002\106\003\000\002\065\006\000\002" +
    "\077\003\000\002\077\003\000\002\067\007\000\002\100" +
    "\003\000\002\100\003\000\002\100\003\000\002\073\007" +
    "\000\002\074\007\000\002\066\005\000\002\066\003\000" +
    "\002\070\011\000\002\071\007\000\002\072\007\000\002" +
    "\102\005\000\002\102\005\000\002\102\005\000\002\102" +
    "\004\000\002\102\005\000\002\102\005\000\002\102\005" +
    "\000\002\102\005\000\002\102\005\000\002\102\005\000" +
    "\002\102\005\000\002\102\005\000\002\102\005\000\002" +
    "\102\005\000\002\102\005\000\002\102\003\000\002\102" +
    "\003\000\002\102\003\000\002\102\004\000\002\102\003" +
    "\000\002\102\003\000\002\102\003\000\002\102\003\000" +
    "\002\102\004\000\002\102\005\000\002\102\003\000\002" +
    "\102\003\000\002\102\004\000\002\102\004\000\002\102" +
    "\003\000\002\102\003\000\002\102\005\000\002\101\005" +
    "\000\002\101\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0191\000\010\024\004\025\ufffe\034\ufffe\001\002\000" +
    "\004\115\u0192\001\002\000\010\024\004\025\uffff\034\uffff" +
    "\001\002\000\010\024\ufffa\025\ufffa\034\ufffa\001\002\000" +
    "\004\002\u0190\001\002\000\006\025\ufffc\034\014\001\002" +
    "\000\006\025\ufffd\034\014\001\002\000\004\025\020\001" +
    "\002\000\006\025\ufff7\034\ufff7\001\002\000\004\006\015" +
    "\001\002\000\004\075\016\001\002\000\006\025\ufff6\034" +
    "\ufff6\001\002\000\006\002\000\025\020\001\002\000\004" +
    "\006\022\001\002\000\006\002\ufff4\025\ufff4\001\002\000" +
    "\010\026\025\065\uffee\113\023\001\002\000\010\021\u018d" +
    "\022\u018b\023\u018c\001\002\000\004\065\u0188\001\002\000" +
    "\004\006\026\001\002\000\006\065\uffee\113\023\001\002" +
    "\000\004\065\030\001\002\000\022\006\053\013\032\014" +
    "\052\015\031\016\037\017\046\020\047\027\044\001\002" +
    "\000\004\006\uffdc\001\002\000\004\006\uffda\001\002\000" +
    "\024\006\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9" +
    "\020\uffe9\027\uffe9\066\uffe9\001\002\000\024\006\uffe8\013" +
    "\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\027\uffe8" +
    "\066\uffe8\001\002\000\004\075\uff90\001\002\000\004\075" +
    "\u0187\001\002\000\004\006\uffdd\001\002\000\024\006\053" +
    "\013\032\014\052\015\031\016\037\017\046\020\047\027" +
    "\044\066\u0185\001\002\000\004\006\u0178\001\002\000\024" +
    "\006\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020" +
    "\uffec\027\uffec\066\uffec\001\002\000\004\075\uffc2\001\002" +
    "\000\016\006\370\013\032\014\052\015\031\016\037\017" +
    "\046\001\002\000\024\006\uffeb\013\uffeb\014\uffeb\015\uffeb" +
    "\016\uffeb\017\uffeb\020\uffeb\027\uffeb\066\uffeb\001\002\000" +
    "\004\006\uffd9\001\002\000\010\006\215\033\216\051\214" +
    "\001\002\000\004\075\uff8f\001\002\000\004\075\213\001" +
    "\002\000\004\006\uffdb\001\002\000\006\006\uffd8\063\055" +
    "\001\002\000\024\006\uffea\013\uffea\014\uffea\015\uffea\016" +
    "\uffea\017\uffea\020\uffea\027\uffea\066\uffea\001\002\000\034" +
    "\004\072\005\065\006\103\007\066\010\075\011\100\012" +
    "\067\032\076\035\064\061\074\065\073\070\077\101\101" +
    "\001\002\000\006\063\055\112\060\001\002\000\066\062" +
    "\uff8b\063\uff8b\064\uff8b\065\uff8b\066\uff8b\067\uff8b\070\uff8b" +
    "\071\uff8b\072\uff8b\073\uff8b\074\uff8b\075\uff8b\076\uff8b\077" +
    "\uff8b\100\uff8b\102\uff8b\103\uff8b\104\uff8b\105\uff8b\106\uff8b" +
    "\107\uff8b\110\uff8b\111\uff8b\112\uff8b\113\uff8b\114\uff8b\001" +
    "\002\000\034\004\072\005\065\006\103\007\066\010\075" +
    "\011\100\012\067\032\076\035\064\061\074\065\073\070" +
    "\077\101\101\001\002\000\066\062\uff8c\063\uff8c\064\uff8c" +
    "\065\uff8c\066\uff8c\067\uff8c\070\uff8c\071\uff8c\072\uff8c\073" +
    "\uff8c\074\uff8c\075\uff8c\076\uff8c\077\uff8c\100\uff8c\102\uff8c" +
    "\103\uff8c\104\uff8c\105\uff8c\106\uff8c\107\uff8c\110\uff8c\111" +
    "\uff8c\112\uff8c\113\uff8c\114\uff8c\001\002\000\060\062\uff59" +
    "\064\uff59\065\uff59\066\uff59\067\uff59\070\uff59\071\uff59\072" +
    "\uff59\073\uff59\074\uff59\075\uff59\076\uff59\077\uff59\100\uff59" +
    "\102\uff59\103\uff59\104\uff59\105\uff59\106\uff59\107\uff59\110" +
    "\uff59\111\uff59\113\uff59\001\002\000\060\062\uff55\064\uff55" +
    "\065\uff55\066\uff55\067\uff55\070\uff55\071\uff55\072\uff55\073" +
    "\uff55\074\uff55\075\uff55\076\uff55\077\uff55\100\uff55\102\uff55" +
    "\103\uff55\104\uff55\105\uff55\106\uff55\107\uff55\110\uff55\111" +
    "\uff55\113\uff55\001\002\000\004\006\204\001\002\000\060" +
    "\062\uff63\064\uff63\065\uff63\066\uff63\067\uff63\070\uff63\071" +
    "\uff63\072\uff63\073\uff63\074\uff63\075\uff63\076\uff63\077\uff63" +
    "\100\uff63\102\uff63\103\uff63\104\uff63\105\uff63\106\uff63\107" +
    "\uff63\110\uff63\111\uff63\113\uff63\001\002\000\060\062\uff60" +
    "\064\uff60\065\uff60\066\uff60\067\uff60\070\uff60\071\uff60\072" +
    "\uff60\073\uff60\074\uff60\075\uff60\076\uff60\077\uff60\100\uff60" +
    "\102\uff60\103\uff60\104\uff60\105\uff60\106\uff60\107\uff60\110" +
    "\uff60\111\uff60\113\uff60\001\002\000\060\062\uff5e\064\uff5e" +
    "\065\uff5e\066\uff5e\067\uff5e\070\uff5e\071\uff5e\072\uff5e\073" +
    "\uff5e\074\uff5e\075\uff5e\076\uff5e\077\uff5e\100\uff5e\102\uff5e" +
    "\103\uff5e\104\uff5e\105\uff5e\106\uff5e\107\uff5e\110\uff5e\111" +
    "\uff5e\113\uff5e\001\002\000\060\062\uff56\064\uff56\065\uff56" +
    "\066\uff56\067\uff56\070\uff56\071\uff56\072\uff56\073\uff56\074" +
    "\uff56\075\uff56\076\uff56\077\uff56\100\uff56\102\uff56\103\uff56" +
    "\104\uff56\105\uff56\106\uff56\107\uff56\110\uff56\111\uff56\113" +
    "\uff56\001\002\000\060\062\uff5a\064\uff5a\065\uff5a\066\uff5a" +
    "\067\uff5a\070\uff5a\071\uff5a\072\uff5a\073\uff5a\074\uff5a\075" +
    "\uff5a\076\uff5a\077\uff5a\100\uff5a\102\uff5a\103\uff5a\104\uff5a" +
    "\105\uff5a\106\uff5a\107\uff5a\110\uff5a\111\uff5a\113\uff5a\001" +
    "\002\000\060\062\uff64\064\uff64\065\uff64\066\uff64\067\uff64" +
    "\070\uff64\071\uff64\072\uff64\073\uff64\074\uff64\075\uff64\076" +
    "\uff64\077\uff64\100\uff64\102\uff64\103\uff64\104\uff64\105\uff64" +
    "\106\uff64\107\uff64\110\uff64\111\uff64\113\uff64\001\002\000" +
    "\034\004\072\005\065\006\103\007\066\010\075\011\100" +
    "\012\067\032\076\035\064\061\074\065\073\070\077\101" +
    "\101\001\002\000\034\004\072\005\065\006\103\007\066" +
    "\010\075\011\100\012\067\032\076\035\064\061\074\065" +
    "\073\070\077\101\101\001\002\000\060\062\uff5d\064\uff5d" +
    "\065\uff5d\066\uff5d\067\uff5d\070\uff5d\071\uff5d\072\uff5d\073" +
    "\uff5d\074\uff5d\075\uff5d\076\uff5d\077\uff5d\100\uff5d\102\uff5d" +
    "\103\uff5d\104\uff5d\105\uff5d\106\uff5d\107\uff5d\110\uff5d\111" +
    "\uff5d\113\uff5d\001\002\000\006\006\165\051\164\001\002" +
    "\000\034\004\072\005\065\006\103\007\066\010\075\011" +
    "\100\012\067\032\076\035\064\061\074\065\073\070\077" +
    "\101\101\001\002\000\060\062\uff5f\064\uff5f\065\uff5f\066" +
    "\uff5f\067\uff5f\070\uff5f\071\uff5f\072\uff5f\073\uff5f\074\uff5f" +
    "\075\uff5f\076\uff5f\077\uff5f\100\uff5f\102\uff5f\103\uff5f\104" +
    "\uff5f\105\uff5f\106\uff5f\107\uff5f\110\uff5f\111\uff5f\113\uff5f" +
    "\001\002\000\034\004\072\005\065\006\103\007\066\010" +
    "\075\011\100\012\067\032\076\035\064\061\074\065\073" +
    "\070\077\101\101\001\002\000\044\067\137\070\124\071" +
    "\122\072\121\073\134\075\uff89\076\130\077\140\100\135" +
    "\102\136\103\125\104\133\105\127\106\132\107\126\110" +
    "\123\111\131\001\002\000\066\061\104\062\uff62\063\055" +
    "\064\uff62\065\uff62\066\uff62\067\uff62\070\uff62\071\uff62\072" +
    "\uff62\073\uff62\074\uff62\075\uff62\076\uff62\077\uff62\100\uff62" +
    "\102\uff62\103\uff62\104\uff62\105\uff62\106\uff62\107\uff62\110" +
    "\uff62\111\uff62\113\uff62\114\105\001\002\000\036\004\072" +
    "\005\065\006\103\007\066\010\075\011\100\012\067\032" +
    "\076\035\064\061\074\062\115\065\073\070\077\101\101" +
    "\001\002\000\004\006\112\001\002\000\062\062\uff61\063" +
    "\055\064\uff61\065\uff61\066\uff61\067\uff61\070\uff61\071\uff61" +
    "\072\uff61\073\uff61\074\uff61\075\uff61\076\uff61\077\uff61\100" +
    "\uff61\102\uff61\103\uff61\104\uff61\105\uff61\106\uff61\107\uff61" +
    "\110\uff61\111\uff61\113\uff61\001\002\000\064\062\uff9a\064" +
    "\uff9a\065\uff9a\066\uff9a\067\uff9a\070\uff9a\071\uff9a\072\uff9a" +
    "\073\uff9a\074\uff9a\075\uff9a\076\uff9a\077\uff9a\100\uff9a\102" +
    "\uff9a\103\uff9a\104\uff9a\105\uff9a\106\uff9a\107\uff9a\110\uff9a" +
    "\111\uff9a\112\uff9a\113\uff9a\114\105\001\002\000\064\062" +
    "\uff97\064\uff97\065\uff97\066\uff97\067\uff97\070\uff97\071\uff97" +
    "\072\uff97\073\uff97\074\uff97\075\uff97\076\uff97\077\uff97\100" +
    "\uff97\102\uff97\103\uff97\104\uff97\105\uff97\106\uff97\107\uff97" +
    "\110\uff97\111\uff97\112\uff97\113\uff97\114\uff97\001\002\000" +
    "\064\062\uff98\064\uff98\065\uff98\066\uff98\067\uff98\070\uff98" +
    "\071\uff98\072\uff98\073\uff98\074\uff98\075\uff98\076\uff98\077" +
    "\uff98\100\uff98\102\uff98\103\uff98\104\uff98\105\uff98\106\uff98" +
    "\107\uff98\110\uff98\111\uff98\112\uff98\113\uff98\114\uff98\001" +
    "\002\000\070\061\104\062\uff96\063\055\064\uff96\065\uff96" +
    "\066\uff96\067\uff96\070\uff96\071\uff96\072\uff96\073\uff96\074" +
    "\uff96\075\uff96\076\uff96\077\uff96\100\uff96\102\uff96\103\uff96" +
    "\104\uff96\105\uff96\106\uff96\107\uff96\110\uff96\111\uff96\112" +
    "\uff96\113\uff96\114\uff96\001\002\000\064\062\uff95\064\uff95" +
    "\065\uff95\066\uff95\067\uff95\070\uff95\071\uff95\072\uff95\073" +
    "\uff95\074\uff95\075\uff95\076\uff95\077\uff95\100\uff95\102\uff95" +
    "\103\uff95\104\uff95\105\uff95\106\uff95\107\uff95\110\uff95\111" +
    "\uff95\112\uff95\113\uff95\114\uff95\001\002\000\066\062\uff94" +
    "\063\055\064\uff94\065\uff94\066\uff94\067\uff94\070\uff94\071" +
    "\uff94\072\uff94\073\uff94\074\uff94\075\uff94\076\uff94\077\uff94" +
    "\100\uff94\102\uff94\103\uff94\104\uff94\105\uff94\106\uff94\107" +
    "\uff94\110\uff94\111\uff94\112\uff94\113\uff94\114\uff94\001\002" +
    "\000\064\062\uff9c\064\uff9c\065\uff9c\066\uff9c\067\uff9c\070" +
    "\uff9c\071\uff9c\072\uff9c\073\uff9c\074\uff9c\075\uff9c\076\uff9c" +
    "\077\uff9c\100\uff9c\102\uff9c\103\uff9c\104\uff9c\105\uff9c\106" +
    "\uff9c\107\uff9c\110\uff9c\111\uff9c\112\uff9c\113\uff9c\114\uff9c" +
    "\001\002\000\006\062\160\074\157\001\002\000\006\062" +
    "\uff9e\074\uff9e\001\002\000\046\062\uff9d\067\137\070\124" +
    "\071\122\072\121\073\134\074\uff9d\076\130\077\140\100" +
    "\135\102\136\103\125\104\133\105\127\106\132\107\126" +
    "\110\123\111\131\001\002\000\034\004\072\005\065\006" +
    "\103\007\066\010\075\011\100\012\067\032\076\035\064" +
    "\061\074\065\073\070\077\101\101\001\002\000\034\004" +
    "\072\005\065\006\103\007\066\010\075\011\100\012\067" +
    "\032\076\035\064\061\074\065\073\070\077\101\101\001" +
    "\002\000\060\062\uff58\064\uff58\065\uff58\066\uff58\067\uff58" +
    "\070\uff58\071\uff58\072\uff58\073\uff58\074\uff58\075\uff58\076" +
    "\uff58\077\uff58\100\uff58\102\uff58\103\uff58\104\uff58\105\uff58" +
    "\106\uff58\107\uff58\110\uff58\111\uff58\113\uff58\001\002\000" +
    "\034\004\072\005\065\006\103\007\066\010\075\011\100" +
    "\012\067\032\076\035\064\061\074\065\073\070\077\101" +
    "\101\001\002\000\034\004\072\005\065\006\103\007\066" +
    "\010\075\011\100\012\067\032\076\035\064\061\074\065" +
    "\073\070\077\101\101\001\002\000\034\004\072\005\065" +
    "\006\103\007\066\010\075\011\100\012\067\032\076\035" +
    "\064\061\074\065\073\070\077\101\101\001\002\000\034" +
    "\004\072\005\065\006\103\007\066\010\075\011\100\012" +
    "\067\032\076\035\064\061\074\065\073\070\077\101\101" +
    "\001\002\000\034\004\072\005\065\006\103\007\066\010" +
    "\075\011\100\012\067\032\076\035\064\061\074\065\073" +
    "\070\077\101\101\001\002\000\060\062\uff57\064\uff57\065" +
    "\uff57\066\uff57\067\uff57\070\uff57\071\uff57\072\uff57\073\uff57" +
    "\074\uff57\075\uff57\076\uff57\077\uff57\100\uff57\102\uff57\103" +
    "\uff57\104\uff57\105\uff57\106\uff57\107\uff57\110\uff57\111\uff57" +
    "\113\uff57\001\002\000\034\004\072\005\065\006\103\007" +
    "\066\010\075\011\100\012\067\032\076\035\064\061\074" +
    "\065\073\070\077\101\101\001\002\000\034\004\072\005" +
    "\065\006\103\007\066\010\075\011\100\012\067\032\076" +
    "\035\064\061\074\065\073\070\077\101\101\001\002\000" +
    "\034\004\072\005\065\006\103\007\066\010\075\011\100" +
    "\012\067\032\076\035\064\061\074\065\073\070\077\101" +
    "\101\001\002\000\034\004\072\005\065\006\103\007\066" +
    "\010\075\011\100\012\067\032\076\035\064\061\074\065" +
    "\073\070\077\101\101\001\002\000\034\004\072\005\065" +
    "\006\103\007\066\010\075\011\100\012\067\032\076\035" +
    "\064\061\074\065\073\070\077\101\101\001\002\000\034" +
    "\004\072\005\065\006\103\007\066\010\075\011\100\012" +
    "\067\032\076\035\064\061\074\065\073\070\077\101\101" +
    "\001\002\000\034\004\072\005\065\006\103\007\066\010" +
    "\075\011\100\012\067\032\076\035\064\061\074\065\073" +
    "\070\077\101\101\001\002\000\060\062\uff72\064\uff72\065" +
    "\uff72\066\uff72\067\137\070\124\071\122\072\121\073\134" +
    "\074\uff72\075\uff72\076\uff72\077\uff72\100\135\102\136\103" +
    "\125\104\133\105\127\106\132\107\126\110\123\111\131" +
    "\113\uff72\001\002\000\060\062\uff69\064\uff69\065\uff69\066" +
    "\uff69\067\uff69\070\uff69\071\122\072\121\073\134\074\uff69" +
    "\075\uff69\076\uff69\077\uff69\100\uff69\102\uff69\103\uff69\104" +
    "\uff69\105\uff69\106\uff69\107\uff69\110\123\111\131\113\uff69" +
    "\001\002\000\060\062\uff6c\064\uff6c\065\uff6c\066\uff6c\067" +
    "\137\070\124\071\122\072\121\073\134\074\uff6c\075\uff6c" +
    "\076\uff6c\077\uff6c\100\uff6c\102\uff6c\103\uff6c\104\uff6c\105" +
    "\uff6c\106\uff6c\107\uff6c\110\123\111\131\113\uff6c\001\002" +
    "\000\060\062\uff71\064\uff71\065\uff71\066\uff71\067\137\070" +
    "\124\071\122\072\121\073\134\074\uff71\075\uff71\076\uff71" +
    "\077\uff71\100\uff71\102\136\103\125\104\133\105\127\106" +
    "\132\107\126\110\123\111\131\113\uff71\001\002\000\060" +
    "\062\uff67\064\uff67\065\uff67\066\uff67\067\uff67\070\uff67\071" +
    "\uff67\072\121\073\uff67\074\uff67\075\uff67\076\uff67\077\uff67" +
    "\100\uff67\102\uff67\103\uff67\104\uff67\105\uff67\106\uff67\107" +
    "\uff67\110\123\111\131\113\uff67\001\002\000\060\062\uff6a" +
    "\064\uff6a\065\uff6a\066\uff6a\067\137\070\124\071\122\072" +
    "\121\073\134\074\uff6a\075\uff6a\076\uff6a\077\uff6a\100\uff6a" +
    "\102\uff6a\103\uff6a\104\uff6a\105\uff6a\106\uff6a\107\uff6a\110" +
    "\123\111\131\113\uff6a\001\002\000\060\062\uff6f\064\uff6f" +
    "\065\uff6f\066\uff6f\067\137\070\124\071\122\072\121\073" +
    "\134\074\uff6f\075\uff6f\076\uff6f\077\uff6f\100\uff6f\102\136" +
    "\103\125\104\133\105\127\106\uff6f\107\uff6f\110\123\111" +
    "\131\113\uff6f\001\002\000\060\062\uff73\064\uff73\065\uff73" +
    "\066\uff73\067\137\070\124\071\122\072\121\073\134\074" +
    "\uff73\075\uff73\076\uff73\077\140\100\135\102\136\103\125" +
    "\104\133\105\127\106\132\107\126\110\123\111\131\113" +
    "\uff73\001\002\000\060\062\uff6b\064\uff6b\065\uff6b\066\uff6b" +
    "\067\137\070\124\071\122\072\121\073\134\074\uff6b\075" +
    "\uff6b\076\uff6b\077\uff6b\100\uff6b\102\uff6b\103\uff6b\104\uff6b" +
    "\105\uff6b\106\uff6b\107\uff6b\110\123\111\131\113\uff6b\001" +
    "\002\000\060\062\uff6e\064\uff6e\065\uff6e\066\uff6e\067\137" +
    "\070\124\071\122\072\121\073\134\074\uff6e\075\uff6e\076" +
    "\uff6e\077\uff6e\100\uff6e\102\136\103\125\104\133\105\127" +
    "\106\uff6e\107\uff6e\110\123\111\131\113\uff6e\001\002\000" +
    "\060\062\uff6d\064\uff6d\065\uff6d\066\uff6d\067\137\070\124" +
    "\071\122\072\121\073\134\074\uff6d\075\uff6d\076\uff6d\077" +
    "\uff6d\100\uff6d\102\uff6d\103\uff6d\104\uff6d\105\uff6d\106\uff6d" +
    "\107\uff6d\110\123\111\131\113\uff6d\001\002\000\060\062" +
    "\uff68\064\uff68\065\uff68\066\uff68\067\uff68\070\uff68\071\122" +
    "\072\121\073\134\074\uff68\075\uff68\076\uff68\077\uff68\100" +
    "\uff68\102\uff68\103\uff68\104\uff68\105\uff68\106\uff68\107\uff68" +
    "\110\123\111\131\113\uff68\001\002\000\060\062\uff66\064" +
    "\uff66\065\uff66\066\uff66\067\uff66\070\uff66\071\uff66\072\121" +
    "\073\uff66\074\uff66\075\uff66\076\uff66\077\uff66\100\uff66\102" +
    "\uff66\103\uff66\104\uff66\105\uff66\106\uff66\107\uff66\110\123" +
    "\111\131\113\uff66\001\002\000\060\062\uff65\064\uff65\065" +
    "\uff65\066\uff65\067\uff65\070\uff65\071\uff65\072\121\073\uff65" +
    "\074\uff65\075\uff65\076\uff65\077\uff65\100\uff65\102\uff65\103" +
    "\uff65\104\uff65\105\uff65\106\uff65\107\uff65\110\123\111\131" +
    "\113\uff65\001\002\000\034\004\072\005\065\006\103\007" +
    "\066\010\075\011\100\012\067\032\076\035\064\061\074" +
    "\065\073\070\077\101\101\001\002\000\064\062\uff9b\064" +
    "\uff9b\065\uff9b\066\uff9b\067\uff9b\070\uff9b\071\uff9b\072\uff9b" +
    "\073\uff9b\074\uff9b\075\uff9b\076\uff9b\077\uff9b\100\uff9b\102" +
    "\uff9b\103\uff9b\104\uff9b\105\uff9b\106\uff9b\107\uff9b\110\uff9b" +
    "\111\uff9b\112\uff9b\113\uff9b\114\uff9b\001\002\000\006\062" +
    "\uff9f\074\uff9f\001\002\000\060\062\uff70\064\uff70\065\uff70" +
    "\066\uff70\067\137\070\124\071\122\072\121\073\134\074" +
    "\uff70\075\uff70\076\uff70\077\uff70\100\uff70\102\136\103\125" +
    "\104\133\105\127\106\132\107\126\110\123\111\131\113" +
    "\uff70\001\002\000\060\062\uff5c\064\uff5c\065\uff5c\066\uff5c" +
    "\067\uff5c\070\uff5c\071\122\072\121\073\134\074\uff5c\075" +
    "\uff5c\076\uff5c\077\uff5c\100\uff5c\102\uff5c\103\uff5c\104\uff5c" +
    "\105\uff5c\106\uff5c\107\uff5c\110\123\111\131\113\uff5c\001" +
    "\002\000\004\061\173\001\002\000\006\061\166\114\105" +
    "\001\002\000\036\004\072\005\065\006\103\007\066\010" +
    "\075\011\100\012\067\032\076\035\064\061\074\062\170" +
    "\065\073\070\077\101\101\001\002\000\064\062\uff99\064" +
    "\uff99\065\uff99\066\uff99\067\uff99\070\uff99\071\uff99\072\uff99" +
    "\073\uff99\074\uff99\075\uff99\076\uff99\077\uff99\100\uff99\102" +
    "\uff99\103\uff99\104\uff99\105\uff99\106\uff99\107\uff99\110\uff99" +
    "\111\uff99\112\uff99\113\uff99\114\105\001\002\000\060\062" +
    "\uffa3\064\uffa3\065\uffa3\066\uffa3\067\uffa3\070\uffa3\071\uffa3" +
    "\072\uffa3\073\uffa3\074\uffa3\075\uffa3\076\uffa3\077\uffa3\100" +
    "\uffa3\102\uffa3\103\uffa3\104\uffa3\105\uffa3\106\uffa3\107\uffa3" +
    "\110\uffa3\111\uffa3\113\uffa3\001\002\000\006\062\172\074" +
    "\157\001\002\000\060\062\uffa4\064\uffa4\065\uffa4\066\uffa4" +
    "\067\uffa4\070\uffa4\071\uffa4\072\uffa4\073\uffa4\074\uffa4\075" +
    "\uffa4\076\uffa4\077\uffa4\100\uffa4\102\uffa4\103\uffa4\104\uffa4" +
    "\105\uffa4\106\uffa4\107\uffa4\110\uffa4\111\uffa4\113\uffa4\001" +
    "\002\000\004\062\174\001\002\000\060\062\uffa2\064\uffa2" +
    "\065\uffa2\066\uffa2\067\uffa2\070\uffa2\071\uffa2\072\uffa2\073" +
    "\uffa2\074\uffa2\075\uffa2\076\uffa2\077\uffa2\100\uffa2\102\uffa2" +
    "\103\uffa2\104\uffa2\105\uffa2\106\uffa2\107\uffa2\110\uffa2\111" +
    "\uffa2\113\uffa2\001\002\000\044\062\176\067\137\070\124" +
    "\071\122\072\121\073\134\076\130\077\140\100\135\102" +
    "\136\103\125\104\133\105\127\106\132\107\126\110\123" +
    "\111\131\001\002\000\060\062\uff5b\064\uff5b\065\uff5b\066" +
    "\uff5b\067\uff5b\070\uff5b\071\uff5b\072\uff5b\073\uff5b\074\uff5b" +
    "\075\uff5b\076\uff5b\077\uff5b\100\uff5b\102\uff5b\103\uff5b\104" +
    "\uff5b\105\uff5b\106\uff5b\107\uff5b\110\uff5b\111\uff5b\113\uff5b" +
    "\001\002\000\006\066\202\074\201\001\002\000\046\066" +
    "\uff52\067\137\070\124\071\122\072\121\073\134\074\uff52" +
    "\076\130\077\140\100\135\102\136\103\125\104\133\105" +
    "\127\106\132\107\126\110\123\111\131\001\002\000\034" +
    "\004\072\005\065\006\103\007\066\010\075\011\100\012" +
    "\067\032\076\035\064\061\074\065\073\070\077\101\101" +
    "\001\002\000\060\062\uff54\064\uff54\065\uff54\066\uff54\067" +
    "\uff54\070\uff54\071\uff54\072\uff54\073\uff54\074\uff54\075\uff54" +
    "\076\uff54\077\uff54\100\uff54\102\uff54\103\uff54\104\uff54\105" +
    "\uff54\106\uff54\107\uff54\110\uff54\111\uff54\113\uff54\001\002" +
    "\000\046\066\uff53\067\137\070\124\071\122\072\121\073" +
    "\134\074\uff53\076\130\077\140\100\135\102\136\103\125" +
    "\104\133\105\127\106\132\107\126\110\123\111\131\001" +
    "\002\000\004\061\205\001\002\000\036\004\072\005\065" +
    "\006\103\007\066\010\075\011\100\012\067\032\076\035" +
    "\064\061\074\062\206\065\073\070\077\101\101\001\002" +
    "\000\060\062\uffa0\064\uffa0\065\uffa0\066\uffa0\067\uffa0\070" +
    "\uffa0\071\uffa0\072\uffa0\073\uffa0\074\uffa0\075\uffa0\076\uffa0" +
    "\077\uffa0\100\uffa0\102\uffa0\103\uffa0\104\uffa0\105\uffa0\106" +
    "\uffa0\107\uffa0\110\uffa0\111\uffa0\113\uffa0\001\002\000\006" +
    "\062\210\074\157\001\002\000\060\062\uffa1\064\uffa1\065" +
    "\uffa1\066\uffa1\067\uffa1\070\uffa1\071\uffa1\072\uffa1\073\uffa1" +
    "\074\uffa1\075\uffa1\076\uffa1\077\uffa1\100\uffa1\102\uffa1\103" +
    "\uffa1\104\uffa1\105\uffa1\106\uffa1\107\uffa1\110\uffa1\111\uffa1" +
    "\113\uffa1\001\002\000\044\064\212\067\137\070\124\071" +
    "\122\072\121\073\134\076\130\077\140\100\135\102\136" +
    "\103\125\104\133\105\127\106\132\107\126\110\123\111" +
    "\131\001\002\000\066\062\uff8a\063\uff8a\064\uff8a\065\uff8a" +
    "\066\uff8a\067\uff8a\070\uff8a\071\uff8a\072\uff8a\073\uff8a\074" +
    "\uff8a\075\uff8a\076\uff8a\077\uff8a\100\uff8a\102\uff8a\103\uff8a" +
    "\104\uff8a\105\uff8a\106\uff8a\107\uff8a\110\uff8a\111\uff8a\112" +
    "\uff8a\113\uff8a\114\uff8a\001\002\000\024\006\uffe6\013\uffe6" +
    "\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\027\uffe6\066" +
    "\uffe6\001\002\000\004\061\u012e\001\002\000\004\061\u011d" +
    "\001\002\000\004\061\217\001\002\000\004\062\220\001" +
    "\002\000\004\065\221\001\002\000\064\004\072\005\065" +
    "\006\227\007\066\010\075\011\100\012\067\027\044\031" +
    "\237\032\076\035\064\036\223\040\222\043\243\044\256" +
    "\045\252\046\250\047\233\050\261\057\245\060\260\061" +
    "\074\065\073\070\077\101\101\001\002\000\034\004\072" +
    "\005\065\006\103\007\066\010\075\011\100\012\067\032" +
    "\076\035\064\061\074\065\073\070\077\101\101\001\002" +
    "\000\004\061\u010a\001\002\000\072\004\uffc9\005\uffc9\006" +
    "\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\027\uffc9\031\uffc9" +
    "\032\uffc9\035\uffc9\036\uffc9\040\uffc9\041\uffc9\042\uffc9\043" +
    "\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\057\uffc9" +
    "\060\uffc9\061\uffc9\065\uffc9\066\uffc9\070\uffc9\101\uffc9\001" +
    "\002\000\074\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5" +
    "\011\uffd5\012\uffd5\027\uffd5\031\uffd5\032\uffd5\035\uffd5\036" +
    "\uffd5\037\u0106\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5" +
    "\045\uffd5\046\uffd5\047\uffd5\050\uffd5\057\uffd5\060\uffd5\061" +
    "\uffd5\065\uffd5\066\uffd5\070\uffd5\101\uffd5\001\002\000\072" +
    "\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012" +
    "\uffd6\027\uffd6\031\uffd6\032\uffd6\035\uffd6\036\uffd6\040\uffd6" +
    "\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047" +
    "\uffd6\050\uffd6\057\uffd6\060\uffd6\061\uffd6\065\uffd6\066\uffd6" +
    "\070\uffd6\101\uffd6\001\002\000\052\061\104\063\055\067" +
    "\uff62\070\uff62\071\uff62\072\uff62\073\uff62\076\uff62\077\uff62" +
    "\100\uff62\102\uff62\103\uff62\104\uff62\105\uff62\106\uff62\107" +
    "\uff62\110\uff62\111\uff62\112\346\114\105\001\002\000\072" +
    "\004\uffca\005\uffca\006\uffca\007\uffca\010\uffca\011\uffca\012" +
    "\uffca\027\uffca\031\uffca\032\uffca\035\uffca\036\uffca\040\uffca" +
    "\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca\047" +
    "\uffca\050\uffca\057\uffca\060\uffca\061\uffca\065\uffca\066\uffca" +
    "\070\uffca\101\uffca\001\002\000\072\004\uffd4\005\uffd4\006" +
    "\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\027\uffd4\031\uffd4" +
    "\032\uffd4\035\uffd4\036\uffd4\040\uffd4\041\uffd4\042\uffd4\043" +
    "\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\057\uffd4" +
    "\060\uffd4\061\uffd4\065\uffd4\066\uffd4\070\uffd4\101\uffd4\001" +
    "\002\000\072\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1" +
    "\011\uffd1\012\uffd1\027\uffd1\031\uffd1\032\uffd1\035\uffd1\036" +
    "\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1" +
    "\046\uffd1\047\uffd1\050\uffd1\057\uffd1\060\uffd1\061\uffd1\065" +
    "\uffd1\066\uffd1\070\uffd1\101\uffd1\001\002\000\004\075\u0104" +
    "\001\002\000\072\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010" +
    "\uffd0\011\uffd0\012\uffd0\027\uffd0\031\uffd0\032\uffd0\035\uffd0" +
    "\036\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045" +
    "\uffd0\046\uffd0\047\uffd0\050\uffd0\057\uffd0\060\uffd0\061\uffd0" +
    "\065\uffd0\066\uffd0\070\uffd0\101\uffd0\001\002\000\072\004" +
    "\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf" +
    "\027\uffcf\031\uffcf\032\uffcf\035\uffcf\036\uffcf\040\uffcf\041" +
    "\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf" +
    "\050\uffcf\057\uffcf\060\uffcf\061\uffcf\065\uffcf\066\uffcf\070" +
    "\uffcf\101\uffcf\001\002\000\004\075\u0103\001\002\000\036" +
    "\004\072\005\065\006\103\007\066\010\075\011\100\012" +
    "\067\032\076\035\064\061\074\065\073\070\077\075\u0100" +
    "\101\101\001\002\000\072\004\uffcd\005\uffcd\006\uffcd\007" +
    "\uffcd\010\uffcd\011\uffcd\012\uffcd\027\uffcd\031\uffcd\032\uffcd" +
    "\035\uffcd\036\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044" +
    "\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\057\uffcd\060\uffcd" +
    "\061\uffcd\065\uffcd\066\uffcd\070\uffcd\101\uffcd\001\002\000" +
    "\066\004\072\005\065\006\227\007\066\010\075\011\100" +
    "\012\067\027\044\031\237\032\076\035\064\036\223\040" +
    "\222\043\243\044\256\045\252\046\250\047\233\050\261" +
    "\057\245\060\260\061\074\065\073\066\377\070\077\101" +
    "\101\001\002\000\046\067\uff56\070\uff56\071\uff56\072\uff56" +
    "\073\uff56\075\376\076\uff56\077\uff56\100\uff56\102\uff56\103" +
    "\uff56\104\uff56\105\uff56\106\uff56\107\uff56\110\uff56\111\uff56" +
    "\112\362\001\002\000\004\061\327\001\002\000\004\075" +
    "\326\001\002\000\004\061\322\001\002\000\004\075\321" +
    "\001\002\000\072\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010" +
    "\uffd3\011\uffd3\012\uffd3\027\uffd3\031\uffd3\032\uffd3\035\uffd3" +
    "\036\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045" +
    "\uffd3\046\uffd3\047\uffd3\050\uffd3\057\uffd3\060\uffd3\061\uffd3" +
    "\065\uffd3\066\uffd3\070\uffd3\101\uffd3\001\002\000\004\075" +
    "\320\001\002\000\044\067\uff59\070\uff59\071\uff59\072\uff59" +
    "\073\uff59\075\317\076\uff59\077\uff59\100\uff59\102\uff59\103" +
    "\uff59\104\uff59\105\uff59\106\uff59\107\uff59\110\uff59\111\uff59" +
    "\001\002\000\004\065\310\001\002\000\072\004\uffce\005" +
    "\uffce\006\uffce\007\uffce\010\uffce\011\uffce\012\uffce\027\uffce" +
    "\031\uffce\032\uffce\035\uffce\036\uffce\040\uffce\041\uffce\042" +
    "\uffce\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050\uffce" +
    "\057\uffce\060\uffce\061\uffce\065\uffce\066\uffce\070\uffce\101" +
    "\uffce\001\002\000\044\067\uff5a\070\uff5a\071\uff5a\072\uff5a" +
    "\073\uff5a\075\307\076\uff5a\077\uff5a\100\uff5a\102\uff5a\103" +
    "\uff5a\104\uff5a\105\uff5a\106\uff5a\107\uff5a\110\uff5a\111\uff5a" +
    "\001\002\000\072\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010" +
    "\uffd2\011\uffd2\012\uffd2\027\uffd2\031\uffd2\032\uffd2\035\uffd2" +
    "\036\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045" +
    "\uffd2\046\uffd2\047\uffd2\050\uffd2\057\uffd2\060\uffd2\061\uffd2" +
    "\065\uffd2\066\uffd2\070\uffd2\101\uffd2\001\002\000\004\061" +
    "\300\001\002\000\042\067\137\070\124\071\122\072\121" +
    "\073\134\076\130\077\140\100\135\102\136\103\125\104" +
    "\133\105\127\106\132\107\126\110\274\111\275\001\002" +
    "\000\004\061\270\001\002\000\004\061\262\001\002\000" +
    "\034\004\072\005\065\006\103\007\066\010\075\011\100" +
    "\012\067\032\076\035\064\061\074\065\073\070\077\101" +
    "\101\001\002\000\044\067\137\070\124\071\122\072\121" +
    "\073\134\074\264\076\130\077\140\100\135\102\136\103" +
    "\125\104\133\105\127\106\132\107\126\110\123\111\131" +
    "\001\002\000\034\004\072\005\065\006\103\007\066\010" +
    "\075\011\100\012\067\032\076\035\064\061\074\065\073" +
    "\070\077\101\101\001\002\000\044\062\266\067\137\070" +
    "\124\071\122\072\121\073\134\076\130\077\140\100\135" +
    "\102\136\103\125\104\133\105\127\106\132\107\126\110" +
    "\123\111\131\001\002\000\004\075\267\001\002\000\072" +
    "\004\uff93\005\uff93\006\uff93\007\uff93\010\uff93\011\uff93\012" +
    "\uff93\027\uff93\031\uff93\032\uff93\035\uff93\036\uff93\040\uff93" +
    "\041\uff93\042\uff93\043\uff93\044\uff93\045\uff93\046\uff93\047" +
    "\uff93\050\uff93\057\uff93\060\uff93\061\uff93\065\uff93\066\uff93" +
    "\070\uff93\101\uff93\001\002\000\034\004\072\005\065\006" +
    "\103\007\066\010\075\011\100\012\067\032\076\035\064" +
    "\061\074\065\073\070\077\101\101\001\002\000\044\062" +
    "\272\067\137\070\124\071\122\072\121\073\134\076\130" +
    "\077\140\100\135\102\136\103\125\104\133\105\127\106" +
    "\132\107\126\110\123\111\131\001\002\000\004\075\273" +
    "\001\002\000\072\004\uff91\005\uff91\006\uff91\007\uff91\010" +
    "\uff91\011\uff91\012\uff91\027\uff91\031\uff91\032\uff91\035\uff91" +
    "\036\uff91\040\uff91\041\uff91\042\uff91\043\uff91\044\uff91\045" +
    "\uff91\046\uff91\047\uff91\050\uff91\057\uff91\060\uff91\061\uff91" +
    "\065\uff91\066\uff91\070\uff91\101\uff91\001\002\000\044\067" +
    "\uff58\070\uff58\071\uff58\072\uff58\073\uff58\075\277\076\uff58" +
    "\077\uff58\100\uff58\102\uff58\103\uff58\104\uff58\105\uff58\106" +
    "\uff58\107\uff58\110\uff58\111\uff58\001\002\000\044\067\uff57" +
    "\070\uff57\071\uff57\072\uff57\073\uff57\075\276\076\uff57\077" +
    "\uff57\100\uff57\102\uff57\103\uff57\104\uff57\105\uff57\106\uff57" +
    "\107\uff57\110\uff57\111\uff57\001\002\000\072\004\uffc7\005" +
    "\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\027\uffc7" +
    "\031\uffc7\032\uffc7\035\uffc7\036\uffc7\040\uffc7\041\uffc7\042" +
    "\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7" +
    "\057\uffc7\060\uffc7\061\uffc7\065\uffc7\066\uffc7\070\uffc7\101" +
    "\uffc7\001\002\000\072\004\uffc8\005\uffc8\006\uffc8\007\uffc8" +
    "\010\uffc8\011\uffc8\012\uffc8\027\uffc8\031\uffc8\032\uffc8\035" +
    "\uffc8\036\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8" +
    "\045\uffc8\046\uffc8\047\uffc8\050\uffc8\057\uffc8\060\uffc8\061" +
    "\uffc8\065\uffc8\066\uffc8\070\uffc8\101\uffc8\001\002\000\034" +
    "\004\072\005\065\006\103\007\066\010\075\011\100\012" +
    "\067\032\076\035\064\061\074\065\073\070\077\101\101" +
    "\001\002\000\044\062\302\067\137\070\124\071\122\072" +
    "\121\073\134\076\130\077\140\100\135\102\136\103\125" +
    "\104\133\105\127\106\132\107\126\110\123\111\131\001" +
    "\002\000\004\065\303\001\002\000\064\004\072\005\065" +
    "\006\227\007\066\010\075\011\100\012\067\027\044\031" +
    "\237\032\076\035\064\036\223\040\222\043\243\044\256" +
    "\045\252\046\250\047\233\050\261\057\245\060\260\061" +
    "\074\065\073\070\077\101\101\001\002\000\066\004\072" +
    "\005\065\006\227\007\066\010\075\011\100\012\067\027" +
    "\044\031\237\032\076\035\064\036\223\040\222\043\243" +
    "\044\256\045\252\046\250\047\233\050\261\057\245\060" +
    "\260\061\074\065\073\066\306\070\077\101\101\001\002" +
    "\000\072\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011" +
    "\uffd7\012\uffd7\027\uffd7\031\uffd7\032\uffd7\035\uffd7\036\uffd7" +
    "\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046" +
    "\uffd7\047\uffd7\050\uffd7\057\uffd7\060\uffd7\061\uffd7\065\uffd7" +
    "\066\uffd7\070\uffd7\101\uffd7\001\002\000\072\004\uffaa\005" +
    "\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa\027\uffaa" +
    "\031\uffaa\032\uffaa\035\uffaa\036\uffaa\040\uffaa\041\uffaa\042" +
    "\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa" +
    "\057\uffaa\060\uffaa\061\uffaa\065\uffaa\066\uffaa\070\uffaa\101" +
    "\uffaa\001\002\000\072\004\uffcc\005\uffcc\006\uffcc\007\uffcc" +
    "\010\uffcc\011\uffcc\012\uffcc\027\uffcc\031\uffcc\032\uffcc\035" +
    "\uffcc\036\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc" +
    "\045\uffcc\046\uffcc\047\uffcc\050\uffcc\057\uffcc\060\uffcc\061" +
    "\uffcc\065\uffcc\066\uffcc\070\uffcc\101\uffcc\001\002\000\064" +
    "\004\072\005\065\006\227\007\066\010\075\011\100\012" +
    "\067\027\044\031\237\032\076\035\064\036\223\040\222" +
    "\043\243\044\256\045\252\046\250\047\233\050\261\057" +
    "\245\060\260\061\074\065\073\070\077\101\101\001\002" +
    "\000\066\004\072\005\065\006\227\007\066\010\075\011" +
    "\100\012\067\027\044\031\237\032\076\035\064\036\223" +
    "\040\222\043\243\044\256\045\252\046\250\047\233\050" +
    "\261\057\245\060\260\061\074\065\073\066\312\070\077" +
    "\101\101\001\002\000\004\044\313\001\002\000\004\061" +
    "\314\001\002\000\034\004\072\005\065\006\103\007\066" +
    "\010\075\011\100\012\067\032\076\035\064\061\074\065" +
    "\073\070\077\101\101\001\002\000\044\062\316\067\137" +
    "\070\124\071\122\072\121\073\134\076\130\077\140\100" +
    "\135\102\136\103\125\104\133\105\127\106\132\107\126" +
    "\110\123\111\131\001\002\000\072\004\uffa9\005\uffa9\006" +
    "\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9\027\uffa9\031\uffa9" +
    "\032\uffa9\035\uffa9\036\uffa9\040\uffa9\041\uffa9\042\uffa9\043" +
    "\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\057\uffa9" +
    "\060\uffa9\061\uffa9\065\uffa9\066\uffa9\070\uffa9\101\uffa9\001" +
    "\002\000\072\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb" +
    "\011\uffcb\012\uffcb\027\uffcb\031\uffcb\032\uffcb\035\uffcb\036" +
    "\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb" +
    "\046\uffcb\047\uffcb\050\uffcb\057\uffcb\060\uffcb\061\uffcb\065" +
    "\uffcb\066\uffcb\070\uffcb\101\uffcb\001\002\000\072\004\uffa8" +
    "\005\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8\027" +
    "\uffa8\031\uffa8\032\uffa8\035\uffa8\036\uffa8\040\uffa8\041\uffa8" +
    "\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050" +
    "\uffa8\057\uffa8\060\uffa8\061\uffa8\065\uffa8\066\uffa8\070\uffa8" +
    "\101\uffa8\001\002\000\072\004\uffc6\005\uffc6\006\uffc6\007" +
    "\uffc6\010\uffc6\011\uffc6\012\uffc6\027\uffc6\031\uffc6\032\uffc6" +
    "\035\uffc6\036\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044" +
    "\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\057\uffc6\060\uffc6" +
    "\061\uffc6\065\uffc6\066\uffc6\070\uffc6\101\uffc6\001\002\000" +
    "\034\004\072\005\065\006\103\007\066\010\075\011\100" +
    "\012\067\032\076\035\064\061\074\065\073\070\077\101" +
    "\101\001\002\000\044\062\324\067\137\070\124\071\122" +
    "\072\121\073\134\076\130\077\140\100\135\102\136\103" +
    "\125\104\133\105\127\106\132\107\126\110\123\111\131" +
    "\001\002\000\004\075\325\001\002\000\072\004\uff92\005" +
    "\uff92\006\uff92\007\uff92\010\uff92\011\uff92\012\uff92\027\uff92" +
    "\031\uff92\032\uff92\035\uff92\036\uff92\040\uff92\041\uff92\042" +
    "\uff92\043\uff92\044\uff92\045\uff92\046\uff92\047\uff92\050\uff92" +
    "\057\uff92\060\uff92\061\uff92\065\uff92\066\uff92\070\uff92\101" +
    "\uff92\001\002\000\072\004\uffc5\005\uffc5\006\uffc5\007\uffc5" +
    "\010\uffc5\011\uffc5\012\uffc5\027\uffc5\031\uffc5\032\uffc5\035" +
    "\uffc5\036\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5" +
    "\045\uffc5\046\uffc5\047\uffc5\050\uffc5\057\uffc5\060\uffc5\061" +
    "\uffc5\065\uffc5\066\uffc5\070\uffc5\101\uffc5\001\002\000\010" +
    "\006\332\027\334\032\330\001\002\000\004\006\375\001" +
    "\002\000\004\113\uffae\001\002\000\006\112\346\114\105" +
    "\001\002\000\004\112\362\001\002\000\016\006\370\013" +
    "\032\014\052\015\031\016\037\017\046\001\002\000\004" +
    "\113\336\001\002\000\034\004\072\005\065\006\103\007" +
    "\066\010\075\011\100\012\067\032\076\035\064\061\074" +
    "\065\073\070\077\101\101\001\002\000\044\067\137\070" +
    "\124\071\122\072\121\073\134\076\130\077\140\100\135" +
    "\102\136\103\125\104\133\105\127\106\132\107\126\110" +
    "\123\111\131\113\340\001\002\000\034\004\072\005\065" +
    "\006\345\007\066\010\075\011\100\012\067\032\076\035" +
    "\064\061\074\065\073\070\077\101\101\001\002\000\044" +
    "\067\uff56\070\uff56\071\uff56\072\uff56\073\uff56\076\uff56\077" +
    "\uff56\100\uff56\102\uff56\103\uff56\104\uff56\105\uff56\106\uff56" +
    "\107\uff56\110\uff56\111\uff56\112\362\001\002\000\004\062" +
    "\356\001\002\000\004\062\uffab\001\002\000\042\067\137" +
    "\070\124\071\122\072\121\073\134\076\130\077\140\100" +
    "\135\102\136\103\125\104\133\105\127\106\132\107\126" +
    "\110\354\111\355\001\002\000\052\061\104\063\055\067" +
    "\uff62\070\uff62\071\uff62\072\uff62\073\uff62\076\uff62\077\uff62" +
    "\100\uff62\102\uff62\103\uff62\104\uff62\105\uff62\106\uff62\107" +
    "\uff62\110\uff62\111\uff62\112\346\114\105\001\002\000\036" +
    "\004\072\005\065\006\103\007\066\010\075\011\100\012" +
    "\067\030\347\032\076\035\064\061\074\065\073\070\077" +
    "\101\101\001\002\000\004\006\351\001\002\000\050\062" +
    "\uffbe\067\137\070\124\071\122\072\121\073\134\075\uffbe" +
    "\076\130\077\140\100\135\102\136\103\125\104\133\105" +
    "\127\106\132\107\126\110\123\111\131\113\uffbe\001\002" +
    "\000\004\061\352\001\002\000\004\062\353\001\002\000" +
    "\010\062\uffbd\075\uffbd\113\uffbd\001\002\000\044\062\uffad" +
    "\067\uff58\070\uff58\071\uff58\072\uff58\073\uff58\076\uff58\077" +
    "\uff58\100\uff58\102\uff58\103\uff58\104\uff58\105\uff58\106\uff58" +
    "\107\uff58\110\uff58\111\uff58\001\002\000\044\062\uffac\067" +
    "\uff57\070\uff57\071\uff57\072\uff57\073\uff57\076\uff57\077\uff57" +
    "\100\uff57\102\uff57\103\uff57\104\uff57\105\uff57\106\uff57\107" +
    "\uff57\110\uff57\111\uff57\001\002\000\004\065\357\001\002" +
    "\000\064\004\072\005\065\006\227\007\066\010\075\011" +
    "\100\012\067\027\044\031\237\032\076\035\064\036\223" +
    "\040\222\043\243\044\256\045\252\046\250\047\233\050" +
    "\261\057\245\060\260\061\074\065\073\070\077\101\101" +
    "\001\002\000\066\004\072\005\065\006\227\007\066\010" +
    "\075\011\100\012\067\027\044\031\237\032\076\035\064" +
    "\036\223\040\222\043\243\044\256\045\252\046\250\047" +
    "\233\050\261\057\245\060\260\061\074\065\073\066\361" +
    "\070\077\101\101\001\002\000\072\004\uffb0\005\uffb0\006" +
    "\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\027\uffb0\031\uffb0" +
    "\032\uffb0\035\uffb0\036\uffb0\040\uffb0\041\uffb0\042\uffb0\043" +
    "\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\057\uffb0" +
    "\060\uffb0\061\uffb0\065\uffb0\066\uffb0\070\uffb0\101\uffb0\001" +
    "\002\000\036\004\072\005\065\006\103\007\066\010\075" +
    "\011\100\012\067\030\363\032\076\035\064\061\074\065" +
    "\073\070\077\101\101\001\002\000\004\006\365\001\002" +
    "\000\050\062\uffbc\067\137\070\124\071\122\072\121\073" +
    "\134\075\uffbc\076\130\077\140\100\135\102\136\103\125" +
    "\104\133\105\127\106\132\107\126\110\123\111\131\113" +
    "\uffbc\001\002\000\004\061\366\001\002\000\004\062\367" +
    "\001\002\000\010\062\uffbb\075\uffbb\113\uffbb\001\002\000" +
    "\004\006\uffd8\001\002\000\004\006\372\001\002\000\004" +
    "\112\373\001\002\000\034\004\072\005\065\006\103\007" +
    "\066\010\075\011\100\012\067\032\076\035\064\061\074" +
    "\065\073\070\077\101\101\001\002\000\044\067\137\070" +
    "\124\071\122\072\121\073\134\076\130\077\140\100\135" +
    "\102\136\103\125\104\133\105\127\106\132\107\126\110" +
    "\123\111\131\113\uffaf\001\002\000\004\114\105\001\002" +
    "\000\072\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011" +
    "\uffc3\012\uffc3\027\uffc3\031\uffc3\032\uffc3\035\uffc3\036\uffc3" +
    "\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046" +
    "\uffc3\047\uffc3\050\uffc3\057\uffc3\060\uffc3\061\uffc3\065\uffc3" +
    "\066\uffc3\070\uffc3\101\uffc3\001\002\000\024\006\uffde\013" +
    "\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde\027\uffde" +
    "\066\uffde\001\002\000\072\004\uffa5\005\uffa5\006\uffa5\007" +
    "\uffa5\010\uffa5\011\uffa5\012\uffa5\027\uffa5\031\uffa5\032\uffa5" +
    "\035\uffa5\036\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\044" +
    "\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\057\uffa5\060\uffa5" +
    "\061\uffa5\065\uffa5\066\uffa5\070\uffa5\101\uffa5\001\002\000" +
    "\044\067\137\070\124\071\122\072\121\073\134\075\u0102" +
    "\076\130\077\140\100\135\102\136\103\125\104\133\105" +
    "\127\106\132\107\126\110\123\111\131\001\002\000\072" +
    "\004\uffa6\005\uffa6\006\uffa6\007\uffa6\010\uffa6\011\uffa6\012" +
    "\uffa6\027\uffa6\031\uffa6\032\uffa6\035\uffa6\036\uffa6\040\uffa6" +
    "\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\047" +
    "\uffa6\050\uffa6\057\uffa6\060\uffa6\061\uffa6\065\uffa6\066\uffa6" +
    "\070\uffa6\101\uffa6\001\002\000\072\004\uffc4\005\uffc4\006" +
    "\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\027\uffc4\031\uffc4" +
    "\032\uffc4\035\uffc4\036\uffc4\040\uffc4\041\uffc4\042\uffc4\043" +
    "\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\057\uffc4" +
    "\060\uffc4\061\uffc4\065\uffc4\066\uffc4\070\uffc4\101\uffc4\001" +
    "\002\000\072\004\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7" +
    "\011\uffa7\012\uffa7\027\uffa7\031\uffa7\032\uffa7\035\uffa7\036" +
    "\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7" +
    "\046\uffa7\047\uffa7\050\uffa7\057\uffa7\060\uffa7\061\uffa7\065" +
    "\uffa7\066\uffa7\070\uffa7\101\uffa7\001\002\000\046\063\055" +
    "\067\uff61\070\uff61\071\uff61\072\uff61\073\uff61\076\uff61\077" +
    "\uff61\100\uff61\102\uff61\103\uff61\104\uff61\105\uff61\106\uff61" +
    "\107\uff61\110\uff61\111\uff61\112\060\001\002\000\004\065" +
    "\u0107\001\002\000\064\004\072\005\065\006\227\007\066" +
    "\010\075\011\100\012\067\027\044\031\237\032\076\035" +
    "\064\036\223\040\222\043\243\044\256\045\252\046\250" +
    "\047\233\050\261\057\245\060\260\061\074\065\073\070" +
    "\077\101\101\001\002\000\066\004\072\005\065\006\227" +
    "\007\066\010\075\011\100\012\067\027\044\031\237\032" +
    "\076\035\064\036\223\040\222\043\243\044\256\045\252" +
    "\046\250\047\233\050\261\057\245\060\260\061\074\065" +
    "\073\066\u0109\070\077\101\101\001\002\000\072\004\uffb6" +
    "\005\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\027" +
    "\uffb6\031\uffb6\032\uffb6\035\uffb6\036\uffb6\040\uffb6\041\uffb6" +
    "\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050" +
    "\uffb6\057\uffb6\060\uffb6\061\uffb6\065\uffb6\066\uffb6\070\uffb6" +
    "\101\uffb6\001\002\000\034\004\072\005\065\006\103\007" +
    "\066\010\075\011\100\012\067\032\076\035\064\061\074" +
    "\065\073\070\077\101\101\001\002\000\044\062\u010c\067" +
    "\137\070\124\071\122\072\121\073\134\076\130\077\140" +
    "\100\135\102\136\103\125\104\133\105\127\106\132\107" +
    "\126\110\123\111\131\001\002\000\004\065\u010d\001\002" +
    "\000\064\004\072\005\065\006\227\007\066\010\075\011" +
    "\100\012\067\027\044\031\237\032\076\035\064\036\223" +
    "\040\222\043\243\044\256\045\252\046\250\047\233\050" +
    "\261\057\245\060\260\061\074\065\073\070\077\101\101" +
    "\001\002\000\066\004\072\005\065\006\227\007\066\010" +
    "\075\011\100\012\067\027\044\031\237\032\076\035\064" +
    "\036\223\040\222\043\243\044\256\045\252\046\250\047" +
    "\233\050\261\057\245\060\260\061\074\065\073\066\u010f" +
    "\070\077\101\101\001\002\000\074\004\uffb7\005\uffb7\006" +
    "\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7\027\uffb7\031\uffb7" +
    "\032\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042" +
    "\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7" +
    "\057\uffb7\060\uffb7\061\uffb7\065\uffb7\066\uffb7\070\uffb7\101" +
    "\uffb7\001\002\000\044\065\u0111\067\137\070\124\071\122" +
    "\072\121\073\134\076\130\077\140\100\135\102\136\103" +
    "\125\104\133\105\127\106\132\107\126\110\123\111\131" +
    "\001\002\000\006\041\u0114\042\u0113\001\002\000\010\041" +
    "\uffb3\042\uffb3\066\uffb3\001\002\000\004\113\u011b\001\002" +
    "\000\034\004\072\005\065\006\103\007\066\010\075\011" +
    "\100\012\067\032\076\035\064\061\074\065\073\070\077" +
    "\101\101\001\002\000\010\041\u0114\042\u0113\066\u0117\001" +
    "\002\000\010\041\uffb4\042\uffb4\066\uffb4\001\002\000\072" +
    "\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5\012" +
    "\uffb5\027\uffb5\031\uffb5\032\uffb5\035\uffb5\036\uffb5\040\uffb5" +
    "\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5\047" +
    "\uffb5\050\uffb5\057\uffb5\060\uffb5\061\uffb5\065\uffb5\066\uffb5" +
    "\070\uffb5\101\uffb5\001\002\000\044\067\137\070\124\071" +
    "\122\072\121\073\134\076\130\077\140\100\135\102\136" +
    "\103\125\104\133\105\127\106\132\107\126\110\123\111" +
    "\131\113\u0119\001\002\000\064\004\072\005\065\006\227" +
    "\007\066\010\075\011\100\012\067\027\044\031\237\032" +
    "\076\035\064\036\223\040\222\043\243\044\256\045\252" +
    "\046\250\047\233\050\261\057\245\060\260\061\074\065" +
    "\073\070\077\101\101\001\002\000\072\004\072\005\065" +
    "\006\227\007\066\010\075\011\100\012\067\027\044\031" +
    "\237\032\076\035\064\036\223\040\222\041\uffb2\042\uffb2" +
    "\043\243\044\256\045\252\046\250\047\233\050\261\057" +
    "\245\060\260\061\074\065\073\066\uffb2\070\077\101\101" +
    "\001\002\000\064\004\072\005\065\006\227\007\066\010" +
    "\075\011\100\012\067\027\044\031\237\032\076\035\064" +
    "\036\223\040\222\043\243\044\256\045\252\046\250\047" +
    "\233\050\261\057\245\060\260\061\074\065\073\070\077" +
    "\101\101\001\002\000\072\004\072\005\065\006\227\007" +
    "\066\010\075\011\100\012\067\027\044\031\237\032\076" +
    "\035\064\036\223\040\222\041\uffb1\042\uffb1\043\243\044" +
    "\256\045\252\046\250\047\233\050\261\057\245\060\260" +
    "\061\074\065\073\066\uffb1\070\077\101\101\001\002\000" +
    "\020\006\370\013\032\014\052\015\031\016\037\017\046" +
    "\062\u011e\001\002\000\006\065\uffee\113\023\001\002\000" +
    "\004\006\u0129\001\002\000\006\062\u0123\074\u0122\001\002" +
    "\000\006\062\uffe0\074\uffe0\001\002\000\016\006\370\013" +
    "\032\014\052\015\031\016\037\017\046\001\002\000\006" +
    "\065\uffee\113\023\001\002\000\004\065\u0125\001\002\000" +
    "\064\004\072\005\065\006\227\007\066\010\075\011\100" +
    "\012\067\027\044\031\237\032\076\035\064\036\223\040" +
    "\222\043\243\044\256\045\252\046\250\047\233\050\261" +
    "\057\245\060\260\061\074\065\073\070\077\101\101\001" +
    "\002\000\066\004\072\005\065\006\227\007\066\010\075" +
    "\011\100\012\067\027\044\031\237\032\076\035\064\036" +
    "\223\040\222\043\243\044\256\045\252\046\250\047\233" +
    "\050\261\057\245\060\260\061\074\065\073\066\u0127\070" +
    "\077\101\101\001\002\000\024\006\uffe5\013\uffe5\014\uffe5" +
    "\015\uffe5\016\uffe5\017\uffe5\020\uffe5\027\uffe5\066\uffe5\001" +
    "\002\000\006\062\uffe1\074\uffe1\001\002\000\006\062\uffdf" +
    "\074\uffdf\001\002\000\004\065\u012b\001\002\000\064\004" +
    "\072\005\065\006\227\007\066\010\075\011\100\012\067" +
    "\027\044\031\237\032\076\035\064\036\223\040\222\043" +
    "\243\044\256\045\252\046\250\047\233\050\261\057\245" +
    "\060\260\061\074\065\073\070\077\101\101\001\002\000" +
    "\066\004\072\005\065\006\227\007\066\010\075\011\100" +
    "\012\067\027\044\031\237\032\076\035\064\036\223\040" +
    "\222\043\243\044\256\045\252\046\250\047\233\050\261" +
    "\057\245\060\260\061\074\065\073\066\u012d\070\077\101" +
    "\101\001\002\000\024\006\uffe4\013\uffe4\014\uffe4\015\uffe4" +
    "\016\uffe4\017\uffe4\020\uffe4\027\uffe4\066\uffe4\001\002\000" +
    "\004\062\u012f\001\002\000\004\065\u0130\001\002\000\004" +
    "\053\u0133\001\002\000\006\053\uff85\066\uff85\001\002\000" +
    "\006\053\uff86\066\uff86\001\002\000\004\112\u0137\001\002" +
    "\000\006\053\u0133\066\u0136\001\002\000\006\053\uff87\066" +
    "\uff87\001\002\000\024\006\uff88\013\uff88\014\uff88\015\uff88" +
    "\016\uff88\017\uff88\020\uff88\027\uff88\066\uff88\001\002\000" +
    "\036\004\072\005\065\006\103\007\066\010\075\011\100" +
    "\012\067\032\u013c\035\u0139\052\u013a\061\074\065\073\070" +
    "\077\101\101\001\002\000\006\062\uff7f\075\uff7f\001\002" +
    "\000\004\006\u0161\001\002\000\004\061\u015e\001\002\000" +
    "\004\075\uff7b\001\002\000\006\006\u0157\051\164\001\002" +
    "\000\004\075\uff7d\001\002\000\004\075\uff7c\001\002\000" +
    "\004\075\u0141\001\002\000\046\062\uff80\067\137\070\124" +
    "\071\122\072\121\073\134\075\uff80\076\130\077\140\100" +
    "\135\102\136\103\125\104\133\105\127\106\132\107\126" +
    "\110\123\111\131\001\002\000\010\054\u0142\055\u0148\056" +
    "\u0147\001\002\000\004\061\u0151\001\002\000\006\053\uff82" +
    "\066\uff82\001\002\000\006\053\uff84\066\uff84\001\002\000" +
    "\006\053\uff83\066\uff83\001\002\000\006\053\uff7e\066\uff7e" +
    "\001\002\000\004\061\u014d\001\002\000\004\061\u0149\001" +
    "\002\000\036\004\072\005\065\006\103\007\066\010\075" +
    "\011\100\012\067\032\076\035\064\052\u013a\061\074\065" +
    "\073\070\077\101\101\001\002\000\004\062\u014b\001\002" +
    "\000\004\075\u014c\001\002\000\006\053\uff75\066\uff75\001" +
    "\002\000\036\004\072\005\065\006\103\007\066\010\075" +
    "\011\100\012\067\032\076\035\064\052\u013a\061\074\065" +
    "\073\070\077\101\101\001\002\000\004\062\u014f\001\002" +
    "\000\004\075\u0150\001\002\000\006\053\uff74\066\uff74\001" +
    "\002\000\036\004\072\005\065\006\103\007\066\010\075" +
    "\011\100\012\067\032\076\035\064\052\u013a\061\074\065" +
    "\073\070\077\101\101\001\002\000\004\062\u0153\001\002" +
    "\000\004\112\u0154\001\002\000\034\004\072\005\065\006" +
    "\103\007\066\010\075\011\100\012\067\032\076\035\064" +
    "\061\074\065\073\070\077\101\101\001\002\000\044\067" +
    "\137\070\124\071\122\072\121\073\134\075\u0156\076\130" +
    "\077\140\100\135\102\136\103\125\104\133\105\127\106" +
    "\132\107\126\110\123\111\131\001\002\000\006\053\uff76" +
    "\066\uff76\001\002\000\006\061\u0158\114\105\001\002\000" +
    "\040\004\072\005\065\006\103\007\066\010\075\011\100" +
    "\012\067\032\076\035\064\052\u013a\061\074\062\170\065" +
    "\073\070\077\101\101\001\002\000\006\062\uff77\074\uff77" +
    "\001\002\000\006\062\u015c\074\u015b\001\002\000\004\052" +
    "\u013a\001\002\000\004\075\uff79\001\002\000\006\062\uff78" +
    "\074\uff78\001\002\000\034\004\072\005\065\006\103\007" +
    "\066\010\075\011\100\012\067\032\076\035\064\061\074" +
    "\065\073\070\077\101\101\001\002\000\044\062\u0160\067" +
    "\137\070\124\071\122\072\121\073\134\076\130\077\140" +
    "\100\135\102\136\103\125\104\133\105\127\106\132\107" +
    "\126\110\123\111\131\001\002\000\010\062\uff81\074\uff81" +
    "\075\uff81\001\002\000\004\061\u0162\001\002\000\040\004" +
    "\072\005\065\006\103\007\066\010\075\011\100\012\067" +
    "\032\076\035\064\052\u013a\061\074\062\206\065\073\070" +
    "\077\101\101\001\002\000\006\062\u0164\074\u015b\001\002" +
    "\000\004\075\uff7a\001\002\000\004\006\u0167\001\002\000" +
    "\006\074\uffb9\075\uffb9\001\002\000\014\063\055\074\uffee" +
    "\075\uffee\112\uffee\113\023\001\002\000\006\074\u0169\075" +
    "\uffc1\001\002\000\004\006\u016b\001\002\000\006\074\uffba" +
    "\075\uffba\001\002\000\010\074\uffee\075\uffee\113\023\001" +
    "\002\000\006\074\uffb8\075\uffb8\001\002\000\012\063\055" +
    "\075\uffee\112\uffee\113\023\001\002\000\010\074\uffb8\075" +
    "\uffb8\112\u016f\001\002\000\036\004\072\005\065\006\103" +
    "\007\066\010\075\011\100\012\067\030\u0170\032\076\035" +
    "\064\061\074\065\073\070\077\101\101\001\002\000\004" +
    "\006\u0172\001\002\000\044\067\137\070\124\071\122\072" +
    "\121\073\134\075\uffc0\076\130\077\140\100\135\102\136" +
    "\103\125\104\133\105\127\106\132\107\126\110\123\111" +
    "\131\001\002\000\004\061\u0173\001\002\000\004\062\u0174" +
    "\001\002\000\004\075\uffbf\001\002\000\006\075\uff8e\112" +
    "\u0176\001\002\000\034\004\072\005\065\006\103\007\066" +
    "\010\075\011\100\012\067\032\076\035\064\061\074\065" +
    "\073\070\077\101\101\001\002\000\044\067\137\070\124" +
    "\071\122\072\121\073\134\075\uff8d\076\130\077\140\100" +
    "\135\102\136\103\125\104\133\105\127\106\132\107\126" +
    "\110\123\111\131\001\002\000\004\061\u0179\001\002\000" +
    "\020\006\370\013\032\014\052\015\031\016\037\017\046" +
    "\062\u017a\001\002\000\006\065\uffee\113\023\001\002\000" +
    "\006\062\u017c\074\u0122\001\002\000\006\065\uffee\113\023" +
    "\001\002\000\004\065\u017e\001\002\000\064\004\072\005" +
    "\065\006\227\007\066\010\075\011\100\012\067\027\044" +
    "\031\237\032\076\035\064\036\223\040\222\043\243\044" +
    "\256\045\252\046\250\047\233\050\261\057\245\060\260" +
    "\061\074\065\073\070\077\101\101\001\002\000\066\004" +
    "\072\005\065\006\227\007\066\010\075\011\100\012\067" +
    "\027\044\031\237\032\076\035\064\036\223\040\222\043" +
    "\243\044\256\045\252\046\250\047\233\050\261\057\245" +
    "\060\260\061\074\065\073\066\u0180\070\077\101\101\001" +
    "\002\000\024\006\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3" +
    "\017\uffe3\020\uffe3\027\uffe3\066\uffe3\001\002\000\004\065" +
    "\u0182\001\002\000\064\004\072\005\065\006\227\007\066" +
    "\010\075\011\100\012\067\027\044\031\237\032\076\035" +
    "\064\036\223\040\222\043\243\044\256\045\252\046\250" +
    "\047\233\050\261\057\245\060\260\061\074\065\073\070" +
    "\077\101\101\001\002\000\066\004\072\005\065\006\227" +
    "\007\066\010\075\011\100\012\067\027\044\031\237\032" +
    "\076\035\064\036\223\040\222\043\243\044\256\045\252" +
    "\046\250\047\233\050\261\057\245\060\260\061\074\065" +
    "\073\066\u0184\070\077\101\101\001\002\000\024\006\uffe2" +
    "\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\027" +
    "\uffe2\066\uffe2\001\002\000\006\002\ufff2\025\ufff2\001\002" +
    "\000\024\006\uffed\013\uffed\014\uffed\015\uffed\016\uffed\017" +
    "\uffed\020\uffed\027\uffed\066\uffed\001\002\000\024\006\uffe7" +
    "\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\027" +
    "\uffe7\066\uffe7\001\002\000\022\006\053\013\032\014\052" +
    "\015\031\016\037\017\046\020\047\027\044\001\002\000" +
    "\024\006\053\013\032\014\052\015\031\016\037\017\046" +
    "\020\047\027\044\066\u018a\001\002\000\006\002\ufff3\025" +
    "\ufff3\001\002\000\012\065\ufff0\074\ufff0\075\ufff0\112\ufff0" +
    "\001\002\000\012\065\uffef\074\uffef\075\uffef\112\uffef\001" +
    "\002\000\012\065\ufff1\074\ufff1\075\ufff1\112\ufff1\001\002" +
    "\000\006\002\ufff5\025\ufff5\001\002\000\006\025\ufff8\034" +
    "\ufff8\001\002\000\004\002\001\001\002\000\010\024\ufffb" +
    "\025\ufffb\034\ufffb\001\002\000\004\075\u0193\001\002\000" +
    "\010\024\ufff9\025\ufff9\034\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0191\000\012\002\006\010\004\013\005\054\007\001" +
    "\001\000\002\001\001\000\004\013\u0190\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\011\010\014\012\055" +
    "\011\001\001\000\004\014\u018e\001\001\000\006\012\020" +
    "\103\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\u018d\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\026\001\001\000\002\001\001\000\032\004" +
    "\037\006\041\016\044\017\053\022\032\023\040\024\035" +
    "\025\042\057\050\060\034\061\047\064\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\006\u0185\016\044\017\053\022\032\023\040" +
    "\024\035\025\042\057\050\060\034\061\047\064\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\u0164\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\062\055\063\056\001\001\000" +
    "\002\001\001\000\014\044\070\047\067\053\061\102\210" +
    "\104\062\001\001\000\004\063\060\001\001\000\002\001" +
    "\001\000\014\044\070\047\067\053\061\102\101\104\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\044\070\047\067\053\061\101\176" +
    "\102\177\104\062\001\001\000\014\044\070\047\067\053" +
    "\061\102\174\104\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\044\070\047\067\053\061\102\162\104" +
    "\062\001\001\000\002\001\001\000\014\044\070\047\067" +
    "\053\061\102\161\104\062\001\001\000\002\001\001\000" +
    "\012\050\106\051\107\062\105\063\056\001\001\000\020" +
    "\044\070\045\115\046\116\047\067\053\061\102\117\104" +
    "\062\001\001\000\004\104\112\001\001\000\004\063\060" +
    "\001\001\000\004\051\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\062\113\063\056\001\001\000\002" +
    "\001\001\000\004\063\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\044\070\047\067\053\061\102\155\104\062\001\001\000" +
    "\014\044\070\047\067\053\061\102\154\104\062\001\001" +
    "\000\002\001\001\000\014\044\070\047\067\053\061\102" +
    "\153\104\062\001\001\000\014\044\070\047\067\053\061" +
    "\102\152\104\062\001\001\000\014\044\070\047\067\053" +
    "\061\102\151\104\062\001\001\000\014\044\070\047\067" +
    "\053\061\102\150\104\062\001\001\000\014\044\070\047" +
    "\067\053\061\102\147\104\062\001\001\000\002\001\001" +
    "\000\014\044\070\047\067\053\061\102\146\104\062\001" +
    "\001\000\014\044\070\047\067\053\061\102\145\104\062" +
    "\001\001\000\014\044\070\047\067\053\061\102\144\104" +
    "\062\001\001\000\014\044\070\047\067\053\061\102\143" +
    "\104\062\001\001\000\014\044\070\047\067\053\061\102" +
    "\142\104\062\001\001\000\014\044\070\047\067\053\061" +
    "\102\141\104\062\001\001\000\014\044\070\047\067\053" +
    "\061\102\140\104\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\044\070\046\160\047\067\053\061\102\117\104\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\050\166\051" +
    "\107\001\001\000\020\044\070\045\170\046\116\047\067" +
    "\053\061\102\117\104\062\001\001\000\004\051\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\044\070\047\067\053\061\102\202\104\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\044\070\045\206\046\116\047\067\053\061\102\117\104" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\003\225\005" +
    "\240\007\223\024\245\025\042\026\243\031\224\032\230" +
    "\033\231\034\233\035\246\036\234\037\252\040\254\043" +
    "\237\044\253\047\241\052\227\053\250\057\235\060\034" +
    "\061\047\102\256\104\062\001\001\000\014\044\070\047" +
    "\067\053\061\102\u010f\104\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\050\106\051\107\062\u0104\063\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\044\070\047\067\053\061\102\u0100\104\062\001" +
    "\001\000\002\001\001\000\060\003\304\007\223\024\245" +
    "\025\042\026\243\031\224\032\230\033\231\034\233\035" +
    "\246\036\234\037\252\040\254\043\237\044\253\047\241" +
    "\052\227\053\250\057\235\060\034\061\047\102\256\104" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\044\070\047\067\053\061\102\262\104" +
    "\062\001\001\000\002\001\001\000\014\044\070\047\067" +
    "\053\061\102\264\104\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\044\070\047\067" +
    "\053\061\102\270\104\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\044" +
    "\070\047\067\053\061\102\300\104\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\062\003\225\005\303\007" +
    "\223\024\245\025\042\026\243\031\224\032\230\033\231" +
    "\034\233\035\246\036\234\037\252\040\254\043\237\044" +
    "\253\047\241\052\227\053\250\057\235\060\034\061\047" +
    "\102\256\104\062\001\001\000\060\003\304\007\223\024" +
    "\245\025\042\026\243\031\224\032\230\033\231\034\233" +
    "\035\246\036\234\037\252\040\254\043\237\044\253\047" +
    "\241\052\227\053\250\057\235\060\034\061\047\102\256" +
    "\104\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\003\225\005\310\007\223\024\245" +
    "\025\042\026\243\031\224\032\230\033\231\034\233\035" +
    "\246\036\234\037\252\040\254\043\237\044\253\047\241" +
    "\052\227\053\250\057\235\060\034\061\047\102\256\104" +
    "\062\001\001\000\060\003\304\007\223\024\245\025\042" +
    "\026\243\031\224\032\230\033\231\034\233\035\246\036" +
    "\234\037\252\040\254\043\237\044\253\047\241\052\227" +
    "\053\250\057\235\060\034\061\047\102\256\104\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\044\070" +
    "\047\067\053\061\102\314\104\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\044\070\047\067\053\061\102" +
    "\322\104\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\026\330\047" +
    "\332\105\334\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\050\106\051\107\001\001\000\002\001\001\000" +
    "\004\023\370\001\001\000\002\001\001\000\014\044\070" +
    "\047\067\053\061\102\336\104\062\001\001\000\002\001" +
    "\001\000\020\026\342\044\070\047\340\053\061\056\341" +
    "\102\343\104\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\050\106" +
    "\051\107\062\105\063\056\001\001\000\014\044\070\047" +
    "\067\053\061\102\347\104\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\003\225\005\357\007\223\024\245\025" +
    "\042\026\243\031\224\032\230\033\231\034\233\035\246" +
    "\036\234\037\252\040\254\043\237\044\253\047\241\052" +
    "\227\053\250\057\235\060\034\061\047\102\256\104\062" +
    "\001\001\000\060\003\304\007\223\024\245\025\042\026" +
    "\243\031\224\032\230\033\231\034\233\035\246\036\234" +
    "\037\252\040\254\043\237\044\253\047\241\052\227\053" +
    "\250\057\235\060\034\061\047\102\256\104\062\001\001" +
    "\000\002\001\001\000\014\044\070\047\067\053\061\102" +
    "\363\104\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\044\070\047\067\053\061\102\373\104\062\001\001\000" +
    "\002\001\001\000\006\050\166\051\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\063\060\001\001\000\002\001\001\000\062\003" +
    "\225\005\u0107\007\223\024\245\025\042\026\243\031\224" +
    "\032\230\033\231\034\233\035\246\036\234\037\252\040" +
    "\254\043\237\044\253\047\241\052\227\053\250\057\235" +
    "\060\034\061\047\102\256\104\062\001\001\000\060\003" +
    "\304\007\223\024\245\025\042\026\243\031\224\032\230" +
    "\033\231\034\233\035\246\036\234\037\252\040\254\043" +
    "\237\044\253\047\241\052\227\053\250\057\235\060\034" +
    "\061\047\102\256\104\062\001\001\000\002\001\001\000" +
    "\014\044\070\047\067\053\061\102\u010a\104\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\003\225\005" +
    "\u010d\007\223\024\245\025\042\026\243\031\224\032\230" +
    "\033\231\034\233\035\246\036\234\037\252\040\254\043" +
    "\237\044\253\047\241\052\227\053\250\057\235\060\034" +
    "\061\047\102\256\104\062\001\001\000\060\003\304\007" +
    "\223\024\245\025\042\026\243\031\224\032\230\033\231" +
    "\034\233\035\246\036\234\037\252\040\254\043\237\044" +
    "\253\047\241\052\227\053\250\057\235\060\034\061\047" +
    "\102\256\104\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\041\u0114\042\u0111\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\044\070\047\067\053\061\102" +
    "\u0117\104\062\001\001\000\004\042\u0115\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\003" +
    "\225\005\u0119\007\223\024\245\025\042\026\243\031\224" +
    "\032\230\033\231\034\233\035\246\036\234\037\252\040" +
    "\254\043\237\044\253\047\241\052\227\053\250\057\235" +
    "\060\034\061\047\102\256\104\062\001\001\000\060\003" +
    "\304\007\223\024\245\025\042\026\243\031\224\032\230" +
    "\033\231\034\233\035\246\036\234\037\252\040\254\043" +
    "\237\044\253\047\241\052\227\053\250\057\235\060\034" +
    "\061\047\102\256\104\062\001\001\000\062\003\225\005" +
    "\u011b\007\223\024\245\025\042\026\243\031\224\032\230" +
    "\033\231\034\233\035\246\036\234\037\252\040\254\043" +
    "\237\044\253\047\241\052\227\053\250\057\235\060\034" +
    "\061\047\102\256\104\062\001\001\000\060\003\304\007" +
    "\223\024\245\025\042\026\243\031\224\032\230\033\231" +
    "\034\233\035\246\036\234\037\252\040\254\043\237\044" +
    "\253\047\241\052\227\053\250\057\235\060\034\061\047" +
    "\102\256\104\062\001\001\000\010\020\u011f\021\u0120\023" +
    "\u011e\001\001\000\004\015\u0129\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\021\u0127\023" +
    "\u011e\001\001\000\004\015\u0123\001\001\000\002\001\001" +
    "\000\062\003\225\005\u0125\007\223\024\245\025\042\026" +
    "\243\031\224\032\230\033\231\034\233\035\246\036\234" +
    "\037\252\040\254\043\237\044\253\047\241\052\227\053" +
    "\250\057\235\060\034\061\047\102\256\104\062\001\001" +
    "\000\060\003\304\007\223\024\245\025\042\026\243\031" +
    "\224\032\230\033\231\034\233\035\246\036\234\037\252" +
    "\040\254\043\237\044\253\047\241\052\227\053\250\057" +
    "\235\060\034\061\047\102\256\104\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\062\003\225\005\u012b\007\223\024\245\025\042" +
    "\026\243\031\224\032\230\033\231\034\233\035\246\036" +
    "\234\037\252\040\254\043\237\044\253\047\241\052\227" +
    "\053\250\057\235\060\034\061\047\102\256\104\062\001" +
    "\001\000\060\003\304\007\223\024\245\025\042\026\243" +
    "\031\224\032\230\033\231\034\233\035\246\036\234\037" +
    "\252\040\254\043\237\044\253\047\241\052\227\053\250" +
    "\057\235\060\034\061\047\102\256\104\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\067\u0130\075\u0133\076\u0131\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\067\u0130\076\u0134" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\044" +
    "\070\047\067\053\061\065\u0137\073\u013c\074\u013d\077\u013a" +
    "\100\u013e\102\u013f\104\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\070\u0143\071\u0144\072\u0142" +
    "\106\u0145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\044\070\047\067\053" +
    "\061\065\u0137\077\u0149\102\u013f\104\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\044" +
    "\070\047\067\053\061\065\u0137\077\u014d\102\u013f\104\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\044\070\047\067\053\061\065\u0137\077\u0151" +
    "\102\u013f\104\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\044\070\047\067\053\061\102\u0154\104\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\050" +
    "\166\051\107\001\001\000\024\044\070\045\170\046\116" +
    "\047\067\053\061\065\u0158\066\u0159\102\117\104\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\065\u015c" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\044" +
    "\070\047\067\053\061\102\u015e\104\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\044" +
    "\070\045\206\046\116\047\067\053\061\065\u0158\066\u0162" +
    "\102\117\104\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\027\u0167\030\u0165\001\001\000\002\001\001" +
    "\000\010\015\u016d\062\u016c\063\056\001\001\000\002\001" +
    "\001\000\004\030\u0169\001\001\000\002\001\001\000\004" +
    "\015\u016b\001\001\000\002\001\001\000\006\015\u0174\063" +
    "\060\001\001\000\002\001\001\000\014\044\070\047\067" +
    "\053\061\102\u0170\104\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\044\070\047\067\053" +
    "\061\102\u0176\104\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\020\u017a\021\u0120\023\u011e\001\001\000" +
    "\004\015\u0180\001\001\000\002\001\001\000\004\015\u017c" +
    "\001\001\000\002\001\001\000\062\003\225\005\u017e\007" +
    "\223\024\245\025\042\026\243\031\224\032\230\033\231" +
    "\034\233\035\246\036\234\037\252\040\254\043\237\044" +
    "\253\047\241\052\227\053\250\057\235\060\034\061\047" +
    "\102\256\104\062\001\001\000\060\003\304\007\223\024" +
    "\245\025\042\026\243\031\224\032\230\033\231\034\233" +
    "\035\246\036\234\037\252\040\254\043\237\044\253\047" +
    "\241\052\227\053\250\057\235\060\034\061\047\102\256" +
    "\104\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\062\003\225\005\u0182\007\223\024\245\025\042\026\243" +
    "\031\224\032\230\033\231\034\233\035\246\036\234\037" +
    "\252\040\254\043\237\044\253\047\241\052\227\053\250" +
    "\057\235\060\034\061\047\102\256\104\062\001\001\000" +
    "\060\003\304\007\223\024\245\025\042\026\243\031\224" +
    "\032\230\033\231\034\233\035\246\036\234\037\252\040" +
    "\254\043\237\044\253\047\241\052\227\053\250\057\235" +
    "\060\034\061\047\102\256\104\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\004\u0188\006\041\016\044\017\053\022\032\023" +
    "\040\024\035\025\042\057\050\060\034\061\047\064\033" +
    "\001\001\000\030\006\u0185\016\044\017\053\022\032\023" +
    "\040\024\035\025\042\057\050\060\034\061\047\064\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintacticoGraphik$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintacticoGraphik$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintacticoGraphik$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Errores err = Errores.getInstance();

    public void syntax_error(Symbol token) {
        err.nuevoErrorSintactico((token.left+1),(token.right+1), "Se esperaba "+token.value);
        System.out.println("Error sintactico: linea "+ (token.left+1)+" columna: "+(token.right+1)+" Lexema: "+token.value);

    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        err.nuevoErrorSintactico((s.left+1),(s.right+1), "Se esperaba "+s.value);
        System.out.println("Error sintactico: linea "+ s.left+" columna: "+s.right+" Lexema: "+s.value);

    }  

    public NodoGK nodo;

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$sintacticoGraphik$actions {


    

  private final sintacticoGraphik parser;

  /** Constructor */
  CUP$sintacticoGraphik$actions(sintacticoGraphik parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$sintacticoGraphik$do_action(
    int                        CUP$sintacticoGraphik$act_num,
    java_cup.runtime.lr_parser CUP$sintacticoGraphik$parser,
    java.util.Stack            CUP$sintacticoGraphik$stack,
    int                        CUP$sintacticoGraphik$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintacticoGraphik$result;

      /* select the action based on the action number */
      switch (CUP$sintacticoGraphik$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // LST_DARR ::= EXPRESION 
            {
              NodoGK RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK exp = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("ARREGLO");
                    nodo.hijos.add(exp);
                    RESULT = nodo;
                
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_DARR",63, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // LST_DARR ::= LST_DARR coma EXPRESION 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int dimsleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int dimsright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK dims = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    nodo.hijos.add(dims);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_DARR",63, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // EXPRESION ::= llave_izq LST_DARR llave_der 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",64, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // EXPRESION ::= ACCESO_MET 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",64, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // EXPRESION ::= ACCESOBJ 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",64, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // EXPRESION ::= EXPRESION decremento 
            {
              NodoGK RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK exp = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    NodoGK nodo = new NodoGK("decremento");
                    nodo.hijos.add(exp); 
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",64, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // EXPRESION ::= EXPRESION aumento 
            {
              NodoGK RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK exp = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    NodoGK nodo = new NodoGK("aumento");
                    nodo.hijos.add(exp); 
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",64, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // EXPRESION ::= LLAMADA_HK 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",64, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // EXPRESION ::= LLAMADA_MET 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",64, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // EXPRESION ::= par_izq EXPRESION par_der 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",64, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // EXPRESION ::= menos EXPRESION 
            {
              NodoGK RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("menos");
                    nodo.hijos.add(expr);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",64, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // EXPRESION ::= caracter 
            {
              NodoGK RESULT =null;
		int caracleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int caracright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String carac = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("caracter");
                    nodo.hijos.add(new NodoGK(carac));
                    RESULT=nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",64, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // EXPRESION ::= tkn_falso 
            {
              NodoGK RESULT =null;
		int falsoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int falsoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String falso = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("bool");
                    nodo.hijos.add(new NodoGK(falso, falsoleft, falsoright));
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",64, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // EXPRESION ::= tkn_verdadero 
            {
              NodoGK RESULT =null;
		int verdaderoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int verdaderoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String verdadero = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("bool");
                    nodo.hijos.add(new NodoGK(verdadero, verdaderoleft, verdaderoright));
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",64, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // EXPRESION ::= decimal 
            {
              NodoGK RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("decimal");
                    nodo.hijos.add(new NodoGK(dec, decleft, decright));
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",64, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // EXPRESION ::= identificador LST_DIM 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int dimsleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int dimsright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK dims = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("AccesoArreglo");
                    nodo.hijos.add(new NodoGK(id, idleft, idright));
                    nodo.hijos.add(dims);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",64, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // EXPRESION ::= identificador 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("identificador");
                    nodo.hijos.add(new NodoGK(id, idleft, idright));
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",64, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // EXPRESION ::= texto 
            {
              NodoGK RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("cadena");
                    nodo.hijos.add(new NodoGK(cadena, cadenaleft, cadenaright));
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",64, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // EXPRESION ::= numero 
            {
              NodoGK RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String entero = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("entero");
                    nodo.hijos.add(new NodoGK(entero, enteroleft, enteroright));
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",64, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // EXPRESION ::= EXPRESION potencia EXPRESION 
            {
              NodoGK RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr1 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr2 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("pot");
                    nodo.hijos.add(expr1);
                    nodo.hijos.add(expr2);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",64, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // EXPRESION ::= EXPRESION div EXPRESION 
            {
              NodoGK RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr1 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr2 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("div");
                    nodo.hijos.add(expr1);
                    nodo.hijos.add(expr2);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",64, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // EXPRESION ::= EXPRESION por EXPRESION 
            {
              NodoGK RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr1 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr2 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("por");
                    nodo.hijos.add(expr1);
                    nodo.hijos.add(expr2);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",64, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // EXPRESION ::= EXPRESION menos EXPRESION 
            {
              NodoGK RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr1 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr2 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("menos");
                    nodo.hijos.add(expr1);
                    nodo.hijos.add(expr2);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",64, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // EXPRESION ::= EXPRESION mas EXPRESION 
            {
              NodoGK RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr1 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr2 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("mas");
                    nodo.hijos.add(expr1);
                    nodo.hijos.add(expr2);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",64, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // EXPRESION ::= EXPRESION mayor_igual EXPRESION 
            {
              NodoGK RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr1 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr2 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("mayorI");
                    nodo.hijos.add(expr1);
                    nodo.hijos.add(expr2);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",64, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // EXPRESION ::= EXPRESION menor_igual EXPRESION 
            {
              NodoGK RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr1 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr2 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("menorI");
                    nodo.hijos.add(expr1);
                    nodo.hijos.add(expr2);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",64, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // EXPRESION ::= EXPRESION mayor EXPRESION 
            {
              NodoGK RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr1 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr2 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("mayor");
                    nodo.hijos.add(expr1);
                    nodo.hijos.add(expr2);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",64, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // EXPRESION ::= EXPRESION menor EXPRESION 
            {
              NodoGK RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr1 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr2 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("menor");
                    nodo.hijos.add(expr1);
                    nodo.hijos.add(expr2);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",64, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // EXPRESION ::= EXPRESION diferente EXPRESION 
            {
              NodoGK RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr1 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr2 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("diferente");
                    nodo.hijos.add(expr1);
                    nodo.hijos.add(expr2);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",64, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // EXPRESION ::= EXPRESION igualacion EXPRESION 
            {
              NodoGK RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr1 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr2 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("igualacion");
                    nodo.hijos.add(expr1);
                    nodo.hijos.add(expr2);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",64, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // EXPRESION ::= tkn_not EXPRESION 
            {
              NodoGK RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr1 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("not");
                    nodo.hijos.add(expr1);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",64, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // EXPRESION ::= EXPRESION tkn_and EXPRESION 
            {
              NodoGK RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr1 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr2 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("and");
                    nodo.hijos.add(expr1);
                    nodo.hijos.add(expr2);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",64, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // EXPRESION ::= EXPRESION tkn_xor EXPRESION 
            {
              NodoGK RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr1 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr2 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("xor");
                    nodo.hijos.add(expr1);
                    nodo.hijos.add(expr2);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",64, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // EXPRESION ::= EXPRESION tkn_or EXPRESION 
            {
              NodoGK RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr1 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr2 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("or");
                    nodo.hijos.add(expr1);
                    nodo.hijos.add(expr2);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXPRESION",64, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // DONDETODO ::= tkn_dondetodo par_izq EXP par_der int_der 
            {
              NodoGK RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK exp = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		
                    NodoGK nodo = new NodoGK("DONDETODO");
                    nodo.hijos.add(exp);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("DONDETODO",56, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // DONDECADA ::= tkn_dondecada par_izq EXP par_der int_der 
            {
              NodoGK RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK exp = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		
                    NodoGK nodo = new NodoGK("DONDECADA");
                    nodo.hijos.add(exp);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("DONDECADA",55, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // DONDE ::= tkn_donde par_izq EXP par_der igual EXPRESION int_der 
            {
              NodoGK RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).right;
		NodoGK exp = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK expr = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    NodoGK nodo = new NodoGK("DONDE");
                    nodo.hijos.add(exp);
                    nodo.hijos.add(expr);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("DONDE",54, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // LST_COLUMNA ::= COLUMNA 
            {
              NodoGK RESULT =null;
		int colleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int colright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK col = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                        NodoGK nodo = new NodoGK("COLUMNAS");
                        nodo.hijos.add(col);
                        RESULT = nodo;
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_COLUMNA",52, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // LST_COLUMNA ::= LST_COLUMNA coma COLUMNA 
            {
              NodoGK RESULT =null;
		int colsleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int colsright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK cols = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int colright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK col = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                        cols.hijos.add(col);
                        RESULT = cols;
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_COLUMNA",52, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // NORMAL ::= tkn_llamar identificador par_izq LST_COLUMNA par_der 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).value;
		int colsleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int colsright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK cols = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                NodoGK nodo = new NodoGK("LLAMADA_MET_DATOS");
                nodo.hijos.add(new NodoGK(id, idleft, idright));
                nodo.hijos.add(cols);
                RESULT = nodo;
                
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("NORMAL",58, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // HASKELL ::= tkn_llamarHK identificador par_izq LST_COLUMNA par_der 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).value;
		int colsleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int colsright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK cols = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                NodoGK nodo = new NodoGK("LLAMADA_HK_DATOS");
                nodo.hijos.add(new NodoGK(id, idleft, idright));
                nodo.hijos.add(cols);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("HASKELL",57, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // MET_ESPECIALES ::= EXP 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("MET_ESPECIALES",62, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // MET_ESPECIALES ::= NORMAL 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("MET_ESPECIALES",62, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // MET_ESPECIALES ::= HASKELL 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("MET_ESPECIALES",62, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // PROCESAR ::= tkn_procesar igual MET_ESPECIALES int_der OPCIONES 
            {
              NodoGK RESULT =null;
		int metleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK met = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK opc = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("PROCESAR");
                    nodo.hijos.add(met);
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("PROCESAR",53, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // EXP ::= COLUMNA 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXP",61, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // EXP ::= EXPRESION 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("EXP",61, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // COLUMNA ::= tkn_columna par_izq EXPRESION par_der 
            {
              NodoGK RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK expr = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                NodoGK nodo = new NodoGK("columna");
                nodo.hijos.add(expr);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("COLUMNA",51, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OPCIONES ::= DONDETODO 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OPCIONES",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OPCIONES ::= DONDECADA 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OPCIONES",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OPCIONES ::= DONDE 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("OPCIONES",68, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // SDATOS ::= PROCESAR 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SDATOS",60, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // SENT_DATOS ::= SDATOS 
            {
              NodoGK RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK dato = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("SENTENCIAS");
                    nodo.hijos.add(dato);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENT_DATOS",59, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // SENT_DATOS ::= SENT_DATOS SDATOS 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK dato = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    nodo.hijos.add(dato);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENT_DATOS",59, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // DATOS ::= tkn_vacio tkn_datos par_izq par_der llave_izq SENT_DATOS llave_der 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK sent = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                NodoGK nodo = new NodoGK("DATOS");
                nodo.hijos.add(sent);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("DATOS",50, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // AARR ::= identificador LST_DIM igual EXPRESION 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).value;
		int dimsleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int dimsright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK dims = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                NodoGK nodo = new NodoGK("ASIGNA_ARR");
                nodo.hijos.add(new NodoGK(id, idleft, idright));
                nodo.hijos.add(dims);
                nodo.hijos.add(expr);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("AARR",47, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // DIM ::= cor_izq EXPRESION cor_der 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("DIM",49, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // LST_DIM ::= DIM 
            {
              NodoGK RESULT =null;
		int dimsleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int dimsright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK dims = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                NodoGK nodo = new NodoGK("DIMS");
                nodo.hijos.add(dims);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_DIM",48, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // LST_DIM ::= LST_DIM DIM 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int dimsleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int dimsright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK dims = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                nodo.hijos.add(dims);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_DIM",48, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // DARR ::= tkn_var TIPO identificador LST_DIM VISIBILIDAD igual EXPRESION 
            {
              NodoGK RESULT =null;
		int tpoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).left;
		int tporight = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).right;
		NodoGK tpo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).value;
		int dimsleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).left;
		int dimsright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).right;
		NodoGK dims = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).value;
		int visleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int visright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK vis = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int asgleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int asgright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK asg = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                NodoGK nodo = new NodoGK("DECLARA_ASIG_ARR");
                nodo.hijos.add(tpo);
                nodo.hijos.add(new NodoGK(id, idleft, idright));
                nodo.hijos.add(dims);
                nodo.hijos.add(vis);
                nodo.hijos.add(asg);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("DARR",46, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // DARR ::= tkn_var TIPO identificador LST_DIM VISIBILIDAD 
            {
              NodoGK RESULT =null;
		int tpoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).left;
		int tporight = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).right;
		NodoGK tpo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int dimsleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int dimsright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK dims = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int visleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int visright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK vis = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                NodoGK nodo = new NodoGK("DECLARA_ARR");
                nodo.hijos.add(tpo);
                nodo.hijos.add(new NodoGK(id, idleft, idright));
                nodo.hijos.add(dims);
                nodo.hijos.add(vis);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("DARR",46, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ARREGLOS ::= AARR 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ARREGLOS",45, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ARREGLOS ::= DARR 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ARREGLOS",45, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // IMPRIMIR ::= tkn_imprimirK par_izq EXPRESION par_der int_der 
            {
              NodoGK RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		
                    NodoGK nodo = new NodoGK("IMPRIMIR");
                    nodo.hijos.add(expr);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",5, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // IMPRIMIR ::= tkn_imprimir par_izq EXPRESION par_der int_der 
            {
              NodoGK RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		
                    NodoGK nodo = new NodoGK("IMPRIMIR");
                    nodo.hijos.add(expr);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",5, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // GRAFICAR ::= tkn_graphikar par_izq EXPRESION coma EXPRESION par_der int_der 
            {
              NodoGK RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).right;
		NodoGK expr1 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK expr2 = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		
                    NodoGK nodo = new NodoGK("GRAFICAR");
                    nodo.hijos.add(expr1);
                    nodo.hijos.add(expr2);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("GRAFICAR",40, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NIVEL ::= punto identificador LST_DIM 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int dimsleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int dimsright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK dims = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("AccesoArreglo");
                    nodo.hijos.add(new NodoGK(id, idleft, idright));
                    nodo.hijos.add(dims);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("NIVEL",39, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NIVEL ::= punto ACCESO_MET 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("NIVEL",39, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NIVEL ::= punto identificador 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 
                NodoGK nodo = new NodoGK(id, idleft, idright);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("NIVEL",39, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // LST_NIVEL ::= NIVEL 
            {
              NodoGK RESULT =null;
		int nivleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nivright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK niv = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("NIVELES");
                    nodo.hijos.add(niv);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_NIVEL",38, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // LST_NIVEL ::= LST_NIVEL NIVEL 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int nivleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nivright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK niv = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    nodo.hijos.add(niv);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_NIVEL",38, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ACCESOBJ ::= tkn_llamar identificador LST_NIVEL 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK lst = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("ACCESOBJ_LLAMADA");
                    nodo.hijos.add(new NodoGK(id, idleft, idright));
                    nodo.hijos.add(lst);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ACCESOBJ",37, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ACCESOBJ ::= identificador LST_NIVEL 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK lst = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("ACCESOBJ");
                    nodo.hijos.add(new NodoGK(id, idleft, idright));
                    nodo.hijos.add(lst);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ACCESOBJ",37, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ACCESO_MET ::= identificador par_izq LST_PARAM par_der 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).value;
		int lstparleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int lstparright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK lstpar = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    NodoGK nodo = new NodoGK("LLAMAR_MET");
                    nodo.hijos.add(new NodoGK(id, idleft, idright));
                    nodo.hijos.add(lstpar);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ACCESO_MET",66, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ACCESO_MET ::= identificador par_izq par_der 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		
                    NodoGK nodo = new NodoGK("LLAMAR_MET");
                    nodo.hijos.add(new NodoGK(id, idleft, idright));
                    nodo.hijos.add(new NodoGK("sinparametros"));
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ACCESO_MET",66, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // PARAM ::= EXPRESION 
            {
              NodoGK RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		RESULT = expr;
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("PARAM",36, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // LST_PARAM ::= PARAM 
            {
              NodoGK RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK par = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("PARAMETROS");
                    nodo.hijos.add(par);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_PARAM",35, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // LST_PARAM ::= LST_PARAM coma PARAM 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK par = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    nodo.hijos.add(par);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_PARAM",35, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // LLAMADA_HK ::= tkn_llamarHK identificador par_izq par_der 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		
                    NodoGK nodo = new NodoGK("LLAMARHK");
                    nodo.hijos.add(new NodoGK(id, idleft, idright));
                    nodo.hijos.add(new NodoGK("sinparametros"));
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLAMADA_HK",41, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // LLAMADA_HK ::= tkn_llamarHK identificador par_izq LST_PARAM par_der 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).value;
		int lstparleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int lstparright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK lstpar = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    NodoGK nodo = new NodoGK("LLAMARHK");
                    nodo.hijos.add(new NodoGK(id, idleft, idright));
                    nodo.hijos.add(lstpar);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLAMADA_HK",41, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LLAMADA_MET ::= tkn_llamar tkn_datos par_izq par_der 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		
                    NodoGK nodo = new NodoGK("LLAMAR_MET");
                    nodo.hijos.add(new NodoGK(id, idleft, idright));
                    nodo.hijos.add(new NodoGK("sinparametros"));
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLAMADA_MET",34, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // LLAMADA_MET ::= tkn_llamar identificador par_izq par_der 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		
                    NodoGK nodo = new NodoGK("LLAMAR_MET");
                    nodo.hijos.add(new NodoGK(id, idleft, idright));
                    nodo.hijos.add(new NodoGK("sinparametros"));
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLAMADA_MET",34, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // LLAMADA_MET ::= tkn_llamar identificador par_izq LST_PARAM par_der 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).value;
		int lstparleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int lstparright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK lstpar = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    NodoGK nodo = new NodoGK("LLAMAR_MET");
                    nodo.hijos.add(new NodoGK(id, idleft, idright));
                    nodo.hijos.add(lstpar);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLAMADA_MET",34, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // RETORNO ::= tkn_retornar int_der 
            {
              NodoGK RESULT =null;
		
                    NodoGK nodo = new NodoGK("RETORNO");
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("RETORNO",33, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // RETORNO ::= tkn_retornar EXPRESION int_der 
            {
              NodoGK RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK expr = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    NodoGK nodo = new NodoGK("RETORNO");
                    nodo.hijos.add(expr);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("RETORNO",33, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TERMINAR ::= tkn_terminar int_der 
            {
              NodoGK RESULT =null;
		
                    NodoGK nodo = new NodoGK("TERMINAR");   
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TERMINAR",29, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CONTINUAR ::= tkn_continuar int_der 
            {
              NodoGK RESULT =null;
		
                    NodoGK nodo = new NodoGK("CONTINUAR");   
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CONTINUAR",28, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // HACERMIENTRAS ::= tkn_hacer llave_izq LST_SENTENCIAS llave_der tkn_mientras par_izq EXPRESION par_der 
            {
              NodoGK RESULT =null;
		int lstsenleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).left;
		int lstsenright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).right;
		NodoGK lstsen = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK expr = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                        NodoGK nodo = new NodoGK("HACERMIENTRAS");
                        nodo.hijos.add(expr);
                        nodo.hijos.add(lstsen);
                        RESULT = nodo;
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("HACERMIENTRAS",26, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // MIENTRAS ::= tkn_mientras par_izq EXPRESION par_der llave_izq LST_SENTENCIAS llave_der 
            {
              NodoGK RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).right;
		NodoGK expr = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).value;
		int lstsenleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int lstsenright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK lstsen = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                        NodoGK nodo = new NodoGK("MIENTRAS");
                        nodo.hijos.add(expr);
                        nodo.hijos.add(lstsen);
                        RESULT = nodo;
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("MIENTRAS",25, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ACCION ::= ASIGNACION 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ACCION",44, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ACCION ::= EXPRESION decremento 
            {
              NodoGK RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK exp = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    NodoGK nodo = new NodoGK("decremento");
                    nodo.hijos.add(exp);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ACCION",44, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ACCION ::= EXPRESION aumento 
            {
              NodoGK RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK exp = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    NodoGK nodo = new NodoGK("aumento");
                    nodo.hijos.add(exp);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ACCION",44, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ASIG_PARA ::= ASIGNACION 
            {
              NodoGK RESULT =null;
		int asgleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int asgright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK asg = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = asg; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIG_PARA",67, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ASIG_PARA ::= tkn_var TIPO identificador igual EXPRESION 
            {
              NodoGK RESULT =null;
		int tpoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).left;
		int tporight = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).right;
		NodoGK tpo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("DECLARA_ASIG_VAR");
                    nodo.hijos.add(tpo);
                    nodo.hijos.add(new NodoGK(id, idleft, idright));
                    nodo.hijos.add(new NodoGK("publico"));
                    nodo.hijos.add(expr);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIG_PARA",67, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PARA ::= tkn_para par_izq ASIG_PARA dosp EXPRESION dosp ACCION par_der llave_izq LST_SENTENCIAS llave_der 
            {
              NodoGK RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-8)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-8)).right;
		NodoGK asig = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-8)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)).right;
		NodoGK exp = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)).value;
		int accleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).left;
		int accright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).right;
		NodoGK acc = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).value;
		int lstsenleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int lstsenright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK lstsen = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                NodoGK nodo = new NodoGK("PARA");
                nodo.hijos.add(asig);
                nodo.hijos.add(exp);
                nodo.hijos.add(acc);
                nodo.hijos.add(lstsen);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("PARA",30, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-10)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CASOS ::= tkn_defecto dosp LST_SENTENCIAS 
            {
              NodoGK RESULT =null;
		int lstsenleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int lstsenright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK lstsen = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                NodoGK nodo = new NodoGK("DEFECTO");
                nodo.hijos.add(lstsen);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CASOS",32, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CASOS ::= tkn_caso EXPRESION dosp LST_SENTENCIAS 
            {
              NodoGK RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK exp = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int lstsenleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int lstsenright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK lstsen = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                NodoGK nodo = new NodoGK("CASE");
                nodo.hijos.add(exp);
                nodo.hijos.add(lstsen);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CASOS",32, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LST_CASOS ::= CASOS 
            {
              NodoGK RESULT =null;
		int casleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int casright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK cas = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("CASOS");
                    nodo.hijos.add(cas);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_CASOS",31, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LST_CASOS ::= LST_CASOS CASOS 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int casleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int casright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK cas = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    nodo.hijos.add(cas);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_CASOS",31, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SELECCIONA ::= tkn_seleccion EXPRESION llave_izq LST_CASOS llave_der 
            {
              NodoGK RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).right;
		NodoGK expr = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK lst = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    NodoGK nodo = new NodoGK("SELECCIONA");
                    nodo.hijos.add(expr);
                    nodo.hijos.add(lst);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SELECCIONA",27, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SINO ::= SI tkn_sino llave_izq LST_SENTENCIAS llave_der 
            {
              NodoGK RESULT =null;
		int nsileft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).left;
		int nsiright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).right;
		NodoGK nsi = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK lst = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                NodoGK nodo = new NodoGK("SINO");
                nodo.hijos.add(nsi);
                nodo.hijos.add(lst);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SINO",24, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SI ::= tkn_si par_izq EXPRESION par_der llave_izq LST_SENTENCIAS llave_der 
            {
              NodoGK RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).right;
		NodoGK expr = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK lst = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                NodoGK nodo = new NodoGK("SI");
                nodo.hijos.add(expr);
                nodo.hijos.add(lst);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SI",23, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VAR ::= identificador VISIBILIDAD 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int visleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int visright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK vis = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                NodoGK nodo = new NodoGK("VAR");
                nodo.hijos.add(new NodoGK(id, idleft, idright));
                nodo.hijos.add(vis);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VAR",22, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LST_VARIABLES ::= VAR 
            {
              NodoGK RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK vars = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                        NodoGK nodo = new NodoGK("VARIABLES");
                        nodo.hijos.add(vars);
                        RESULT = nodo;
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_VARIABLES",21, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LST_VARIABLES ::= LST_VARIABLES coma VAR 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK vars = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                        nodo.hijos.add(vars);
                        RESULT = nodo;
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_VARIABLES",21, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ASIGNACION ::= ACCESOBJ igual tkn_nuevo identificador par_izq par_der 
            {
              NodoGK RESULT =null;
		int accleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).left;
		int accright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).right;
		NodoGK acc = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		
                        NodoGK nodo = new NodoGK("ACCESOBJ_INSTANCIA");
                        nodo.hijos.add(acc);
                        nodo.hijos.add(new NodoGK(id2, id2left, id2right));
                        RESULT = nodo;
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIGNACION",20, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ASIGNACION ::= ACCESOBJ igual EXPRESION 
            {
              NodoGK RESULT =null;
		int accleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int accright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK acc = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK exp = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                        NodoGK nodo = new NodoGK("ASIG_ACCESOBJ");
                        nodo.hijos.add(acc);
                        nodo.hijos.add(exp);
                        RESULT = nodo;
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIGNACION",20, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ASIGNACION ::= identificador igual tkn_nuevo identificador par_izq par_der 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		
                        NodoGK nodo = new NodoGK("ASIG_OBJ");
                        nodo.hijos.add(new NodoGK(id, idleft, idright));
                        nodo.hijos.add(new NodoGK(id2, id2left, id2right));
                        RESULT = nodo;
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIGNACION",20, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ASIGNACION ::= identificador igual EXPRESION 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                        NodoGK nodo = new NodoGK("ASIGNACION");
                        nodo.hijos.add(new NodoGK(id, idleft, idright));
                        nodo.hijos.add(expr);
                        RESULT = nodo;
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("ASIGNACION",20, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VARIABLES ::= tkn_var TIPO identificador VISIBILIDAD igual tkn_nuevo identificador par_izq par_der 
            {
              NodoGK RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-7)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-7)).right;
		NodoGK tip = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)).value;
		int visleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).left;
		int visright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).right;
		NodoGK vis = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		
                        NodoGK nodo = new NodoGK("DECLARA_ASIG_OBJ");
                        nodo.hijos.add(tip);
                        nodo.hijos.add(new NodoGK(id, idleft, idright));
                        nodo.hijos.add(vis);
                        nodo.hijos.add(new NodoGK(id2, idleft, idright));
                        RESULT = nodo;
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VARIABLES",19, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-8)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VARIABLES ::= tkn_var TIPO identificador VISIBILIDAD igual EXPRESION 
            {
              NodoGK RESULT =null;
		int tpoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).left;
		int tporight = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).right;
		NodoGK tpo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).value;
		int visleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int visright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK vis = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK expr = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                        NodoGK nodo = new NodoGK("DECLARA_ASIG_VAR");
                        nodo.hijos.add(tpo);
                        nodo.hijos.add(new NodoGK(id, idleft, idright));
                        nodo.hijos.add(vis);
                        nodo.hijos.add(expr);
                        RESULT = nodo;
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VARIABLES",19, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VARIABLES ::= tkn_var TIPO LST_VARIABLES 
            {
              NodoGK RESULT =null;
		int tpoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int tporight = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK tpo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK lst = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                        NodoGK nodo = new NodoGK("DECLARA_VAR");
                        nodo.hijos.add(tpo);
                        nodo.hijos.add(lst);
                        RESULT = nodo;
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VARIABLES",19, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION ::= VARIABLES 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("DECLARACION",18, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENTENCIAS ::= ACCESOBJ int_der 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTENCIAS ::= ARREGLOS int_der 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIAS ::= ASIGNACION int_der 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTENCIAS ::= DECLARACION int_der 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTENCIAS ::= EXPRESION decremento int_der 
            {
              NodoGK RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK exp = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		
                        NodoGK nodo = new NodoGK("decremento");
                        nodo.hijos.add(exp);
                        RESULT = nodo;
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIAS ::= EXPRESION aumento int_der 
            {
              NodoGK RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK exp = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		
                        NodoGK nodo = new NodoGK("aumento");
                        nodo.hijos.add(exp);
                        RESULT = nodo;
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIAS ::= IMPRIMIR 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIAS ::= GRAFICAR 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIAS ::= LLAMADA_HK int_der 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIAS ::= LLAMADA_MET int_der 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIAS ::= RETORNO 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIAS ::= TERMINAR 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIAS ::= CONTINUAR 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIAS ::= HACERMIENTRAS 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIAS ::= MIENTRAS 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIAS ::= PARA 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIAS ::= SELECCIONA 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIAS ::= SINO 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIAS ::= SI 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LST_SENTENCIAS ::= SENTENCIAS 
            {
              NodoGK RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK sent = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                            NodoGK nodo = new NodoGK("SENTENCIAS");
                            nodo.hijos.add(sent);
                            RESULT = nodo;
                        
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_SENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LST_SENTENCIAS ::= LST_SENTENCIAS SENTENCIAS 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK sent = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                            nodo.hijos.add(sent);
                            RESULT = nodo;
                        
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_SENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPO ::= identificador 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                NodoGK nodo = new NodoGK(id, idleft, idright);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TIPO",17, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPO ::= tkn_bool 
            {
              NodoGK RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String bool = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                NodoGK nodo = new NodoGK(bool, boolleft, boolright);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TIPO",17, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TIPO ::= tkn_entero 
            {
              NodoGK RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String ent = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                NodoGK nodo = new NodoGK(ent, entleft, entright);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TIPO",17, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIPO ::= tkn_decimal 
            {
              NodoGK RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                NodoGK nodo = new NodoGK(dec, decleft, decright);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TIPO",17, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIPO ::= tkn_caracter 
            {
              NodoGK RESULT =null;
		int carleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int carright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String car = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                NodoGK nodo = new NodoGK(car, carleft, carright);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TIPO",17, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIPO ::= tkn_cadena 
            {
              NodoGK RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                NodoGK nodo = new NodoGK(cad, cadleft, cadright);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("TIPO",17, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // MET_INICIO ::= tkn_vacio tkn_inicio par_izq par_der llave_izq LST_SENTENCIAS llave_der 
            {
              NodoGK RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK lst = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    NodoGK nodo = new NodoGK("MAIN");
                    nodo.hijos.add(lst);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("MET_INICIO",16, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PARAMETRO ::= TIPO identificador 
            {
              NodoGK RESULT =null;
		int tpoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int tporight = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK tpo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("PAR");
                    nodo.hijos.add(tpo);
                    nodo.hijos.add(new NodoGK(id, idleft, idright));
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("PARAMETRO",15, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LST_PARAMETROS ::= PARAMETRO 
            {
              NodoGK RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK par = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                            NodoGK nodo = new NodoGK("PARAMETROS");
                            nodo.hijos.add(par);
                            RESULT = nodo;
                        
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_PARAMETROS",14, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LST_PARAMETROS ::= LST_PARAMETROS coma PARAMETRO 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK par = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                            nodo.hijos.add(par);
                            RESULT = nodo;
                        
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_PARAMETROS",14, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FUNCION ::= TIPO identificador par_izq par_der VISIBILIDAD llave_izq LST_SENTENCIAS llave_der 
            {
              NodoGK RESULT =null;
		int tpoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-7)).left;
		int tporight = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-7)).right;
		NodoGK tpo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)).value;
		int visleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).left;
		int visright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).right;
		NodoGK vis = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK lst = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    NodoGK nodo = new NodoGK("FUNCION");
                    nodo.hijos.add(tpo);
                    nodo.hijos.add(new NodoGK(id, idleft, idright));
                    nodo.hijos.add(new NodoGK("sinparametros"));
                    nodo.hijos.add(vis);
                    nodo.hijos.add(lst);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("FUNCION",13, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FUNCION ::= TIPO identificador par_izq LST_PARAMETROS par_der VISIBILIDAD llave_izq LST_SENTENCIAS llave_der 
            {
              NodoGK RESULT =null;
		int tpoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-8)).left;
		int tporight = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-8)).right;
		NodoGK tpo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-7)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).right;
		NodoGK par = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).value;
		int visleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).left;
		int visright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).right;
		NodoGK vis = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK lst = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    NodoGK nodo = new NodoGK("FUNCION");
                    nodo.hijos.add(tpo);
                    nodo.hijos.add(new NodoGK(id, idleft, idright));
                    nodo.hijos.add(par);
                    nodo.hijos.add(vis);
                    nodo.hijos.add(lst);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("FUNCION",13, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-8)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // METODO ::= tkn_vacio identificador par_izq par_der VISIBILIDAD llave_izq LST_SENTENCIAS llave_der 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)).value;
		int visleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).left;
		int visright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).right;
		NodoGK vis = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK lst = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    NodoGK nodo = new NodoGK("METODO");
                    nodo.hijos.add(new NodoGK(id, idleft, idright));
                    nodo.hijos.add(new NodoGK("sinparametros"));
                    nodo.hijos.add(vis);
                    nodo.hijos.add(lst);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("METODO",12, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // METODO ::= tkn_vacio identificador par_izq LST_PARAMETROS par_der VISIBILIDAD llave_izq LST_SENTENCIAS llave_der 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-7)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).right;
		NodoGK par = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)).value;
		int visleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).left;
		int visright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).right;
		NodoGK vis = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK lst = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    NodoGK nodo = new NodoGK("METODO");
                    nodo.hijos.add(new NodoGK(id, idleft, idright));
                    nodo.hijos.add(par);
                    nodo.hijos.add(vis);
                    nodo.hijos.add(lst);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("METODO",12, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-8)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTS ::= ARREGLOS int_der 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTS",4, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTS ::= DECLARACION int_der 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTS",4, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTS ::= DATOS 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTS",4, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTS ::= MET_INICIO 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTS",4, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTS ::= FUNCION 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTS",4, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTS ::= METODO 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("SENTS",4, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LST_SEN ::= SENTS 
            {
              NodoGK RESULT =null;
		int senleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int senright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK sen = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("CUERPO");
                    nodo.hijos.add(sen);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_SEN",2, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LST_SEN ::= LST_SEN SENTS 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int senleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int senright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK sen = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    nodo.hijos.add(sen);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_SEN",2, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VISIBILIDAD ::= 
            {
              NodoGK RESULT =null;
		
                        NodoGK nodo = new NodoGK("publico");
                        RESULT = nodo; 
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",11, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VISIBILIDAD ::= dosp tkn_protegido 
            {
              NodoGK RESULT =null;
		int proleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int proright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String pro = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                        NodoGK nodo = new NodoGK(pro, proleft, proright);
                        RESULT = nodo; 
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",11, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VISIBILIDAD ::= dosp tkn_privado 
            {
              NodoGK RESULT =null;
		int prileft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int priright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String pri = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                        NodoGK nodo = new NodoGK(pri, prileft, priright);
                        RESULT = nodo; 
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",11, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VISIBILIDAD ::= dosp tkn_publico 
            {
              NodoGK RESULT =null;
		int publeft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int pubright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		String pub = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                        NodoGK nodo = new NodoGK(pub, publeft, pubright);
                        RESULT = nodo; 
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",11, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CUERPO ::= tkn_als identificador tkn_hereda identificador VISIBILIDAD llave_izq LST_SEN llave_der 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).value;
		int visleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).left;
		int visright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).right;
		NodoGK vis = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK lst = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                NodoGK nodo = new NodoGK("ALS");
                nodo.hijos.add(new NodoGK(id, idleft, idright));
                nodo.hijos.add(new NodoGK(id2, id2left, id2right));
                nodo.hijos.add(vis);
                nodo.hijos.add(lst);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",8, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CUERPO ::= tkn_als identificador VISIBILIDAD llave_izq LST_SEN llave_der 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-4)).value;
		int visleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).left;
		int visright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).right;
		NodoGK vis = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK lst = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                NodoGK nodo = new NodoGK("ALS");
                nodo.hijos.add(new NodoGK(id, idleft, idright));
                nodo.hijos.add(vis);
                nodo.hijos.add(lst);
                RESULT = nodo;
            
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("CUERPO",8, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LST_CUERPO ::= CUERPO 
            {
              NodoGK RESULT =null;
		int culeft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int curight = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK cu = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("CLASES");
                    nodo.hijos.add(cu);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_CUERPO",65, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LST_CUERPO ::= LST_CUERPO CUERPO 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int culeft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int curight = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK cu = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    nodo.hijos.add(cu);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_CUERPO",65, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LLAMADAS ::= tkn_incluirHK identificador int_der 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    NodoGK nodo = new NodoGK(id, idleft, idright);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLAMADAS",10, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LLAMADASHK ::= LLAMADAS 
            {
              NodoGK RESULT =null;
		int llamadaleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int llamadaright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK llamada = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("LLAMADASHK");
                    nodo.hijos.add(llamada);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLAMADASHK",7, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LLAMADASHK ::= LLAMADASHK LLAMADAS 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int llamadaleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int llamadaright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK llamada = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    nodo.hijos.add(llamada);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLAMADASHK",7, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IMPORTAR ::= tkn_importar nombreArchivo int_der 
            {
              NodoGK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		
                    NodoGK nodo = new NodoGK(id, idleft, idright);
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("IMPORTAR",9, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LST_IMPORTAR ::= IMPORTAR 
            {
              NodoGK RESULT =null;
		int impleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int impright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK imp = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                        NodoGK nodo = new NodoGK("IMPORTS");
                        nodo.hijos.add(imp);
                        RESULT = nodo;
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_IMPORTAR",6, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LST_IMPORTAR ::= LST_IMPORTAR IMPORTAR 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int impleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int impright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK imp = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                        nodo.hijos.add(imp);
                        RESULT = nodo; 
                    
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LST_IMPORTAR",6, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LLAMARHK ::= 
            {
              NodoGK RESULT =null;
		
                    NodoGK nodo = new NodoGK("LLAMADASHK");
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLAMARHK",43, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LLAMARHK ::= LLAMADASHK 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo;
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("LLAMARHK",43, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IMPORTS ::= 
            {
              NodoGK RESULT =null;
		
                    NodoGK nodo = new NodoGK("IMPORTS");
                    RESULT = nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("IMPORTS",42, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // IMPORTS ::= LST_IMPORTAR 
            {
              NodoGK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK nodo = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		 RESULT = nodo;
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("IMPORTS",42, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= IMPORTS LLAMARHK LST_CUERPO 
            {
              NodoGK RESULT =null;
		int impleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).left;
		int impright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).right;
		NodoGK imp = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)).value;
		int llamleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int llamright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK llam = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		int cueleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).left;
		int cueright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()).right;
		NodoGK cue = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.peek()).value;
		
                    NodoGK nodo = new NodoGK("GRAPHIK");
                    nodo.hijos.add(imp);
                    nodo.hijos.add(llam);
                    nodo.hijos.add(cue);
                    parser.nodo=nodo;
                
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          return CUP$sintacticoGraphik$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).right;
		NodoGK start_val = (NodoGK)((java_cup.runtime.Symbol) CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)).value;
		RESULT = start_val;
              CUP$sintacticoGraphik$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.elementAt(CUP$sintacticoGraphik$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGraphik$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintacticoGraphik$parser.done_parsing();
          return CUP$sintacticoGraphik$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

