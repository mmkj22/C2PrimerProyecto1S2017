
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Mar 17 12:40:10 CST 2017
//----------------------------------------------------

package Analisis;

import java_cup.runtime.*;
import java.io.*;
import Haskell.*;
import Errores.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Mar 17 12:40:10 CST 2017
  */
public class sintacticoConsole extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public sintacticoConsole() {super();}

  /** Constructor which sets the default scanner. */
  public sintacticoConsole(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintacticoConsole(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\173\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\005\010\000\002\005\007\000\002\024\005\000\002" +
    "\024\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\005\000\002\025\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\007\006\000\002\007\006" +
    "\000\002\007\006\000\002\033\005\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\045\003\000\002" +
    "\045\003\000\002\031\005\000\002\031\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\005" +
    "\000\002\042\005\000\002\042\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\043\003\000\002" +
    "\010\006\000\002\010\006\000\002\010\006\000\002\011" +
    "\006\000\002\011\006\000\002\011\006\000\002\034\003" +
    "\000\002\012\006\000\002\012\006\000\002\013\006\000" +
    "\002\013\006\000\002\013\006\000\002\014\006\000\002" +
    "\014\006\000\002\014\006\000\002\015\006\000\002\015" +
    "\006\000\002\015\006\000\002\016\006\000\002\016\006" +
    "\000\002\016\006\000\002\017\006\000\002\017\006\000" +
    "\002\017\006\000\002\020\006\000\002\020\006\000\002" +
    "\020\006\000\002\021\006\000\002\021\006\000\002\021" +
    "\006\000\002\022\006\000\002\022\006\000\002\022\006" +
    "\000\002\023\006\000\002\023\006\000\002\023\006\000" +
    "\002\035\004\000\002\036\004\000\002\036\003\000\002" +
    "\037\004\000\002\044\004\000\002\044\004\000\002\026" +
    "\004\000\002\026\003\000\002\027\004\000\002\027\004" +
    "\000\002\027\004\000\002\027\004\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\040\005\000\002\040\003\000\002\006\006\000\002\041" +
    "\005\000\002\041\005\000\002\041\005\000\002\041\005" +
    "\000\002\041\005\000\002\041\005\000\002\041\005\000" +
    "\002\041\004\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\005\000\002\041" +
    "\003\000\002\041\003\000\002\041\003\000\002\041\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\327\000\016\005\007\006\037\010\015\032\020\044" +
    "\021\051\017\001\002\000\020\002\ufff9\005\ufff9\006\ufff9" +
    "\010\ufff9\032\ufff9\044\ufff9\051\ufff9\001\002\000\020\002" +
    "\000\005\007\006\037\010\015\032\020\044\021\051\017" +
    "\001\002\000\050\002\uffe7\005\uffe7\006\uffe7\010\uffe7\027" +
    "\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7" +
    "\037\uffe7\040\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\046" +
    "\uffe7\051\uffe7\001\002\000\052\002\uffdf\005\uffdf\006\uffdf" +
    "\010\uffdf\027\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035" +
    "\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf" +
    "\044\uffdf\045\uffdf\046\uffdf\051\uffdf\001\002\000\050\002" +
    "\uffeb\005\uffeb\006\uffeb\010\uffeb\027\uffeb\031\uffeb\032\uffeb" +
    "\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\041" +
    "\uffeb\042\uffeb\043\uffeb\044\uffeb\046\uffeb\051\uffeb\001\002" +
    "\000\020\002\ufffd\005\ufffd\006\ufffd\010\ufffd\032\ufffd\044" +
    "\ufffd\051\ufffd\001\002\000\050\002\uffec\005\uffec\006\uffec" +
    "\010\uffec\027\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035" +
    "\uffec\036\uffec\037\uffec\040\uffec\041\uffec\042\uffec\043\uffec" +
    "\044\uffec\046\uffec\051\uffec\001\002\000\004\045\100\001" +
    "\002\000\020\002\ufffe\005\ufffe\006\ufffe\010\ufffe\032\ufffe" +
    "\044\ufffe\051\ufffe\001\002\000\004\006\323\001\002\000" +
    "\050\002\uffe4\005\uffe4\006\uffe4\010\uffe4\027\uffe4\031\uffe4" +
    "\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040" +
    "\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\046\uffe4\051\uffe4" +
    "\001\002\000\024\002\uffdd\005\uffdd\006\uffdd\010\uffdd\032" +
    "\uffdd\044\uffdd\045\uffdd\046\040\051\uffdd\001\002\000\020" +
    "\005\137\006\144\026\123\032\141\044\135\050\140\051" +
    "\136\001\002\000\036\006\066\011\062\012\060\013\063" +
    "\014\064\015\055\016\067\017\054\020\061\021\070\022" +
    "\053\023\057\024\056\025\065\001\002\000\050\002\uffea" +
    "\005\uffea\006\uffea\010\uffea\027\uffea\031\uffea\032\uffea\033" +
    "\uffea\034\uffea\035\uffea\036\uffea\037\uffea\040\uffea\041\uffea" +
    "\042\uffea\043\uffea\044\uffea\046\uffea\051\uffea\001\002\000" +
    "\050\002\uffe8\005\uffe8\006\uffe8\010\uffe8\027\uffe8\031\uffe8" +
    "\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040" +
    "\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\046\uffe8\051\uffe8" +
    "\001\002\000\050\002\uffef\005\uffef\006\uffef\010\uffef\027" +
    "\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef" +
    "\037\uffef\040\uffef\041\uffef\042\uffef\043\uffef\044\uffef\046" +
    "\uffef\051\uffef\001\002\000\050\002\uffe5\005\uffe5\006\uffe5" +
    "\010\uffe5\027\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035" +
    "\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5" +
    "\044\uffe5\046\uffe5\051\uffe5\001\002\000\050\002\ufff0\005" +
    "\ufff0\006\ufff0\010\ufff0\027\ufff0\031\ufff0\032\ufff0\033\ufff0" +
    "\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\042" +
    "\ufff0\043\ufff0\044\ufff0\046\ufff0\051\ufff0\001\002\000\050" +
    "\002\uffe6\005\uffe6\006\uffe6\010\uffe6\027\uffe6\031\uffe6\032" +
    "\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6" +
    "\041\uffe6\042\uffe6\043\uffe6\044\uffe6\046\uffe6\051\uffe6\001" +
    "\002\000\050\002\uffee\005\uffee\006\uffee\010\uffee\027\uffee" +
    "\031\uffee\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037" +
    "\uffee\040\uffee\041\uffee\042\uffee\043\uffee\044\uffee\046\uffee" +
    "\051\uffee\001\002\000\020\002\ufffb\005\ufffb\006\ufffb\010" +
    "\ufffb\032\ufffb\044\ufffb\051\ufffb\001\002\000\020\002\ufffa" +
    "\005\ufffa\006\ufffa\010\ufffa\032\ufffa\044\ufffa\051\ufffa\001" +
    "\002\000\050\002\uffed\005\uffed\006\uffed\010\uffed\027\uffed" +
    "\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037" +
    "\uffed\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed\046\uffed" +
    "\051\uffed\001\002\000\020\002\ufffc\005\ufffc\006\ufffc\010" +
    "\ufffc\032\ufffc\044\ufffc\051\ufffc\001\002\000\050\002\uffe9" +
    "\005\uffe9\006\uffe9\010\uffe9\027\uffe9\031\uffe9\032\uffe9\033" +
    "\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9" +
    "\042\uffe9\043\uffe9\044\uffe9\046\uffe9\051\uffe9\001\002\000" +
    "\004\002\052\001\002\000\024\002\uffde\005\uffde\006\uffde" +
    "\010\uffde\032\uffde\044\uffde\045\uffde\046\040\051\uffde\001" +
    "\002\000\014\005\007\006\051\032\020\044\021\051\046" +
    "\001\002\000\050\002\uffa3\005\uffa3\006\uffa3\010\uffa3\027" +
    "\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3" +
    "\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\046" +
    "\uffa3\051\uffa3\001\002\000\050\002\uffa6\005\uffa6\006\uffa6" +
    "\010\uffa6\027\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6\035" +
    "\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6" +
    "\044\uffa6\046\040\051\uffa6\001\002\000\050\002\uffa4\005" +
    "\uffa4\006\uffa4\010\uffa4\027\uffa4\031\uffa4\032\uffa4\033\uffa4" +
    "\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042" +
    "\uffa4\043\uffa4\044\uffa4\046\uffa4\051\uffa4\001\002\000\050" +
    "\002\uffa1\005\uffa1\006\uffa1\010\uffa1\027\uffa1\031\uffa1\032" +
    "\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1" +
    "\041\uffa1\042\uffa1\043\uffa1\044\uffa1\046\uffa1\051\uffa1\001" +
    "\002\000\050\002\uffdc\005\uffdc\006\uffdc\010\uffdc\027\uffdc" +
    "\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037" +
    "\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\046\uffdc" +
    "\051\uffdc\001\002\000\052\002\uff9f\005\uff9f\006\uff9f\010" +
    "\uff9f\027\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f\035\uff9f" +
    "\036\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\044" +
    "\uff9f\045\uffdd\046\uff9f\051\uff9f\001\002\000\050\002\uffdb" +
    "\005\uffdb\006\uffdb\010\uffdb\027\uffdb\031\uffdb\032\uffdb\033" +
    "\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb" +
    "\042\uffdb\043\uffdb\044\uffdb\046\uffdb\051\uffdb\001\002\000" +
    "\050\002\uffa2\005\uffa2\006\uffa2\010\uffa2\027\uffa2\031\uffa2" +
    "\032\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\040" +
    "\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\046\uffa2\051\uffa2" +
    "\001\002\000\052\002\uffa0\005\uffa0\006\uffa0\010\uffa0\027" +
    "\uffa0\031\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0" +
    "\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0\045" +
    "\uffde\046\uffa0\051\uffa0\001\002\000\004\002\001\001\002" +
    "\000\014\005\007\006\037\032\020\044\073\051\017\001" +
    "\002\000\014\005\007\006\037\032\020\044\073\051\017" +
    "\001\002\000\014\005\007\006\037\032\020\044\073\051" +
    "\017\001\002\000\014\005\007\006\037\032\020\044\073" +
    "\051\017\001\002\000\014\005\007\006\037\032\020\044" +
    "\073\051\017\001\002\000\016\005\120\006\133\026\123" +
    "\032\020\044\021\051\255\001\002\000\014\005\007\006" +
    "\037\032\020\044\073\051\017\001\002\000\024\004\215" +
    "\005\007\006\224\007\213\026\216\032\020\035\221\044" +
    "\021\051\217\001\002\000\016\005\120\006\133\026\123" +
    "\032\020\044\021\051\204\001\002\000\014\005\007\006" +
    "\105\032\020\044\073\051\104\001\002\000\014\005\007" +
    "\006\037\032\020\044\073\051\017\001\002\000\004\030" +
    "\116\001\002\000\014\005\007\006\037\032\020\044\073" +
    "\051\017\001\002\000\014\005\007\006\037\032\020\044" +
    "\073\051\017\001\002\000\004\044\107\001\002\000\006" +
    "\044\uffc8\045\100\001\002\000\032\012\060\013\063\014" +
    "\064\015\055\016\067\017\054\020\061\021\070\022\053" +
    "\023\057\024\056\025\065\001\002\000\004\044\077\001" +
    "\002\000\004\044\076\001\002\000\050\002\uffb8\005\uffb8" +
    "\006\uffb8\010\uffb8\027\uffb8\031\uffb8\032\uffb8\033\uffb8\034" +
    "\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8" +
    "\043\uffb8\044\uffb8\046\uffb8\051\uffb8\001\002\000\050\002" +
    "\uffb9\005\uffb9\006\uffb9\010\uffb9\027\uffb9\031\uffb9\032\uffb9" +
    "\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041" +
    "\uffb9\042\uffb9\043\uffb9\044\uffb9\046\uffb9\051\uffb9\001\002" +
    "\000\012\005\007\006\105\032\020\051\104\001\002\000" +
    "\052\002\uffa8\005\uffa8\006\uffa8\010\uffa8\027\uffa8\031\uffa8" +
    "\032\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040" +
    "\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8" +
    "\051\uffa8\001\002\000\052\002\uffaa\005\uffaa\006\uffaa\010" +
    "\uffaa\027\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa" +
    "\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044" +
    "\uffaa\045\100\046\uffaa\051\uffaa\001\002\000\052\002\uffa9" +
    "\005\uffa9\006\uffa9\010\uffa9\027\uffa9\031\uffa9\032\uffa9\033" +
    "\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9" +
    "\042\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\051\uffa9\001" +
    "\002\000\052\002\uffdd\005\uffdd\006\uffdd\010\uffdd\027\uffdd" +
    "\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037" +
    "\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd" +
    "\046\uffdd\051\uffdd\001\002\000\052\002\uffde\005\uffde\006" +
    "\uffde\010\uffde\027\uffde\031\uffde\032\uffde\033\uffde\034\uffde" +
    "\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde\043" +
    "\uffde\044\uffde\045\uffde\046\uffde\051\uffde\001\002\000\052" +
    "\002\uffa7\005\uffa7\006\uffa7\010\uffa7\027\uffa7\031\uffa7\032" +
    "\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7" +
    "\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\051" +
    "\uffa7\001\002\000\050\002\uffb7\005\uffb7\006\uffb7\010\uffb7" +
    "\027\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036" +
    "\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7" +
    "\046\uffb7\051\uffb7\001\002\000\004\044\115\001\002\000" +
    "\004\044\114\001\002\000\004\044\113\001\002\000\050" +
    "\002\uffc1\005\uffc1\006\uffc1\010\uffc1\027\uffc1\031\uffc1\032" +
    "\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1" +
    "\041\uffc1\042\uffc1\043\uffc1\044\uffc1\046\uffc1\051\uffc1\001" +
    "\002\000\050\002\uffc2\005\uffc2\006\uffc2\010\uffc2\027\uffc2" +
    "\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037" +
    "\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\046\uffc2" +
    "\051\uffc2\001\002\000\050\002\uffc0\005\uffc0\006\uffc0\010" +
    "\uffc0\027\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0" +
    "\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044" +
    "\uffc0\046\uffc0\051\uffc0\001\002\000\020\005\120\006\133" +
    "\026\123\031\125\032\126\044\021\051\124\001\002\000" +
    "\014\027\uff9c\031\uff9c\033\uff9c\043\uff9c\044\uff9c\001\002" +
    "\000\014\031\uff9b\033\uff9b\043\uff9b\044\uff9b\045\uffdf\001" +
    "\002\000\014\027\uff99\031\uff99\033\uff99\043\uff99\044\uff99" +
    "\001\002\000\006\031\167\043\166\001\002\000\014\005" +
    "\137\006\144\026\123\044\135\051\164\001\002\000\012" +
    "\031\ufff3\043\ufff3\045\uffdd\046\040\001\002\000\004\044" +
    "\162\001\002\000\020\005\137\006\144\026\123\032\141" +
    "\044\135\050\140\051\136\001\002\000\006\031\ufff1\043" +
    "\ufff1\001\002\000\014\027\uff9e\031\uff9e\033\uff9e\043\uff9e" +
    "\044\uff9e\001\002\000\006\031\ufff4\043\ufff4\001\002\000" +
    "\006\031\ufff5\043\ufff5\001\002\000\016\031\uff9d\033\uff9d" +
    "\043\uff9d\044\uff9d\045\uffde\046\040\001\002\000\006\033" +
    "\uffd8\043\uffd8\001\002\000\006\006\066\011\062\001\002" +
    "\000\010\033\uffd6\043\uffd6\046\040\001\002\000\010\027" +
    "\uff9b\033\uff9b\043\uff9b\001\002\000\006\033\uffd7\043\uffd7" +
    "\001\002\000\020\005\120\006\133\026\123\032\020\044" +
    "\021\050\151\051\150\001\002\000\006\033\145\043\146" +
    "\001\002\000\006\033\uffd9\043\uffd9\001\002\000\012\027" +
    "\uff9d\033\uff9d\043\uff9d\046\040\001\002\000\010\031\ufff2" +
    "\043\ufff2\045\uffe0\001\002\000\020\005\137\006\144\026" +
    "\123\032\141\044\135\050\140\051\136\001\002\000\006" +
    "\033\uffda\043\uffda\001\002\000\012\033\uffd0\043\uffd0\045" +
    "\uffdd\046\040\001\002\000\006\033\uffd1\043\uffd1\001\002" +
    "\000\006\033\156\043\157\001\002\000\006\033\uffd3\043" +
    "\uffd3\001\002\000\006\033\uffcf\043\uffcf\001\002\000\006" +
    "\033\uffd2\043\uffd2\001\002\000\006\033\uffd5\043\uffd5\001" +
    "\002\000\020\005\120\006\133\026\123\032\020\044\021" +
    "\050\151\051\150\001\002\000\006\033\uffd4\043\uffd4\001" +
    "\002\000\050\002\uffa5\005\uffa5\006\uffa5\010\uffa5\027\uffa5" +
    "\031\uffa5\032\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5\037" +
    "\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5\046\040" +
    "\051\uffa5\001\002\000\050\002\ufff7\005\ufff7\006\ufff7\010" +
    "\ufff7\027\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7" +
    "\036\ufff7\037\ufff7\040\ufff7\041\ufff7\042\ufff7\043\ufff7\044" +
    "\ufff7\046\ufff7\051\ufff7\001\002\000\004\027\165\001\002" +
    "\000\004\046\040\001\002\000\014\027\uff9a\031\uff9a\033" +
    "\uff9a\043\uff9a\044\uff9a\001\002\000\016\005\120\006\133" +
    "\026\123\032\126\044\021\051\124\001\002\000\004\044" +
    "\170\001\002\000\050\002\ufff8\005\ufff8\006\ufff8\010\ufff8" +
    "\027\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8\036" +
    "\ufff8\037\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8" +
    "\046\ufff8\051\ufff8\001\002\000\006\031\ufff6\043\ufff6\001" +
    "\002\000\004\044\177\001\002\000\004\044\176\001\002" +
    "\000\004\044\175\001\002\000\050\002\uffac\005\uffac\006" +
    "\uffac\010\uffac\027\uffac\031\uffac\032\uffac\033\uffac\034\uffac" +
    "\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac\043" +
    "\uffac\044\uffac\046\uffac\051\uffac\001\002\000\050\002\uffad" +
    "\005\uffad\006\uffad\010\uffad\027\uffad\031\uffad\032\uffad\033" +
    "\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad" +
    "\042\uffad\043\uffad\044\uffad\046\uffad\051\uffad\001\002\000" +
    "\050\002\uffab\005\uffab\006\uffab\010\uffab\027\uffab\031\uffab" +
    "\032\uffab\033\uffab\034\uffab\035\uffab\036\uffab\037\uffab\040" +
    "\uffab\041\uffab\042\uffab\043\uffab\044\uffab\046\uffab\051\uffab" +
    "\001\002\000\004\044\203\001\002\000\004\044\202\001" +
    "\002\000\050\002\uffc6\005\uffc6\006\uffc6\010\uffc6\027\uffc6" +
    "\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037" +
    "\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\046\uffc6" +
    "\051\uffc6\001\002\000\050\002\uffc7\005\uffc7\006\uffc7\010" +
    "\uffc7\027\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7" +
    "\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044" +
    "\uffc7\046\uffc7\051\uffc7\001\002\000\010\044\211\045\uffdd" +
    "\046\040\001\002\000\004\044\210\001\002\000\004\044" +
    "\207\001\002\000\050\002\uffcb\005\uffcb\006\uffcb\010\uffcb" +
    "\027\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036" +
    "\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb" +
    "\046\uffcb\051\uffcb\001\002\000\050\002\uffc9\005\uffc9\006" +
    "\uffc9\010\uffc9\027\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9" +
    "\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043" +
    "\uffc9\044\uffc9\046\uffc9\051\uffc9\001\002\000\050\002\uffca" +
    "\005\uffca\006\uffca\010\uffca\027\uffca\031\uffca\032\uffca\033" +
    "\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca" +
    "\042\uffca\043\uffca\044\uffca\046\uffca\051\uffca\001\002\000" +
    "\024\027\uff88\034\uff88\035\uff88\036\uff88\037\uff88\040\uff88" +
    "\041\uff88\042\uff88\044\uff88\001\002\000\024\027\uff8e\034" +
    "\uff8e\035\uff8e\036\uff8e\037\uff8e\040\uff8e\041\uff8e\042\uff8e" +
    "\044\uff8e\001\002\000\024\027\uff8a\034\uff8a\035\uff8a\036" +
    "\uff8a\037\uff8a\040\uff8a\041\uff8a\042\uff8a\044\uff8a\001\002" +
    "\000\024\027\uff8f\034\uff8f\035\uff8f\036\uff8f\037\uff8f\040" +
    "\uff8f\041\uff8f\042\uff8f\044\uff8f\001\002\000\024\004\215" +
    "\005\007\006\224\007\213\026\216\032\020\035\221\044" +
    "\021\051\217\001\002\000\030\027\uff8c\034\uff8c\035\uff8c" +
    "\036\uff8c\037\uff8c\040\uff8c\041\uff8c\042\uff8c\044\uff8c\045" +
    "\uffdd\046\040\001\002\000\022\034\230\035\231\036\234" +
    "\037\232\040\226\041\227\042\233\044\244\001\002\000" +
    "\024\004\215\005\007\006\224\007\213\026\216\032\020" +
    "\035\221\044\021\051\217\001\002\000\024\027\uff89\034" +
    "\uff89\035\uff89\036\uff89\037\uff89\040\uff89\041\uff89\042\uff89" +
    "\044\uff89\001\002\000\024\027\uff87\034\uff87\035\uff87\036" +
    "\uff87\037\uff87\040\uff87\041\uff87\042\uff87\044\uff87\001\002" +
    "\000\030\027\uff8d\034\uff8d\035\uff8d\036\uff8d\037\uff8d\040" +
    "\uff8d\041\uff8d\042\uff8d\044\uff8d\045\uffde\046\040\001\002" +
    "\000\024\027\uff90\034\uff90\035\uff90\036\234\037\232\040" +
    "\226\041\227\042\233\044\uff90\001\002\000\024\004\215" +
    "\005\007\006\224\007\213\026\216\032\020\035\221\044" +
    "\021\051\217\001\002\000\024\004\215\005\007\006\224" +
    "\007\213\026\216\032\020\035\221\044\021\051\217\001" +
    "\002\000\024\004\215\005\007\006\224\007\213\026\216" +
    "\032\020\035\221\044\021\051\217\001\002\000\024\004" +
    "\215\005\007\006\224\007\213\026\216\032\020\035\221" +
    "\044\021\051\217\001\002\000\024\004\215\005\007\006" +
    "\224\007\213\026\216\032\020\035\221\044\021\051\217" +
    "\001\002\000\024\004\215\005\007\006\224\007\213\026" +
    "\216\032\020\035\221\044\021\051\217\001\002\000\024" +
    "\004\215\005\007\006\224\007\213\026\216\032\020\035" +
    "\221\044\021\051\217\001\002\000\024\027\uff94\034\uff94" +
    "\035\uff94\036\uff94\037\232\040\uff94\041\uff94\042\233\044" +
    "\uff94\001\002\000\024\027\uff91\034\uff91\035\uff91\036\uff91" +
    "\037\232\040\uff91\041\uff91\042\233\044\uff91\001\002\000" +
    "\024\027\uff92\034\uff92\035\uff92\036\uff92\037\232\040\uff92" +
    "\041\uff92\042\233\044\uff92\001\002\000\024\027\uff96\034" +
    "\uff96\035\uff96\036\234\037\232\040\226\041\227\042\233" +
    "\044\uff96\001\002\000\024\027\uff97\034\uff97\035\uff97\036" +
    "\234\037\232\040\226\041\227\042\233\044\uff97\001\002" +
    "\000\024\027\uff93\034\uff93\035\uff93\036\uff93\037\232\040" +
    "\uff93\041\uff93\042\233\044\uff93\001\002\000\024\027\uff95" +
    "\034\uff95\035\uff95\036\uff95\037\232\040\uff95\041\uff95\042" +
    "\233\044\uff95\001\002\000\050\002\uff98\005\uff98\006\uff98" +
    "\010\uff98\027\uff98\031\uff98\032\uff98\033\uff98\034\uff98\035" +
    "\uff98\036\uff98\037\uff98\040\uff98\041\uff98\042\uff98\043\uff98" +
    "\044\uff98\046\uff98\051\uff98\001\002\000\022\027\246\034" +
    "\230\035\231\036\234\037\232\040\226\041\227\042\233" +
    "\001\002\000\024\027\uff8b\034\uff8b\035\uff8b\036\uff8b\037" +
    "\uff8b\040\uff8b\041\uff8b\042\uff8b\044\uff8b\001\002\000\004" +
    "\044\254\001\002\000\004\044\253\001\002\000\004\044" +
    "\252\001\002\000\050\002\uffbb\005\uffbb\006\uffbb\010\uffbb" +
    "\027\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036" +
    "\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb" +
    "\046\uffbb\051\uffbb\001\002\000\050\002\uffbc\005\uffbc\006" +
    "\uffbc\010\uffbc\027\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc" +
    "\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043" +
    "\uffbc\044\uffbc\046\uffbc\051\uffbc\001\002\000\050\002\uffba" +
    "\005\uffba\006\uffba\010\uffba\027\uffba\031\uffba\032\uffba\033" +
    "\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba" +
    "\042\uffba\043\uffba\044\uffba\046\uffba\051\uffba\001\002\000" +
    "\010\044\262\045\uffdd\046\040\001\002\000\004\044\261" +
    "\001\002\000\004\044\260\001\002\000\050\002\uffce\005" +
    "\uffce\006\uffce\010\uffce\027\uffce\031\uffce\032\uffce\033\uffce" +
    "\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042" +
    "\uffce\043\uffce\044\uffce\046\uffce\051\uffce\001\002\000\050" +
    "\002\uffcc\005\uffcc\006\uffcc\010\uffcc\027\uffcc\031\uffcc\032" +
    "\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc" +
    "\041\uffcc\042\uffcc\043\uffcc\044\uffcc\046\uffcc\051\uffcc\001" +
    "\002\000\050\002\uffcd\005\uffcd\006\uffcd\010\uffcd\027\uffcd" +
    "\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037" +
    "\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\046\uffcd" +
    "\051\uffcd\001\002\000\004\044\270\001\002\000\004\044" +
    "\267\001\002\000\004\044\266\001\002\000\050\002\uffb2" +
    "\005\uffb2\006\uffb2\010\uffb2\027\uffb2\031\uffb2\032\uffb2\033" +
    "\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2" +
    "\042\uffb2\043\uffb2\044\uffb2\046\uffb2\051\uffb2\001\002\000" +
    "\050\002\uffb3\005\uffb3\006\uffb3\010\uffb3\027\uffb3\031\uffb3" +
    "\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040" +
    "\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\046\uffb3\051\uffb3" +
    "\001\002\000\050\002\uffb1\005\uffb1\006\uffb1\010\uffb1\027" +
    "\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1" +
    "\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\046" +
    "\uffb1\051\uffb1\001\002\000\004\044\276\001\002\000\004" +
    "\044\275\001\002\000\004\044\274\001\002\000\050\002" +
    "\uffaf\005\uffaf\006\uffaf\010\uffaf\027\uffaf\031\uffaf\032\uffaf" +
    "\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041" +
    "\uffaf\042\uffaf\043\uffaf\044\uffaf\046\uffaf\051\uffaf\001\002" +
    "\000\050\002\uffb0\005\uffb0\006\uffb0\010\uffb0\027\uffb0\031" +
    "\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0" +
    "\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\046\uffb0\051" +
    "\uffb0\001\002\000\050\002\uffae\005\uffae\006\uffae\010\uffae" +
    "\027\uffae\031\uffae\032\uffae\033\uffae\034\uffae\035\uffae\036" +
    "\uffae\037\uffae\040\uffae\041\uffae\042\uffae\043\uffae\044\uffae" +
    "\046\uffae\051\uffae\001\002\000\004\044\304\001\002\000" +
    "\004\044\303\001\002\000\004\044\302\001\002\000\050" +
    "\002\uffc4\005\uffc4\006\uffc4\010\uffc4\027\uffc4\031\uffc4\032" +
    "\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4" +
    "\041\uffc4\042\uffc4\043\uffc4\044\uffc4\046\uffc4\051\uffc4\001" +
    "\002\000\050\002\uffc5\005\uffc5\006\uffc5\010\uffc5\027\uffc5" +
    "\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037" +
    "\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\046\uffc5" +
    "\051\uffc5\001\002\000\050\002\uffc3\005\uffc3\006\uffc3\010" +
    "\uffc3\027\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3" +
    "\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044" +
    "\uffc3\046\uffc3\051\uffc3\001\002\000\004\044\312\001\002" +
    "\000\004\044\311\001\002\000\004\044\310\001\002\000" +
    "\050\002\uffbe\005\uffbe\006\uffbe\010\uffbe\027\uffbe\031\uffbe" +
    "\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040" +
    "\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\046\uffbe\051\uffbe" +
    "\001\002\000\050\002\uffbf\005\uffbf\006\uffbf\010\uffbf\027" +
    "\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf" +
    "\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\046" +
    "\uffbf\051\uffbf\001\002\000\050\002\uffbd\005\uffbd\006\uffbd" +
    "\010\uffbd\027\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035" +
    "\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd" +
    "\044\uffbd\046\uffbd\051\uffbd\001\002\000\004\044\320\001" +
    "\002\000\004\044\317\001\002\000\004\044\316\001\002" +
    "\000\050\002\uffb5\005\uffb5\006\uffb5\010\uffb5\027\uffb5\031" +
    "\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5" +
    "\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\046\uffb5\051" +
    "\uffb5\001\002\000\050\002\uffb6\005\uffb6\006\uffb6\010\uffb6" +
    "\027\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036" +
    "\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6" +
    "\046\uffb6\051\uffb6\001\002\000\050\002\uffb4\005\uffb4\006" +
    "\uffb4\010\uffb4\027\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4" +
    "\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043" +
    "\uffb4\044\uffb4\046\uffb4\051\uffb4\001\002\000\006\033\322" +
    "\043\146\001\002\000\052\002\uffe0\005\uffe0\006\uffe0\010" +
    "\uffe0\027\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0" +
    "\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044" +
    "\uffe0\045\uffe0\046\uffe0\051\uffe0\001\002\000\004\047\324" +
    "\001\002\000\014\005\007\006\037\032\020\044\330\051" +
    "\017\001\002\000\020\002\uffe2\005\uffe2\006\uffe2\010\uffe2" +
    "\032\uffe2\044\uffe2\051\uffe2\001\002\000\020\002\uffe1\005" +
    "\uffe1\006\uffe1\010\uffe1\032\uffe1\044\uffe1\051\uffe1\001\002" +
    "\000\022\002\uffe3\005\uffe3\006\uffe3\010\uffe3\032\uffe3\044" +
    "\uffe3\045\100\051\uffe3\001\002\000\034\006\066\012\060" +
    "\013\063\014\064\015\055\016\067\017\054\020\061\021" +
    "\070\022\053\023\057\024\056\025\065\001\002\000\020" +
    "\002\uffff\005\uffff\006\uffff\010\uffff\032\uffff\044\uffff\051" +
    "\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\327\000\056\002\035\003\004\004\013\005\010\006" +
    "\031\007\033\010\025\011\023\012\027\013\032\014\011" +
    "\015\007\016\021\017\034\020\022\021\026\022\005\023" +
    "\024\030\030\033\012\035\015\044\003\001\001\000\002" +
    "\001\001\000\052\004\330\005\010\006\031\007\033\010" +
    "\025\011\023\012\027\013\032\014\011\015\007\016\021" +
    "\017\034\020\022\021\026\022\005\023\024\030\030\033" +
    "\012\035\015\044\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\036\101\037\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\026\160\027" +
    "\040\001\001\000\016\005\120\006\127\031\320\032\142" +
    "\040\133\044\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\026" +
    "\041\027\040\001\001\000\046\005\044\006\047\010\025" +
    "\011\023\012\027\013\032\014\011\015\007\016\021\017" +
    "\034\020\022\021\026\022\005\023\024\030\046\033\012" +
    "\035\015\045\043\001\001\000\002\001\001\000\004\027" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\010\025" +
    "\011\023\012\027\013\032\014\011\015\007\016\021\017" +
    "\034\020\022\021\026\022\005\023\024\030\314\033\071" +
    "\034\313\035\015\044\312\001\001\000\044\010\025\011" +
    "\023\012\027\013\032\014\011\015\007\016\021\017\034" +
    "\020\022\021\026\022\005\023\024\030\306\033\071\034" +
    "\305\035\015\044\304\001\001\000\044\010\025\011\023" +
    "\012\027\013\032\014\011\015\007\016\021\017\034\020" +
    "\022\021\026\022\005\023\024\030\300\033\071\034\277" +
    "\035\015\044\276\001\001\000\044\010\025\011\023\012" +
    "\027\013\032\014\011\015\007\016\021\017\034\020\022" +
    "\021\026\022\005\023\024\030\272\033\071\034\271\035" +
    "\015\044\270\001\001\000\044\010\025\011\023\012\027" +
    "\013\032\014\011\015\007\016\021\017\034\020\022\021" +
    "\026\022\005\023\024\030\264\033\071\034\263\035\015" +
    "\044\262\001\001\000\050\005\120\006\127\010\025\011" +
    "\023\012\027\013\032\014\011\015\007\016\021\017\034" +
    "\020\022\021\026\022\005\023\024\030\255\033\012\035" +
    "\015\040\256\044\116\001\001\000\044\010\025\011\023" +
    "\012\027\013\032\014\011\015\007\016\021\017\034\020" +
    "\022\021\026\022\005\023\024\030\250\033\071\034\247" +
    "\035\015\044\246\001\001\000\050\005\213\006\222\010" +
    "\025\011\023\012\027\013\032\014\011\015\007\016\021" +
    "\017\034\020\022\021\026\022\005\023\024\030\221\033" +
    "\012\035\015\041\217\044\211\001\001\000\050\005\120" +
    "\006\127\010\025\011\023\012\027\013\032\014\011\015" +
    "\007\016\021\017\034\020\022\021\026\022\005\023\024" +
    "\030\204\033\012\035\015\040\205\044\116\001\001\000" +
    "\042\010\025\011\023\012\027\013\032\014\011\015\007" +
    "\016\021\017\034\020\022\021\026\022\005\023\024\030" +
    "\200\033\071\034\177\035\015\001\001\000\044\010\025" +
    "\011\023\012\027\013\032\014\011\015\007\016\021\017" +
    "\034\020\022\021\026\022\005\023\024\030\173\033\071" +
    "\034\172\035\015\044\171\001\001\000\002\001\001\000" +
    "\044\010\025\011\023\012\027\013\032\014\011\015\007" +
    "\016\021\017\034\020\022\021\026\022\005\023\024\030" +
    "\111\033\071\034\110\035\015\044\107\001\001\000\044" +
    "\010\025\011\023\012\027\013\032\014\011\015\007\016" +
    "\021\017\034\020\022\021\026\022\005\023\024\030\074" +
    "\033\071\034\073\035\015\044\070\001\001\000\002\001" +
    "\001\000\006\036\101\037\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\105\001\001\000\002\001\001" +
    "\000\004\037\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\054" +
    "\005\120\006\127\010\025\011\023\012\027\013\032\014" +
    "\011\015\007\016\021\017\034\020\022\021\026\022\005" +
    "\023\024\024\121\025\131\030\126\033\012\035\015\040" +
    "\130\044\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\005\120\006" +
    "\127\040\162\044\116\001\001\000\006\026\160\027\040" +
    "\001\001\000\002\001\001\000\016\005\120\006\127\031" +
    "\141\032\142\040\133\044\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\026\041\027\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\026\160\027\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\054\005\120\006\127\010\025" +
    "\011\023\012\027\013\032\014\011\015\007\016\021\017" +
    "\034\020\022\021\026\022\005\023\024\030\153\033\012" +
    "\035\015\040\154\042\151\043\152\044\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\026\041\027\040" +
    "\001\001\000\002\001\001\000\014\005\120\006\127\032" +
    "\146\040\133\044\116\001\001\000\002\001\001\000\006" +
    "\026\160\027\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\005\120\006\127\010\025\011" +
    "\023\012\027\013\032\014\011\015\007\016\021\017\034" +
    "\020\022\021\026\022\005\023\024\030\153\033\012\035" +
    "\015\040\154\043\157\044\116\001\001\000\002\001\001" +
    "\000\004\027\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\026\160\027\040\001\001\000\002\001\001" +
    "\000\052\005\120\006\127\010\025\011\023\012\027\013" +
    "\032\014\011\015\007\016\021\017\034\020\022\021\026" +
    "\022\005\023\024\025\170\030\126\033\012\035\015\040" +
    "\130\044\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\026\160\027\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\005" +
    "\213\006\222\010\025\011\023\012\027\013\032\014\011" +
    "\015\007\016\021\017\034\020\022\021\026\022\005\023" +
    "\024\030\221\033\012\035\015\041\244\044\211\001\001" +
    "\000\006\026\160\027\040\001\001\000\002\001\001\000" +
    "\050\005\213\006\222\010\025\011\023\012\027\013\032" +
    "\014\011\015\007\016\021\017\034\020\022\021\026\022" +
    "\005\023\024\030\221\033\012\035\015\041\224\044\211" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\026" +
    "\041\027\040\001\001\000\002\001\001\000\050\005\213" +
    "\006\222\010\025\011\023\012\027\013\032\014\011\015" +
    "\007\016\021\017\034\020\022\021\026\022\005\023\024" +
    "\030\221\033\012\035\015\041\242\044\211\001\001\000" +
    "\050\005\213\006\222\010\025\011\023\012\027\013\032" +
    "\014\011\015\007\016\021\017\034\020\022\021\026\022" +
    "\005\023\024\030\221\033\012\035\015\041\241\044\211" +
    "\001\001\000\050\005\213\006\222\010\025\011\023\012" +
    "\027\013\032\014\011\015\007\016\021\017\034\020\022" +
    "\021\026\022\005\023\024\030\221\033\012\035\015\041" +
    "\240\044\211\001\001\000\050\005\213\006\222\010\025" +
    "\011\023\012\027\013\032\014\011\015\007\016\021\017" +
    "\034\020\022\021\026\022\005\023\024\030\221\033\012" +
    "\035\015\041\237\044\211\001\001\000\050\005\213\006" +
    "\222\010\025\011\023\012\027\013\032\014\011\015\007" +
    "\016\021\017\034\020\022\021\026\022\005\023\024\030" +
    "\221\033\012\035\015\041\236\044\211\001\001\000\050" +
    "\005\213\006\222\010\025\011\023\012\027\013\032\014" +
    "\011\015\007\016\021\017\034\020\022\021\026\022\005" +
    "\023\024\030\221\033\012\035\015\041\235\044\211\001" +
    "\001\000\050\005\213\006\222\010\025\011\023\012\027" +
    "\013\032\014\011\015\007\016\021\017\034\020\022\021" +
    "\026\022\005\023\024\030\221\033\012\035\015\041\234" +
    "\044\211\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\026\160\027\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\005\044\010\025" +
    "\011\023\012\027\013\032\014\011\015\007\016\021\017" +
    "\034\020\022\021\026\022\005\023\024\030\046\033\326" +
    "\035\015\044\325\045\324\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\036\101\037\100\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintacticoConsole$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintacticoConsole$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintacticoConsole$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private Errores err = Errores.getInstance();

    public void syntax_error(Symbol token) {
        err.nuevoErrorSintactico((token.left+1),(token.right+1), "Se esperaba "+token.value);
        System.out.println("Error sintactico: linea "+ (token.left+1)+" columna: "+(token.right+1)+" Lexema: "+token.value);

    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        err.nuevoErrorSintactico((s.left+1),(s.right+1), "Se esperaba "+s.value);
        System.out.println("Error sintactico: linea "+ s.left+" columna: "+s.right+" Lexema: "+s.value);

    }  

    public NodoHK nodo;

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$sintacticoConsole$actions {


    

  private final sintacticoConsole parser;

  /** Constructor */
  CUP$sintacticoConsole$actions(sintacticoConsole parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$sintacticoConsole$do_action(
    int                        CUP$sintacticoConsole$act_num,
    java_cup.runtime.lr_parser CUP$sintacticoConsole$parser,
    java.util.Stack            CUP$sintacticoConsole$stack,
    int                        CUP$sintacticoConsole$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintacticoConsole$result;

      /* select the action based on the action number */
      switch (CUP$sintacticoConsole$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OPERACIONES ::= CALCULAR 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("OPERACIONES",31, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OPERACIONES ::= BUSCA_LIST 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                        RESULT = nodo;
                    
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("OPERACIONES",31, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OPERACIONES ::= MET_NATIVOS 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                        RESULT = nodo;
                    
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("OPERACIONES",31, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OPERACIONES ::= LLAMADA_MET 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                        RESULT = nodo;
                    
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("OPERACIONES",31, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OPERACIONES ::= par_izq OPERACIONES par_der 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).value;
		
                        RESULT = nodo;
                    
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("OPERACIONES",31, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OPERACIONES ::= porcentaje 
            {
              NodoHK RESULT =null;
		
                        NodoHK nodo = new NodoHK("PORCENTAJE");
                        RESULT = nodo;
                    
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("OPERACIONES",31, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OPERACIONES ::= identificador 
            {
              NodoHK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                        NodoHK nodo = new NodoHK("identificador");
                        nodo.hijos.add(new NodoHK(id, idleft, idright));
                        RESULT = nodo;
                    
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("OPERACIONES",31, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OPERACIONES ::= decimal 
            {
              NodoHK RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                        NodoHK nodo = new NodoHK("decimal");
                        nodo.hijos.add(new NodoHK(dec, decleft, decright));
                        RESULT = nodo;
                    
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("OPERACIONES",31, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // OPERACIONES ::= numero 
            {
              NodoHK RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                        NodoHK nodo = new NodoHK("entero");
                        nodo.hijos.add(new NodoHK(num, numleft, numright));
                        RESULT = nodo;
                    
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("OPERACIONES",31, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // OPERACIONES ::= menos OPERACIONES 
            {
              NodoHK RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK op = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                        NodoHK nodo = new NodoHK("menos");
                        nodo.hijos.add(op);
                        RESULT = nodo;
                    
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("OPERACIONES",31, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OPERACIONES ::= OPERACIONES sqrt OPERACIONES 
            {
              NodoHK RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)).right;
		NodoHK op1 = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK op2 = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                        NodoHK nodo = new NodoHK("sqrt");
                        nodo.hijos.add(op1);
                        nodo.hijos.add(op2);
                        RESULT = nodo;
                    
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("OPERACIONES",31, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OPERACIONES ::= OPERACIONES potencia OPERACIONES 
            {
              NodoHK RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)).right;
		NodoHK op1 = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK op2 = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                        NodoHK nodo = new NodoHK("potencia");
                        nodo.hijos.add(op1);
                        nodo.hijos.add(op2);
                        RESULT = nodo;
                    
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("OPERACIONES",31, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OPERACIONES ::= OPERACIONES mod OPERACIONES 
            {
              NodoHK RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)).right;
		NodoHK op1 = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK op2 = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                        NodoHK nodo = new NodoHK("mod");
                        nodo.hijos.add(op1);
                        nodo.hijos.add(op2);
                        RESULT = nodo;
                    
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("OPERACIONES",31, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OPERACIONES ::= OPERACIONES div OPERACIONES 
            {
              NodoHK RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)).right;
		NodoHK op1 = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK op2 = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                        NodoHK nodo = new NodoHK("div");
                        nodo.hijos.add(op1);
                        nodo.hijos.add(op2);
                        RESULT = nodo;
                    
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("OPERACIONES",31, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OPERACIONES ::= OPERACIONES por OPERACIONES 
            {
              NodoHK RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)).right;
		NodoHK op1 = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK op2 = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                        NodoHK nodo = new NodoHK("por");
                        nodo.hijos.add(op1);
                        nodo.hijos.add(op2);
                        RESULT = nodo;
                    
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("OPERACIONES",31, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OPERACIONES ::= OPERACIONES menos OPERACIONES 
            {
              NodoHK RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)).right;
		NodoHK op1 = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK op2 = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                        NodoHK nodo = new NodoHK("menos");
                        nodo.hijos.add(op1);
                        nodo.hijos.add(op2);
                        RESULT = nodo;
                    
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("OPERACIONES",31, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OPERACIONES ::= OPERACIONES mas OPERACIONES 
            {
              NodoHK RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)).right;
		NodoHK op1 = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK op2 = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                        NodoHK nodo = new NodoHK("mas");
                        nodo.hijos.add(op1);
                        nodo.hijos.add(op2);
                        RESULT = nodo;
                    
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("OPERACIONES",31, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CALCULAR ::= dolar tkn_calcular OPERACIONES dolar 
            {
              NodoHK RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).right;
		NodoHK op = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).value;
		
                        NodoHK nodo = new NodoHK("CALCULAR");
                        nodo.hijos.add(op);
                        RESULT = nodo;
                    
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("CALCULAR",4, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ARITMETICAS ::= LLAMADA_MET 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                        RESULT = nodo;
                    
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("ARITMETICAS",30, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ARITMETICAS ::= par_izq ARITMETICAS par_der 
            {
              NodoHK RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).right;
		NodoHK log = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).value;
		
                        RESULT = log;
                    
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("ARITMETICAS",30, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ARITMETICAS ::= texto 
            {
              NodoHK RESULT =null;
		int texleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int texright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		String tex = (String)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                        NodoHK nodo = new NodoHK("cadena");
                        nodo.hijos.add(new NodoHK(tex));
                        RESULT = nodo;
                    
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("ARITMETICAS",30, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ARITMETICAS ::= BUSCA_LIST 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                        RESULT = nodo;
                    
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("ARITMETICAS",30, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ARITMETICAS ::= identificador 
            {
              NodoHK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                        NodoHK nodo = new NodoHK("identificador");
                        nodo.hijos.add(new NodoHK(id, idleft, idright));
                        RESULT = nodo;
                    
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("ARITMETICAS",30, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ARITMETICAS ::= CALCULAR 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                        RESULT = nodo;
                    
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("ARITMETICAS",30, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DIM ::= dadmiracion porcentaje 
            {
              NodoHK RESULT =null;
		
                NodoHK nodo = new NodoHK("PORCENTAJE");
                RESULT = nodo;
            
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("DIM",21, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DIM ::= dadmiracion identificador 
            {
              NodoHK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                NodoHK nodo = new NodoHK("identificador");
                nodo.hijos.add(new NodoHK(id, idleft, idright));
                RESULT = nodo;
            
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("DIM",21, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DIM ::= dadmiracion LLAMADAS 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                RESULT = nodo;
            
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("DIM",21, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DIM ::= dadmiracion CALCULAR 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                RESULT = nodo;
            
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("DIM",21, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // LST_DIM ::= DIM 
            {
              NodoHK RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int diright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK di = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                    NodoHK nodo = new NodoHK("DIMENSIONES");
                    nodo.hijos.add(di);
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("LST_DIM",20, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // LST_DIM ::= LST_DIM DIM 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).value;
		int dileft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int diright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK di = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                    nodo.hijos.add(di);
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("LST_DIM",20, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // BUSCA_LIST ::= porcentaje LST_DIM 
            {
              NodoHK RESULT =null;
		int dimeleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int dimeright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK dime = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                    NodoHK nodo = new NodoHK("INDICE");
                    nodo.hijos.add(new NodoHK("PORCENTAJE"));
                    nodo.hijos.add(dime);
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("BUSCA_LIST",34, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // BUSCA_LIST ::= identificador LST_DIM 
            {
              NodoHK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).value;
		int dimeleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int dimeright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK dime = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                    NodoHK nodo = new NodoHK("INDICE");
                    NodoHK iden = new NodoHK("identificador");
                    iden.hijos.add(new NodoHK(id, idleft, idright));
                    nodo.hijos.add(iden);
                    nodo.hijos.add(dime);
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("BUSCA_LIST",34, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CON ::= aumento ASIGNA_LISTA 
            {
              NodoHK RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK as = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                RESULT = as;
            
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("CON",29, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LST_CON ::= CON 
            {
              NodoHK RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK co = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                    NodoHK nodo = new NodoHK("LST_CONCAT");
                    nodo.hijos.add(co);
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("LST_CON",28, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LST_CON ::= LST_CON CON 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).value;
		int coleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK co = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                    nodo.hijos.add(co);
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("LST_CON",28, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CONCAT ::= ASIGNA_LISTA LST_CON 
            {
              NodoHK RESULT =null;
		int as1left = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).left;
		int as1right = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).right;
		NodoHK as1 = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).value;
		int as2left = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int as2right = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK as2 = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                    NodoHK nodo = new NodoHK("CONCAT");
                    nodo.hijos.add(as1);
                    nodo.hijos.add(as2);
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("CONCAT",27, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LENGTH ::= dolar tkn_length BUSCA_LIST dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).value;
		
                    NodoHK nodo = new NodoHK("LENGTH");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("LENGTH",17, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LENGTH ::= dolar tkn_length MET_NATIVOS dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).value;
		
                    NodoHK nodo = new NodoHK("LENGTH");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("LENGTH",17, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LENGTH ::= dolar tkn_length OPC_LISTA dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).value;
		
                    NodoHK nodo = new NodoHK("LENGTH");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("LENGTH",17, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DESC ::= dolar tkn_desc BUSCA_LIST dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).value;
		
                    NodoHK nodo = new NodoHK("DESC");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("DESC",16, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DESC ::= dolar tkn_desc MET_NATIVOS dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).value;
		
                    NodoHK nodo = new NodoHK("DESC");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("DESC",16, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DESC ::= dolar tkn_desc OPC_LISTA dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).value;
		
                    NodoHK nodo = new NodoHK("DESC");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("DESC",16, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ASC ::= dolar tkn_asc BUSCA_LIST dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).value;
		
                    NodoHK nodo = new NodoHK("ASC");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("ASC",15, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ASC ::= dolar tkn_asc MET_NATIVOS dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).value;
		
                    NodoHK nodo = new NodoHK("ASC");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("ASC",15, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ASC ::= dolar tkn_asc OPC_LISTA dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).value;
		
                    NodoHK nodo = new NodoHK("ASC");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("ASC",15, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // PAR ::= dolar tkn_par BUSCA_LIST dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).value;
		
                    NodoHK nodo = new NodoHK("PAR");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("PAR",14, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PAR ::= dolar tkn_par MET_NATIVOS dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).value;
		
                    NodoHK nodo = new NodoHK("PAR");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("PAR",14, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PAR ::= dolar tkn_par OPC_LISTA dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).value;
		
                    NodoHK nodo = new NodoHK("PAR");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("PAR",14, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // IMPR ::= dolar tkn_impr BUSCA_LIST dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).value;
		
                    NodoHK nodo = new NodoHK("IMPR");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("IMPR",13, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // IMPR ::= dolar tkn_impr MET_NATIVOS dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).value;
		
                    NodoHK nodo = new NodoHK("IMPR");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("IMPR",13, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // IMPR ::= dolar tkn_impr OPC_LISTA dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).value;
		
                    NodoHK nodo = new NodoHK("IMPR");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("IMPR",13, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // REVERS ::= dolar tkn_revers BUSCA_LIST dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).value;
		
                    NodoHK nodo = new NodoHK("REVERS");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("REVERS",12, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // REVERS ::= dolar tkn_revers MET_NATIVOS dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).value;
		
                    NodoHK nodo = new NodoHK("REVERS");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("REVERS",12, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // REVERS ::= dolar tkn_revers OPC_LISTA dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).value;
		
                    NodoHK nodo = new NodoHK("REVERS");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("REVERS",12, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PRODUCT ::= dolar tkn_product BUSCA_LIST dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).value;
		
                    NodoHK nodo = new NodoHK("PRODUCT");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("PRODUCT",11, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PRODUCT ::= dolar tkn_product MET_NATIVOS dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).value;
		
                    NodoHK nodo = new NodoHK("PRODUCT");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("PRODUCT",11, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PRODUCT ::= dolar tkn_product OPC_LISTA dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).value;
		
                    NodoHK nodo = new NodoHK("PRODUCT");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("PRODUCT",11, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SUM ::= dolar tkn_sum BUSCA_LIST dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).value;
		
                    NodoHK nodo = new NodoHK("SUM");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("SUM",10, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SUM ::= dolar tkn_sum MET_NATIVOS dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).value;
		
                    NodoHK nodo = new NodoHK("SUM");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("SUM",10, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SUM ::= dolar tkn_sum OPC_LISTA dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).value;
		
                    NodoHK nodo = new NodoHK("SUM");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("SUM",10, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // MAX ::= dolar tkn_max BUSCA_LIST dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).value;
		
                    NodoHK nodo = new NodoHK("MAX");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("MAX",9, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // MAX ::= dolar tkn_max MET_NATIVOS dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).value;
		
                    NodoHK nodo = new NodoHK("MAX");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("MAX",9, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // MAX ::= dolar tkn_max OPC_LISTA dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).value;
		
                    NodoHK nodo = new NodoHK("MAX");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("MAX",9, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // MIN ::= dolar tkn_min MET_NATIVOS dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).value;
		
                    NodoHK nodo = new NodoHK("MIN");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("MIN",8, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // MIN ::= dolar tkn_min OPC_LISTA dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).value;
		
                    NodoHK nodo = new NodoHK("MIN");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("MIN",8, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPC_LISTA ::= ASIGNA_LISTA 
            {
              NodoHK RESULT =null;
		int asgleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int asgright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK asg = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                    RESULT = asg;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("OPC_LISTA",26, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECC ::= dolar tkn_decc MET_NATIVOS dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).value;
		
                    NodoHK nodo = new NodoHK("DECC");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("DECC",7, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECC ::= dolar tkn_decc porcentaje dolar 
            {
              NodoHK RESULT =null;
		
                    NodoHK nodo = new NodoHK("DECC");
                    nodo.hijos.add(new NodoHK("PORCENTAJE"));
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("DECC",7, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECC ::= dolar tkn_decc ARITMETICAS dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).value;
		
                    NodoHK nodo = new NodoHK("DECC");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("DECC",7, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SUCC ::= dolar tkn_succ MET_NATIVOS dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).value;
		
                    NodoHK nodo = new NodoHK("SUCC");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("SUCC",6, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SUCC ::= dolar tkn_succ porcentaje dolar 
            {
              NodoHK RESULT =null;
		
                    NodoHK nodo = new NodoHK("SUCC");
                    nodo.hijos.add(new NodoHK("PORCENTAJE"));
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("SUCC",6, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SUCC ::= dolar tkn_succ ARITMETICAS dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).value;
		
                    NodoHK nodo = new NodoHK("SUCC");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("SUCC",6, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ODIM ::= MET_NATIVOS 
            {
              NodoHK RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK n = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("ODIM",33, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ODIM ::= porcentaje 
            {
              NodoHK RESULT =null;
		
                    NodoHK nodo = new NodoHK("PORCENTAJE");
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("ODIM",33, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ODIM ::= caracter 
            {
              NodoHK RESULT =null;
		int carleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int carright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		String car = (String)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                    NodoHK nodo = new NodoHK("caracter");
                    nodo.hijos.add(new NodoHK(car, carleft, carright));
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("ODIM",33, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ODIM ::= ARITMETICAS 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("ODIM",33, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OTRA_DIM ::= ODIM 
            {
              NodoHK RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int diright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK di = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                    NodoHK nodo = new NodoHK("DIMENSIONES");
                    nodo.hijos.add(di);
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("OTRA_DIM",32, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OTRA_DIM ::= OTRA_DIM coma ODIM 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)).value;
		int dileft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int diright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK di = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                    nodo.hijos.add(di);
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("OTRA_DIM",32, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DIMS ::= cor_izq OTRA_DIM cor_der 
            {
              NodoHK RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).right;
		NodoHK di = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).value;
		
                    RESULT = di;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("DIMS",24, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DIMS ::= porcentaje 
            {
              NodoHK RESULT =null;
		
                    NodoHK nodo = new NodoHK("PORCENTAJE");
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("DIMS",24, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DIMS ::= caracter 
            {
              NodoHK RESULT =null;
		int carleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int carright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		String car = (String)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                    NodoHK nodo = new NodoHK("caracter");
                    nodo.hijos.add(new NodoHK(car, carleft, carright));
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("DIMS",24, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DIMS ::= ARITMETICAS 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("DIMS",24, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LST_DIMS ::= DIMS 
            {
              NodoHK RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int diright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK di = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                    NodoHK nodo = new NodoHK("DIMENSIONES");
                    nodo.hijos.add(di);
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("LST_DIMS",23, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LST_DIMS ::= LST_DIMS coma DIMS 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)).value;
		int dileft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int diright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK di = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                    nodo.hijos.add(di);
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("LST_DIMS",23, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LLAMADAS ::= MET_NATIVOS 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("LLAMADAS",35, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LLAMADAS ::= LLAMADA_MET 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("LLAMADAS",35, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ASIGNA_LISTA ::= porcentaje 
            {
              NodoHK RESULT =null;
		
                        NodoHK nodo = new NodoHK("PORCENTAJE");
                        RESULT = nodo;
                    
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("ASIGNA_LISTA",25, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ASIGNA_LISTA ::= identificador 
            {
              NodoHK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                        NodoHK nodo = new NodoHK("identificador");
                        nodo.hijos.add(new NodoHK(id, idleft, idright));
                        RESULT = nodo;
                    
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("ASIGNA_LISTA",25, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ASIGNA_LISTA ::= texto 
            {
              NodoHK RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                        NodoHK nodo = new NodoHK("cadena");
                        nodo.hijos.add(new NodoHK(cad, cadleft, cadright));
                        RESULT = nodo;
                    
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("ASIGNA_LISTA",25, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ASIGNA_LISTA ::= cor_izq LST_DIMS cor_der 
            {
              NodoHK RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).right;
		NodoHK di = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).value;
		
                        NodoHK nodo = new NodoHK("lista");
                        nodo.hijos.add(di);
                        RESULT = nodo;
                    
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("ASIGNA_LISTA",25, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LISTA ::= tkn_let identificador igual BUSCA_LIST 
            {
              NodoHK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)).value;
		int llaleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int llaright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK lla = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                        NodoHK nodo = new NodoHK("DECLARA_ASIGNA_LISTA");
                        nodo.hijos.add(new NodoHK(id, idleft, idright));
                        nodo.hijos.add(lla);
                        RESULT = nodo;
                    
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("LISTA",5, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LISTA ::= tkn_let identificador igual LLAMADAS 
            {
              NodoHK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)).value;
		int llaleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int llaright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK lla = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                        NodoHK nodo = new NodoHK("DECLARA_ASIGNA_LISTA");
                        nodo.hijos.add(new NodoHK(id, idleft, idright));
                        nodo.hijos.add(lla);
                        RESULT = nodo;
                    
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("LISTA",5, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LISTA ::= tkn_let identificador igual ASIGNA_LISTA 
            {
              NodoHK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)).value;
		int asgleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int asgright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK asg = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                        NodoHK nodo = new NodoHK("DECLARA_ASIGNA_LISTA");
                        nodo.hijos.add(new NodoHK(id, idleft, idright));
                        nodo.hijos.add(asg);
                        RESULT = nodo;
                    
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("LISTA",5, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MET_NATIVOS ::= CONCAT 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("MET_NATIVOS",22, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // MET_NATIVOS ::= LENGTH 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("MET_NATIVOS",22, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // MET_NATIVOS ::= ASC 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("MET_NATIVOS",22, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // MET_NATIVOS ::= DESC 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("MET_NATIVOS",22, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // MET_NATIVOS ::= PAR 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("MET_NATIVOS",22, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // MET_NATIVOS ::= IMPR 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("MET_NATIVOS",22, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MET_NATIVOS ::= REVERS 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("MET_NATIVOS",22, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // MET_NATIVOS ::= PRODUCT 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("MET_NATIVOS",22, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // MET_NATIVOS ::= SUM 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("MET_NATIVOS",22, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // MET_NATIVOS ::= MAX 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("MET_NATIVOS",22, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // MET_NATIVOS ::= MIN 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("MET_NATIVOS",22, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // MET_NATIVOS ::= DECC 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("MET_NATIVOS",22, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MET_NATIVOS ::= SUCC 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("MET_NATIVOS",22, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LPAR ::= MET_NATIVOS 
            {
              NodoHK RESULT =null;
		int naleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int naright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK na = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                RESULT = na;
            
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("LPAR",19, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LPAR ::= cor_izq LST_DIMS cor_der 
            {
              NodoHK RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).right;
		NodoHK di = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).value;
		
                NodoHK nodo = new NodoHK("lista");
                nodo.hijos.add(di);
                RESULT = nodo;
            
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("LPAR",19, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LPAR ::= porcentaje 
            {
              NodoHK RESULT =null;
		
                NodoHK nodo = new NodoHK("PORCENTAJE");
                RESULT = nodo;
            
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("LPAR",19, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LPAR ::= ARITMETICAS 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("LPAR",19, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LST_PAR ::= LPAR 
            {
              NodoHK RESULT =null;
		int paleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int paright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK pa = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                    NodoHK nodo = new NodoHK("PARAMETROS");
                    nodo.hijos.add(pa);
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("LST_PAR",18, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LST_PAR ::= LST_PAR coma LPAR 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int paright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK pa = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                    nodo.hijos.add(pa);
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("LST_PAR",18, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LLAMADA_MET ::= dolar identificador llave_izq llave_der dolar 
            {
              NodoHK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-3)).value;
		
                    NodoHK nodo = new NodoHK("LLAMADA_MET");
                    nodo.hijos.add(new NodoHK(id, idleft, idright));
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("LLAMADA_MET",3, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LLAMADA_MET ::= dolar identificador llave_izq LST_PAR llave_der dolar 
            {
              NodoHK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-4)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)).right;
		NodoHK param = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-2)).value;
		
                    NodoHK nodo = new NodoHK("LLAMADA_MET");
                    nodo.hijos.add(new NodoHK(id, idleft, idright));
                    nodo.hijos.add(param);
                    RESULT = nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("LLAMADA_MET",3, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIAS ::= BUSCA_LIST 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",2, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIAS ::= CALCULAR 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",2, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIAS ::= MET_NATIVOS 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",2, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIAS ::= LISTA 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",2, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIAS ::= LLAMADA_MET 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",2, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LST_SENTENCIAS ::= SENTENCIAS 
            {
              NodoHK RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK se = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                        NodoHK nodo = new NodoHK("SENTENCIAS");
                        nodo.hijos.add(se);
                        RESULT = nodo;
                    
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("LST_SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LST_SENTENCIAS ::= LST_SENTENCIAS SENTENCIAS 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK se = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                        nodo.hijos.add(se);
                        RESULT = nodo;
                    
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("LST_SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LST_SENTENCIAS 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.peek()).value;
		
                    parser.nodo=nodo;
                
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          return CUP$sintacticoConsole$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).right;
		NodoHK start_val = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)).value;
		RESULT = start_val;
              CUP$sintacticoConsole$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.elementAt(CUP$sintacticoConsole$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoConsole$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintacticoConsole$parser.done_parsing();
          return CUP$sintacticoConsole$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

