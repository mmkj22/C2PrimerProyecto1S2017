/* The following code was generated by JFlex 1.6.0 */

package Analisis;
import Analisis.sym.*;
import java_cup.runtime.Symbol;
import Errores.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>C:/Users/Kristhal/Documents/NetBeansProjects/[Compi2]Proyecto1_201314655/src/Analisis/scannerGraphik.jflex</tt>
 */
public class lexicoGraphik implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\74\1\36\1\75\1\74\1\74\22\0\1\74\1\4\1\1"+
    "\1\22\1\7\1\7\1\30\1\2\1\66\1\67\1\26\1\25\1\17"+
    "\1\15\1\16\1\35\12\31\1\73\1\7\1\20\1\10\1\21\1\11"+
    "\1\7\1\43\1\57\1\53\1\42\1\40\1\45\1\62\1\63\1\55"+
    "\1\3\1\65\1\46\1\56\1\51\1\44\1\60\1\3\1\41\1\50"+
    "\1\52\1\61\1\37\4\3\1\23\1\7\1\24\1\27\1\14\1\0"+
    "\1\43\1\57\1\53\1\42\1\40\1\45\1\33\1\63\1\55\1\3"+
    "\1\34\1\46\1\56\1\51\1\44\1\60\1\3\1\41\1\50\1\52"+
    "\1\61\1\37\4\3\1\70\1\72\1\71\1\7\6\0\1\75\44\0"+
    "\1\6\1\0\1\6\4\0\1\32\5\0\1\6\2\0\1\6\2\0"+
    "\1\6\1\0\1\6\2\0\1\5\1\12\154\0\2\54\115\0\1\47"+
    "\u1e98\0\1\32\10\0\1\13\6\0\1\75\1\75\u0100\0\1\64\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\3\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\1\1\21\1\2\1\22\1\23\7\2\1\1"+
    "\4\2\1\1\5\2\1\24\1\25\1\26\1\27\1\1"+
    "\1\30\1\0\1\31\1\0\1\32\3\0\1\33\1\34"+
    "\1\35\1\36\1\37\2\13\1\40\1\41\1\42\1\0"+
    "\13\2\1\0\1\43\1\2\1\43\4\2\2\0\2\2"+
    "\1\0\7\2\1\44\2\0\1\45\2\2\1\46\7\2"+
    "\2\47\2\2\2\0\6\2\1\0\3\2\3\0\3\2"+
    "\1\0\3\2\1\0\5\2\1\50\1\0\2\2\1\0"+
    "\4\2\1\0\3\2\1\0\2\2\1\0\1\51\1\2"+
    "\1\51\4\2\2\52\2\2\4\0\4\2\1\0\1\2"+
    "\1\53\2\2\1\0\1\2\1\54\3\2\1\13\2\2"+
    "\2\55\3\2\1\0\1\2\2\56\1\57\2\60\1\2"+
    "\1\0\1\2\1\61\1\0\4\2\1\0\1\2\4\0"+
    "\4\2\1\0\3\2\1\0\1\2\1\0\2\2\1\62"+
    "\1\0\2\2\1\63\2\2\1\0\3\2\1\64\1\0"+
    "\1\2\1\0\2\2\1\65\1\2\1\0\1\2\1\0"+
    "\1\66\2\0\1\2\1\66\2\2\1\0\2\2\1\0"+
    "\1\2\1\0\1\2\1\0\1\2\1\67\1\0\3\2"+
    "\1\70\2\71\3\2\1\0\1\2\1\0\2\2\1\72"+
    "\1\0\1\2\3\0\3\2\1\0\1\2\1\0\1\2"+
    "\1\0\1\2\2\73\2\74\1\0\2\2\1\75\2\2"+
    "\2\76\1\0\1\2\2\77\1\100\1\0\1\2\1\0"+
    "\1\101\1\102\1\2\1\101\1\102\2\103\1\0\1\2"+
    "\2\104\1\0\1\2\1\105\1\106\1\107\2\110\2\111"+
    "\1\0\1\112\1\2\1\112\2\113\1\0\1\2\2\114"+
    "\1\0\1\2\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\0\1\2\1\0\1\2\2\115";

  private static int [] zzUnpackAction() {
    int [] result = new int[366];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\76"+
    "\0\u01b2\0\76\0\76\0\u01f0\0\u022e\0\u026c\0\76\0\76"+
    "\0\u02aa\0\76\0\76\0\u02e8\0\u0326\0\u0364\0\76\0\u03a2"+
    "\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8\0\u0516\0\u0554\0\u0592"+
    "\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8\0\u0706\0\u0744\0\u0782"+
    "\0\u07c0\0\u07fe\0\76\0\76\0\76\0\76\0\u083c\0\76"+
    "\0\174\0\76\0\u087a\0\76\0\u08b8\0\u08f6\0\u0934\0\76"+
    "\0\76\0\76\0\76\0\76\0\u0972\0\u09b0\0\76\0\76"+
    "\0\76\0\u09ee\0\u0a2c\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62"+
    "\0\u0ba0\0\u0bde\0\u0c1c\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14\0\u0d52"+
    "\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04\0\u0f42"+
    "\0\u0f80\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\u10b6\0\u10f4\0\u1132"+
    "\0\u1170\0\76\0\u11ae\0\u11ec\0\u09ee\0\u122a\0\u1268\0\370"+
    "\0\u12a6\0\u12e4\0\u1322\0\u1360\0\u139e\0\u13dc\0\u141a\0\76"+
    "\0\370\0\u1458\0\u1496\0\u14d4\0\u1512\0\u1550\0\u158e\0\u15cc"+
    "\0\u160a\0\u1648\0\u1686\0\u16c4\0\u1702\0\u1740\0\u177e\0\u17bc"+
    "\0\u17fa\0\u1838\0\u1876\0\u18b4\0\u18f2\0\u1930\0\u196e\0\u19ac"+
    "\0\u19ea\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e\0\76"+
    "\0\u1b9c\0\u1bda\0\u1c18\0\u1c56\0\u1c94\0\u1cd2\0\u1d10\0\u1d4e"+
    "\0\u1d8c\0\u1dca\0\u1e08\0\u1e46\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e"+
    "\0\76\0\u1f7c\0\370\0\u1fba\0\u1ff8\0\u2036\0\u2074\0\76"+
    "\0\370\0\u20b2\0\u20f0\0\u212e\0\u216c\0\u21aa\0\u21e8\0\u2226"+
    "\0\u2264\0\u22a2\0\u22e0\0\u231e\0\u235c\0\370\0\u239a\0\u23d8"+
    "\0\u2416\0\u2454\0\370\0\u2492\0\u24d0\0\u250e\0\76\0\u254c"+
    "\0\u258a\0\76\0\370\0\u25c8\0\u2606\0\u2644\0\u2682\0\u26c0"+
    "\0\76\0\370\0\u26fe\0\76\0\370\0\u273c\0\u277a\0\u27b8"+
    "\0\370\0\u27f6\0\u2834\0\u2872\0\u28b0\0\u28ee\0\u292c\0\u296a"+
    "\0\u29a8\0\u29e6\0\u2a24\0\u2a62\0\u2aa0\0\u2ade\0\u2b1c\0\u2b5a"+
    "\0\u2b98\0\u2bd6\0\u2c14\0\u2c52\0\u2c90\0\u2cce\0\u2d0c\0\u2d4a"+
    "\0\u2d88\0\370\0\u2dc6\0\u2e04\0\u2e42\0\370\0\u2e80\0\u2ebe"+
    "\0\u2efc\0\u2f3a\0\u2f78\0\u2fb6\0\u2ff4\0\u3032\0\u3070\0\u30ae"+
    "\0\u30ec\0\u312a\0\370\0\u3168\0\u31a6\0\u31e4\0\u3222\0\76"+
    "\0\u3260\0\u329e\0\u32dc\0\370\0\u331a\0\u3358\0\u3396\0\u33d4"+
    "\0\u3412\0\u3450\0\u348e\0\u34cc\0\u350a\0\u3548\0\u3586\0\370"+
    "\0\u35c4\0\u3602\0\u3640\0\u367e\0\370\0\76\0\370\0\u36bc"+
    "\0\u36fa\0\u3738\0\u3776\0\u37b4\0\u37f2\0\u3830\0\u386e\0\370"+
    "\0\u38ac\0\u38ea\0\u3928\0\u3966\0\u39a4\0\u39e2\0\u3a20\0\u3a5e"+
    "\0\u3a9c\0\u3ada\0\u3b18\0\u3b56\0\u3b94\0\u3bd2\0\76\0\370"+
    "\0\76\0\370\0\u3c10\0\u3c4e\0\u3c8c\0\370\0\u3cca\0\u3d08"+
    "\0\370\0\76\0\u3d46\0\u3d84\0\76\0\370\0\370\0\u3dc2"+
    "\0\u3e00\0\u3e3e\0\u3e7c\0\76\0\u3eba\0\u3ef8\0\370\0\76"+
    "\0\370\0\u3f36\0\u3f74\0\76\0\370\0\u3fb2\0\u3ff0\0\370"+
    "\0\370\0\370\0\76\0\370\0\76\0\370\0\u402e\0\76"+
    "\0\u406c\0\370\0\76\0\370\0\u40aa\0\u40e8\0\76\0\370"+
    "\0\u4126\0\u4164\0\u41a2\0\u41e0\0\u421e\0\u425c\0\u429a\0\u42d8"+
    "\0\u4316\0\u4354\0\u4392\0\u43d0\0\76\0\370";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[366];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\3\2\1\7\1\10"+
    "\1\5\2\2\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\5"+
    "\1\26\1\5\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\5\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\5\1\26"+
    "\1\52\1\2\1\5\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\30\77\0\1\61\1\62\74\61\1\0\1\63"+
    "\1\64\2\63\1\65\1\0\3\63\1\66\1\0\16\63"+
    "\1\0\2\63\2\0\10\63\1\0\4\63\1\0\7\63"+
    "\1\0\1\63\13\0\1\5\6\0\1\5\1\0\1\5"+
    "\1\0\1\67\12\0\4\5\2\0\10\5\1\0\4\5"+
    "\1\0\7\5\1\0\1\5\20\0\1\70\75\0\1\71"+
    "\102\0\1\72\70\0\1\73\75\0\1\74\65\0\35\75"+
    "\1\76\1\0\37\75\25\0\1\77\100\0\1\100\41\0"+
    "\1\101\21\0\1\102\12\0\1\25\47\0\1\5\6\0"+
    "\1\5\1\0\1\5\1\0\1\67\12\0\4\5\2\0"+
    "\2\5\1\103\5\5\1\0\4\5\1\0\7\5\1\0"+
    "\1\5\46\0\1\30\35\0\1\30\4\0\1\5\6\0"+
    "\1\5\1\0\1\5\1\0\1\67\12\0\4\5\2\0"+
    "\1\5\1\104\2\5\1\105\3\5\1\0\4\5\1\0"+
    "\7\5\1\0\1\5\13\0\1\5\6\0\1\5\1\0"+
    "\1\5\1\0\1\67\12\0\4\5\2\0\10\5\1\0"+
    "\1\5\1\106\2\5\1\0\7\5\1\0\1\5\13\0"+
    "\1\5\6\0\1\5\1\0\1\5\1\0\1\67\12\0"+
    "\4\5\2\0\1\5\1\107\6\5\1\0\4\5\1\0"+
    "\7\5\1\0\1\5\13\0\1\5\6\0\1\5\1\0"+
    "\1\5\1\0\1\67\12\0\4\5\2\0\1\5\1\110"+
    "\2\5\1\111\1\112\2\5\1\0\4\5\1\0\7\5"+
    "\1\0\1\5\13\0\1\5\6\0\1\5\1\0\1\5"+
    "\1\0\1\67\12\0\4\5\2\0\7\5\1\113\1\0"+
    "\4\5\1\0\7\5\1\0\1\5\13\0\1\5\6\0"+
    "\1\5\1\0\1\5\1\0\1\67\12\0\4\5\2\0"+
    "\4\5\1\114\3\5\1\0\4\5\1\0\7\5\1\0"+
    "\1\5\13\0\1\5\6\0\1\5\1\0\1\5\1\0"+
    "\1\67\12\0\4\5\2\0\7\5\1\115\1\0\4\5"+
    "\1\0\7\5\1\0\1\5\50\0\1\116\13\0\2\117"+
    "\23\0\1\5\6\0\1\5\1\0\1\5\1\0\1\67"+
    "\12\0\4\5\2\0\1\5\1\120\6\5\1\0\4\5"+
    "\1\117\1\121\6\5\1\0\1\5\13\0\1\5\6\0"+
    "\1\5\1\0\1\5\1\0\1\67\12\0\4\5\2\0"+
    "\10\5\1\0\4\5\1\0\4\5\1\122\2\5\1\0"+
    "\1\5\13\0\1\5\6\0\1\5\1\0\1\5\1\0"+
    "\1\67\12\0\4\5\2\0\1\5\1\123\6\5\1\0"+
    "\4\5\1\0\7\5\1\0\1\5\13\0\1\5\6\0"+
    "\1\5\1\0\1\5\1\0\1\67\12\0\4\5\2\0"+
    "\4\5\1\124\1\125\2\5\1\0\4\5\1\0\7\5"+
    "\1\0\1\5\61\0\1\126\4\0\1\127\22\0\1\5"+
    "\6\0\1\5\1\0\1\5\1\0\1\67\12\0\4\5"+
    "\2\0\10\5\1\0\1\5\1\130\2\5\1\0\1\5"+
    "\1\131\5\5\1\0\1\5\13\0\1\5\6\0\1\5"+
    "\1\0\1\5\1\0\1\67\12\0\4\5\2\0\10\5"+
    "\1\0\4\5\1\132\1\133\6\5\1\0\1\5\13\0"+
    "\1\5\6\0\1\5\1\0\1\5\1\0\1\67\12\0"+
    "\4\5\2\0\5\5\1\134\2\5\1\0\4\5\1\0"+
    "\7\5\1\0\1\5\13\0\1\5\6\0\1\5\1\0"+
    "\1\5\1\0\1\67\12\0\4\5\2\0\2\5\1\135"+
    "\1\5\1\136\3\5\1\0\4\5\1\0\4\5\1\137"+
    "\2\5\1\0\1\5\13\0\1\5\6\0\1\5\1\0"+
    "\1\5\1\0\1\67\12\0\4\5\2\0\1\5\1\140"+
    "\2\5\1\141\3\5\1\0\4\5\1\0\7\5\1\0"+
    "\1\5\102\0\1\142\5\0\1\64\101\0\1\63\102\0"+
    "\1\63\115\0\1\143\42\0\36\75\1\0\37\75\35\76"+
    "\1\75\1\144\37\76\31\0\1\145\47\0\1\5\6\0"+
    "\1\5\1\0\1\5\1\0\1\67\12\0\4\5\2\0"+
    "\4\5\1\146\3\5\1\0\4\5\1\0\7\5\1\0"+
    "\1\5\13\0\1\5\6\0\1\5\1\0\1\5\1\0"+
    "\1\67\12\0\4\5\2\0\2\5\1\147\5\5\1\0"+
    "\4\5\1\0\7\5\1\0\1\5\13\0\1\5\6\0"+
    "\1\5\1\0\1\5\1\0\1\67\12\0\4\5\2\0"+
    "\2\5\1\150\5\5\1\0\3\5\1\151\1\0\7\5"+
    "\1\0\1\5\13\0\1\5\6\0\1\5\1\0\1\5"+
    "\1\0\1\67\12\0\4\5\2\0\10\5\1\0\2\5"+
    "\1\152\1\5\1\0\7\5\1\0\1\5\13\0\1\5"+
    "\6\0\1\5\1\0\1\5\1\0\1\67\12\0\4\5"+
    "\2\0\10\5\1\0\2\5\1\153\1\5\1\0\7\5"+
    "\1\0\1\5\13\0\1\5\6\0\1\5\1\0\1\5"+
    "\1\0\1\67\12\0\4\5\2\0\6\5\1\154\1\5"+
    "\1\0\3\5\1\155\1\0\7\5\1\0\1\5\13\0"+
    "\1\5\6\0\1\5\1\0\1\5\1\0\1\67\12\0"+
    "\4\5\2\0\10\5\1\0\2\5\1\156\1\5\1\0"+
    "\7\5\1\0\1\5\13\0\1\5\6\0\1\5\1\0"+
    "\1\5\1\0\1\67\12\0\4\5\2\0\10\5\1\0"+
    "\1\5\1\157\2\5\1\0\7\5\1\0\1\5\13\0"+
    "\1\5\6\0\1\5\1\0\1\5\1\0\1\67\12\0"+
    "\4\5\2\0\10\5\1\160\1\161\3\5\1\0\7\5"+
    "\1\0\1\5\13\0\1\5\6\0\1\5\1\0\1\5"+
    "\1\0\1\67\12\0\4\5\2\0\7\5\1\162\1\0"+
    "\4\5\1\0\7\5\1\0\1\5\13\0\1\5\6\0"+
    "\1\5\1\0\1\5\1\0\1\67\12\0\4\5\2\0"+
    "\4\5\1\163\3\5\1\0\4\5\1\0\7\5\1\0"+
    "\1\5\56\0\1\164\100\0\1\165\27\0\1\5\6\0"+
    "\1\5\1\0\1\5\1\0\1\67\12\0\4\5\2\0"+
    "\7\5\1\166\1\0\4\5\1\0\7\5\1\0\1\5"+
    "\13\0\1\5\6\0\1\5\1\0\1\5\1\0\1\67"+
    "\12\0\4\5\2\0\10\5\1\0\1\5\1\167\2\5"+
    "\1\0\7\5\1\0\1\5\13\0\1\5\6\0\1\5"+
    "\1\0\1\5\1\0\1\67\12\0\4\5\2\0\1\5"+
    "\1\170\6\5\1\0\4\5\1\0\7\5\1\0\1\5"+
    "\13\0\1\5\6\0\1\5\1\0\1\5\1\0\1\67"+
    "\12\0\4\5\2\0\2\5\1\171\5\5\1\0\4\5"+
    "\1\0\7\5\1\0\1\5\13\0\1\5\6\0\1\5"+
    "\1\0\1\5\1\0\1\67\12\0\4\5\2\0\2\5"+
    "\1\172\1\173\4\5\1\174\1\175\3\5\1\0\7\5"+
    "\1\0\1\5\13\0\1\5\6\0\1\5\1\0\1\5"+
    "\1\0\1\67\12\0\4\5\2\0\7\5\1\176\1\0"+
    "\1\5\1\177\2\5\1\0\7\5\1\0\1\5\63\0"+
    "\1\200\2\201\100\0\1\202\20\0\1\5\6\0\1\5"+
    "\1\0\1\5\1\0\1\67\12\0\4\5\2\0\10\5"+
    "\1\0\3\5\1\203\1\201\1\204\6\5\1\0\1\5"+
    "\13\0\1\5\6\0\1\5\1\0\1\5\1\0\1\67"+
    "\12\0\4\5\2\0\10\5\1\0\4\5\1\0\3\5"+
    "\1\205\3\5\1\0\1\5\50\0\1\206\40\0\1\5"+
    "\6\0\1\5\1\0\1\5\1\0\1\67\12\0\4\5"+
    "\2\0\1\5\1\207\6\5\1\0\4\5\1\0\7\5"+
    "\1\0\1\5\13\0\1\5\6\0\1\5\1\0\1\5"+
    "\1\0\1\67\12\0\4\5\2\0\5\5\1\210\2\5"+
    "\1\0\4\5\1\0\7\5\1\0\1\5\13\0\1\5"+
    "\6\0\1\5\1\0\1\5\1\0\1\67\12\0\4\5"+
    "\2\0\5\5\1\211\2\5\1\0\4\5\1\212\1\213"+
    "\6\5\1\0\1\5\13\0\1\5\6\0\1\5\1\0"+
    "\1\5\1\0\1\67\12\0\4\5\2\0\2\5\1\214"+
    "\5\5\1\0\4\5\1\0\7\5\1\0\1\5\13\0"+
    "\1\5\6\0\1\5\1\0\1\5\1\0\1\67\12\0"+
    "\4\5\2\0\10\5\1\0\4\5\1\0\2\5\1\215"+
    "\4\5\1\0\1\5\13\0\1\5\6\0\1\5\1\0"+
    "\1\5\1\0\1\67\12\0\4\5\2\0\2\5\1\216"+
    "\5\5\1\0\4\5\1\0\7\5\1\0\1\5\13\0"+
    "\1\5\6\0\1\5\1\0\1\5\1\0\1\67\12\0"+
    "\4\5\2\0\10\5\1\0\3\5\1\217\1\0\7\5"+
    "\1\0\1\5\44\0\1\220\41\0\35\144\1\221\40\144"+
    "\3\0\1\5\6\0\1\5\1\0\1\5\1\0\1\67"+
    "\12\0\4\5\2\0\10\5\1\0\4\5\1\0\3\5"+
    "\1\222\3\5\1\0\1\5\13\0\1\5\6\0\1\5"+
    "\1\0\1\5\1\0\1\67\12\0\4\5\2\0\3\5"+
    "\1\223\4\5\1\0\4\5\1\0\7\5\1\0\1\5"+
    "\13\0\1\5\6\0\1\5\1\0\1\5\1\0\1\67"+
    "\12\0\4\5\2\0\10\5\1\0\4\5\1\224\1\225"+
    "\6\5\1\0\1\5\13\0\1\5\6\0\1\5\1\0"+
    "\1\5\1\0\1\67\12\0\4\5\2\0\1\5\1\226"+
    "\6\5\1\0\4\5\1\0\7\5\1\0\1\5\13\0"+
    "\1\5\6\0\1\5\1\0\1\5\1\0\1\67\12\0"+
    "\4\5\2\0\5\5\1\227\2\5\1\0\4\5\1\0"+
    "\7\5\1\0\1\5\13\0\1\5\6\0\1\5\1\0"+
    "\1\5\1\0\1\67\12\0\4\5\2\0\1\5\1\230"+
    "\6\5\1\0\4\5\1\0\7\5\1\0\1\5\13\0"+
    "\1\5\6\0\1\5\1\0\1\5\1\0\1\67\12\0"+
    "\4\5\2\0\10\5\1\0\4\5\1\231\1\232\6\5"+
    "\1\0\1\5\13\0\1\5\6\0\1\5\1\0\1\5"+
    "\1\0\1\67\12\0\4\5\2\0\5\5\1\233\2\5"+
    "\1\0\4\5\1\0\7\5\1\0\1\5\13\0\1\5"+
    "\6\0\1\5\1\0\1\5\1\0\1\67\12\0\4\5"+
    "\2\0\3\5\1\234\4\5\1\0\4\5\1\0\7\5"+
    "\1\0\1\5\13\0\1\5\6\0\1\5\1\0\1\5"+
    "\1\0\1\67\12\0\4\5\2\0\10\5\1\235\1\236"+
    "\3\5\1\0\7\5\1\0\1\5\13\0\1\5\6\0"+
    "\1\5\1\0\1\5\1\0\1\67\12\0\4\5\2\0"+
    "\10\5\1\0\4\5\1\0\1\5\1\237\5\5\1\0"+
    "\1\5\50\0\1\240\101\0\1\241\34\0\1\5\6\0"+
    "\1\5\1\0\1\5\1\0\1\67\12\0\4\5\2\0"+
    "\1\5\1\242\6\5\1\0\4\5\1\0\7\5\1\0"+
    "\1\5\13\0\1\5\6\0\1\5\1\0\1\5\1\0"+
    "\1\67\12\0\4\5\2\0\5\5\1\243\2\5\1\0"+
    "\4\5\1\0\7\5\1\0\1\5\13\0\1\5\6\0"+
    "\1\5\1\0\1\5\1\0\1\67\12\0\4\5\2\0"+
    "\1\244\7\5\1\0\4\5\1\0\7\5\1\0\1\5"+
    "\13\0\1\5\6\0\1\5\1\0\1\5\1\0\1\67"+
    "\12\0\4\5\2\0\10\5\1\0\4\5\1\0\1\5"+
    "\1\245\5\5\1\0\1\5\13\0\1\5\6\0\1\5"+
    "\1\0\1\5\1\0\1\67\12\0\4\5\2\0\4\5"+
    "\1\246\3\5\1\0\4\5\1\0\7\5\1\0\1\5"+
    "\13\0\1\5\6\0\1\5\1\0\1\5\1\0\1\67"+
    "\12\0\4\5\2\0\1\5\1\247\6\5\1\0\4\5"+
    "\1\0\7\5\1\0\1\5\54\0\1\250\34\0\1\5"+
    "\6\0\1\5\1\0\1\5\1\0\1\67\12\0\4\5"+
    "\2\0\5\5\1\251\2\5\1\0\4\5\1\0\7\5"+
    "\1\0\1\5\13\0\1\5\6\0\1\5\1\0\1\5"+
    "\1\0\1\67\12\0\4\5\2\0\10\5\1\0\4\5"+
    "\1\0\4\5\1\252\2\5\1\0\1\5\13\0\1\5"+
    "\6\0\1\5\1\0\1\5\1\0\1\67\12\0\4\5"+
    "\2\0\10\5\1\0\2\5\1\253\1\5\1\0\7\5"+
    "\1\0\1\5\56\0\1\254\102\0\1\255\63\0\1\256"+
    "\2\0\1\257\34\0\1\5\6\0\1\5\1\0\1\5"+
    "\1\0\1\67\12\0\4\5\2\0\7\5\1\260\1\0"+
    "\4\5\1\0\7\5\1\0\1\5\13\0\1\5\6\0"+
    "\1\5\1\0\1\5\1\0\1\67\12\0\4\5\2\0"+
    "\10\5\1\0\3\5\1\261\1\0\7\5\1\0\1\5"+
    "\13\0\1\5\6\0\1\5\1\0\1\5\1\0\1\67"+
    "\12\0\4\5\2\0\2\5\1\262\2\5\1\263\2\5"+
    "\1\0\4\5\1\0\7\5\1\0\1\5\61\0\1\264"+
    "\27\0\1\5\6\0\1\5\1\0\1\5\1\0\1\67"+
    "\12\0\4\5\2\0\10\5\1\0\1\5\1\265\2\5"+
    "\1\0\7\5\1\0\1\5\13\0\1\5\6\0\1\5"+
    "\1\0\1\5\1\0\1\67\12\0\4\5\2\0\7\5"+
    "\1\266\1\0\4\5\1\0\7\5\1\0\1\5\13\0"+
    "\1\5\6\0\1\5\1\0\1\5\1\0\1\67\12\0"+
    "\4\5\2\0\10\5\1\0\2\5\1\267\1\270\1\0"+
    "\7\5\1\0\1\5\47\0\1\271\41\0\1\5\6\0"+
    "\1\5\1\0\1\5\1\0\1\67\12\0\4\5\2\0"+
    "\1\272\7\5\1\0\4\5\1\0\7\5\1\0\1\5"+
    "\13\0\1\5\6\0\1\5\1\0\1\5\1\0\1\67"+
    "\12\0\4\5\2\0\4\5\1\273\3\5\1\0\4\5"+
    "\1\0\7\5\1\0\1\5\13\0\1\5\6\0\1\5"+
    "\1\0\1\5\1\0\1\67\12\0\4\5\2\0\7\5"+
    "\1\274\1\0\4\5\1\0\7\5\1\0\1\5\13\0"+
    "\1\5\6\0\1\5\1\0\1\5\1\0\1\67\12\0"+
    "\4\5\2\0\1\5\1\275\6\5\1\0\4\5\1\0"+
    "\7\5\1\0\1\5\13\0\1\5\6\0\1\5\1\0"+
    "\1\5\1\0\1\67\12\0\4\5\2\0\1\5\1\276"+
    "\6\5\1\0\4\5\1\0\7\5\1\0\1\5\32\0"+
    "\1\277\56\0\1\5\6\0\1\5\1\0\1\5\1\0"+
    "\1\67\12\0\4\5\2\0\10\5\1\0\4\5\1\0"+
    "\6\5\1\300\1\0\1\5\13\0\1\5\6\0\1\5"+
    "\1\0\1\5\1\0\1\67\12\0\4\5\2\0\4\5"+
    "\1\301\3\5\1\0\4\5\1\0\7\5\1\0\1\5"+
    "\54\0\1\302\34\0\1\5\6\0\1\5\1\0\1\5"+
    "\1\0\1\67\12\0\4\5\2\0\5\5\1\303\2\5"+
    "\1\0\4\5\1\0\7\5\1\0\1\5\13\0\1\5"+
    "\6\0\1\5\1\0\1\5\1\0\1\67\12\0\4\5"+
    "\2\0\2\5\1\304\5\5\1\0\4\5\1\0\7\5"+
    "\1\0\1\5\13\0\1\5\6\0\1\5\1\0\1\5"+
    "\1\0\1\67\12\0\4\5\2\0\2\5\1\305\5\5"+
    "\1\0\4\5\1\0\7\5\1\0\1\5\13\0\1\5"+
    "\6\0\1\5\1\0\1\5\1\0\1\67\12\0\4\5"+
    "\2\0\10\5\1\0\3\5\1\306\1\0\7\5\1\0"+
    "\1\5\66\0\1\307\22\0\1\5\6\0\1\5\1\0"+
    "\1\5\1\0\1\67\12\0\4\5\2\0\10\5\1\0"+
    "\4\5\1\0\1\5\1\310\5\5\1\0\1\5\13\0"+
    "\1\5\6\0\1\5\1\0\1\5\1\0\1\67\12\0"+
    "\4\5\2\0\10\5\1\311\1\312\3\5\1\0\7\5"+
    "\1\0\1\5\13\0\1\5\6\0\1\5\1\0\1\5"+
    "\1\0\1\67\12\0\4\5\2\0\1\5\1\313\6\5"+
    "\1\0\4\5\1\0\7\5\1\0\1\5\54\0\1\314"+
    "\34\0\1\5\6\0\1\5\1\0\1\5\1\0\1\67"+
    "\12\0\4\5\2\0\5\5\1\315\2\5\1\0\4\5"+
    "\1\0\7\5\1\0\1\5\13\0\1\5\6\0\1\5"+
    "\1\0\1\5\1\0\1\67\12\0\4\5\2\0\4\5"+
    "\1\316\3\5\1\0\4\5\1\0\7\5\1\0\1\5"+
    "\63\0\1\317\25\0\1\5\6\0\1\5\1\0\1\5"+
    "\1\0\1\67\12\0\4\5\2\0\10\5\1\0\3\5"+
    "\1\320\1\0\7\5\1\0\1\5\13\0\1\5\6\0"+
    "\1\5\1\0\1\5\1\0\1\67\12\0\4\5\2\0"+
    "\5\5\1\321\2\5\1\0\4\5\1\0\7\5\1\0"+
    "\1\5\13\0\1\5\6\0\1\5\1\0\1\5\1\0"+
    "\1\67\12\0\4\5\2\0\10\5\1\0\4\5\1\322"+
    "\1\323\6\5\1\0\1\5\13\0\1\5\6\0\1\5"+
    "\1\0\1\5\1\0\1\67\12\0\4\5\2\0\10\5"+
    "\1\0\3\5\1\324\1\0\7\5\1\0\1\5\13\0"+
    "\1\5\6\0\1\5\1\0\1\5\1\0\1\67\12\0"+
    "\4\5\2\0\10\5\1\0\1\5\1\325\2\5\1\0"+
    "\7\5\1\0\1\5\13\0\1\5\6\0\1\5\1\0"+
    "\1\5\1\0\1\67\12\0\4\5\2\0\10\5\1\0"+
    "\4\5\1\0\1\5\1\326\5\5\1\0\1\5\13\0"+
    "\1\5\6\0\1\5\1\0\1\5\1\0\1\67\12\0"+
    "\4\5\2\0\10\5\1\0\4\5\1\327\1\330\6\5"+
    "\1\0\1\5\71\0\1\331\70\0\2\332\74\0\2\333"+
    "\61\0\1\334\37\0\1\5\6\0\1\5\1\0\1\5"+
    "\1\0\1\67\12\0\4\5\2\0\10\5\1\0\4\5"+
    "\1\0\4\5\1\335\2\5\1\0\1\5\13\0\1\5"+
    "\6\0\1\5\1\0\1\5\1\0\1\67\12\0\4\5"+
    "\2\0\10\5\1\0\4\5\1\332\1\336\6\5\1\0"+
    "\1\5\13\0\1\5\6\0\1\5\1\0\1\5\1\0"+
    "\1\67\12\0\4\5\2\0\10\5\1\0\4\5\1\333"+
    "\1\337\6\5\1\0\1\5\13\0\1\5\6\0\1\5"+
    "\1\0\1\5\1\0\1\67\12\0\4\5\2\0\2\5"+
    "\1\340\5\5\1\0\4\5\1\0\7\5\1\0\1\5"+
    "\62\0\1\341\26\0\1\5\6\0\1\5\1\0\1\5"+
    "\1\0\1\67\12\0\4\5\2\0\10\5\1\0\2\5"+
    "\1\342\1\5\1\0\7\5\1\0\1\5\13\0\1\5"+
    "\6\0\1\5\1\0\1\5\1\0\1\67\12\0\4\5"+
    "\2\0\1\5\1\343\6\5\1\0\4\5\1\0\7\5"+
    "\1\0\1\5\13\0\1\5\6\0\1\5\1\0\1\5"+
    "\1\0\1\67\12\0\4\5\2\0\1\5\1\344\6\5"+
    "\1\0\4\5\1\0\7\5\1\0\1\5\53\0\1\345"+
    "\35\0\1\5\6\0\1\5\1\0\1\5\1\0\1\67"+
    "\12\0\4\5\2\0\4\5\1\346\3\5\1\0\4\5"+
    "\1\0\7\5\1\0\1\5\13\0\1\5\6\0\1\5"+
    "\1\0\1\5\1\0\1\67\12\0\4\5\2\0\10\5"+
    "\1\0\4\5\1\347\1\350\6\5\1\0\1\5\13\0"+
    "\1\5\6\0\1\5\1\0\1\5\1\0\1\67\12\0"+
    "\4\5\2\0\3\5\1\351\4\5\1\0\4\5\1\0"+
    "\7\5\1\0\1\5\13\0\1\5\6\0\1\5\1\0"+
    "\1\5\1\0\1\67\12\0\4\5\2\0\2\5\1\352"+
    "\5\5\1\0\4\5\1\0\7\5\1\0\1\5\13\0"+
    "\1\5\6\0\1\5\1\0\1\5\1\0\1\67\12\0"+
    "\4\5\2\0\10\5\1\0\4\5\1\353\1\354\6\5"+
    "\1\0\1\5\13\0\1\5\6\0\1\5\1\0\1\5"+
    "\1\0\1\67\12\0\4\5\2\0\3\5\1\355\4\5"+
    "\1\0\4\5\1\0\7\5\1\0\1\5\13\0\1\5"+
    "\6\0\1\5\1\0\1\5\1\0\1\67\12\0\4\5"+
    "\2\0\5\5\1\356\2\5\1\0\4\5\1\0\7\5"+
    "\1\0\1\5\13\0\1\5\6\0\1\5\1\0\1\5"+
    "\1\0\1\67\12\0\4\5\2\0\10\5\1\0\1\5"+
    "\1\357\2\5\1\0\7\5\1\0\1\5\13\0\1\5"+
    "\6\0\1\5\1\0\1\5\1\0\1\67\12\0\4\5"+
    "\2\0\10\5\1\0\2\5\1\360\1\5\1\0\7\5"+
    "\1\0\1\5\53\0\1\361\35\0\1\5\6\0\1\5"+
    "\1\0\1\5\1\0\1\67\12\0\4\5\2\0\4\5"+
    "\1\362\3\5\1\0\4\5\1\0\7\5\1\0\1\5"+
    "\13\0\1\5\6\0\1\5\1\0\1\5\1\0\1\67"+
    "\12\0\4\5\2\0\10\5\1\0\2\5\1\363\1\364"+
    "\1\0\7\5\1\0\1\5\13\0\1\5\6\0\1\5"+
    "\1\0\1\5\1\0\1\67\12\0\4\5\2\0\2\5"+
    "\1\365\5\5\1\0\4\5\1\0\7\5\1\0\1\5"+
    "\63\0\1\366\25\0\1\5\6\0\1\5\1\0\1\5"+
    "\1\0\1\67\12\0\4\5\2\0\10\5\1\0\3\5"+
    "\1\367\1\0\7\5\1\0\1\5\61\0\1\370\27\0"+
    "\1\5\6\0\1\5\1\0\1\5\1\0\1\67\12\0"+
    "\4\5\2\0\10\5\1\0\1\5\1\371\2\5\1\0"+
    "\7\5\1\0\1\5\13\0\1\5\6\0\1\5\1\0"+
    "\1\5\1\0\1\67\12\0\4\5\2\0\10\5\1\0"+
    "\2\5\1\372\1\5\1\0\7\5\1\0\1\5\13\0"+
    "\1\5\6\0\1\5\1\0\1\5\1\0\1\67\12\0"+
    "\4\5\2\0\4\5\1\373\3\5\1\0\4\5\1\0"+
    "\7\5\1\0\1\5\13\0\1\5\6\0\1\5\1\0"+
    "\1\5\1\0\1\67\12\0\4\5\2\0\10\5\1\0"+
    "\1\5\1\374\2\5\1\0\7\5\1\0\1\5\61\0"+
    "\1\375\27\0\1\5\6\0\1\5\1\0\1\5\1\0"+
    "\1\67\12\0\4\5\2\0\10\5\1\0\1\5\1\376"+
    "\2\5\1\0\7\5\1\0\1\5\64\0\2\377\64\0"+
    "\1\u0100\107\0\1\u0101\71\0\1\u0102\26\0\1\5\6\0"+
    "\1\5\1\0\1\5\1\0\1\67\12\0\4\5\2\0"+
    "\10\5\1\0\4\5\1\377\1\u0103\6\5\1\0\1\5"+
    "\13\0\1\5\6\0\1\5\1\0\1\5\1\0\1\67"+
    "\12\0\4\5\2\0\5\5\1\u0104\2\5\1\0\4\5"+
    "\1\0\7\5\1\0\1\5\13\0\1\5\6\0\1\5"+
    "\1\0\1\5\1\0\1\67\12\0\4\5\2\0\10\5"+
    "\1\0\4\5\1\0\1\5\1\u0105\5\5\1\0\1\5"+
    "\13\0\1\5\6\0\1\5\1\0\1\5\1\0\1\67"+
    "\12\0\4\5\2\0\10\5\1\0\2\5\1\u0106\1\5"+
    "\1\0\7\5\1\0\1\5\51\0\1\u0107\37\0\1\5"+
    "\6\0\1\5\1\0\1\5\1\0\1\67\12\0\4\5"+
    "\2\0\2\5\1\u0108\5\5\1\0\4\5\1\0\7\5"+
    "\1\0\1\5\13\0\1\5\6\0\1\5\1\0\1\5"+
    "\1\0\1\67\12\0\2\5\1\u0109\1\5\2\0\10\5"+
    "\1\0\4\5\1\0\5\5\1\u0109\1\5\1\0\1\5"+
    "\13\0\1\5\6\0\1\5\1\0\1\5\1\0\1\67"+
    "\12\0\4\5\2\0\10\5\1\u010a\1\u010b\3\5\1\0"+
    "\7\5\1\0\1\5\52\0\1\u010c\36\0\1\5\6\0"+
    "\1\5\1\0\1\5\1\0\1\67\12\0\4\5\2\0"+
    "\3\5\1\u010d\4\5\1\0\4\5\1\0\7\5\1\0"+
    "\1\5\63\0\1\u010e\25\0\1\5\6\0\1\5\1\0"+
    "\1\5\1\0\1\67\12\0\4\5\2\0\10\5\1\0"+
    "\3\5\1\u010f\1\0\7\5\1\0\1\5\13\0\1\5"+
    "\6\0\1\5\1\0\1\5\1\0\1\67\12\0\4\5"+
    "\2\0\4\5\1\u0110\3\5\1\0\4\5\1\0\7\5"+
    "\1\0\1\5\44\0\1\u0111\27\0\2\u0111\13\0\1\5"+
    "\6\0\1\5\1\0\1\5\1\0\1\67\12\0\3\5"+
    "\1\u0112\2\0\10\5\1\0\4\5\1\0\7\5\1\u0111"+
    "\1\u0112\13\0\1\5\6\0\1\5\1\0\1\5\1\0"+
    "\1\67\12\0\4\5\2\0\1\5\1\u0113\6\5\1\0"+
    "\4\5\1\0\7\5\1\0\1\5\13\0\1\5\6\0"+
    "\1\5\1\0\1\5\1\0\1\67\12\0\4\5\2\0"+
    "\4\5\1\u0114\3\5\1\0\4\5\1\0\7\5\1\0"+
    "\1\5\13\0\1\5\6\0\1\5\1\0\1\5\1\0"+
    "\1\67\12\0\4\5\2\0\5\5\1\u0115\2\5\1\0"+
    "\4\5\1\0\7\5\1\0\1\5\56\0\1\u0116\32\0"+
    "\1\5\6\0\1\5\1\0\1\5\1\0\1\67\12\0"+
    "\4\5\2\0\7\5\1\u0117\1\0\4\5\1\0\7\5"+
    "\1\0\1\5\13\0\1\5\6\0\1\5\1\0\1\5"+
    "\1\0\1\67\12\0\4\5\2\0\5\5\1\u0118\2\5"+
    "\1\0\4\5\1\0\7\5\1\0\1\5\13\0\1\5"+
    "\6\0\1\5\1\0\1\5\1\0\1\67\12\0\4\5"+
    "\2\0\4\5\1\u0119\3\5\1\0\4\5\1\0\7\5"+
    "\1\0\1\5\13\0\1\5\6\0\1\5\1\0\1\5"+
    "\1\0\1\67\12\0\4\5\2\0\10\5\1\0\4\5"+
    "\1\0\6\5\1\u011a\1\0\1\5\64\0\2\u011b\23\0"+
    "\1\5\6\0\1\5\1\0\1\5\1\0\1\67\12\0"+
    "\4\5\2\0\10\5\1\0\4\5\1\u011b\1\u011c\6\5"+
    "\1\0\1\5\53\0\1\u011d\35\0\1\5\6\0\1\5"+
    "\1\0\1\5\1\0\1\67\12\0\4\5\2\0\4\5"+
    "\1\u011e\3\5\1\0\4\5\1\0\7\5\1\0\1\5"+
    "\13\0\1\5\6\0\1\5\1\0\1\5\1\0\1\67"+
    "\12\0\4\5\2\0\1\5\1\u011f\6\5\1\0\4\5"+
    "\1\0\7\5\1\0\1\5\13\0\1\5\6\0\1\5"+
    "\1\0\1\5\1\0\1\67\12\0\4\5\2\0\4\5"+
    "\1\u0120\3\5\1\0\4\5\1\0\7\5\1\0\1\5"+
    "\71\0\1\u0121\17\0\1\5\6\0\1\5\1\0\1\5"+
    "\1\0\1\67\12\0\4\5\2\0\10\5\1\0\4\5"+
    "\1\0\4\5\1\u0122\2\5\1\0\1\5\51\0\1\u0123"+
    "\110\0\2\u0124\63\0\1\u0125\35\0\1\5\6\0\1\5"+
    "\1\0\1\5\1\0\1\67\12\0\4\5\2\0\2\5"+
    "\1\u0126\5\5\1\0\4\5\1\0\7\5\1\0\1\5"+
    "\13\0\1\5\6\0\1\5\1\0\1\5\1\0\1\67"+
    "\12\0\4\5\2\0\10\5\1\0\4\5\1\u0124\1\u0127"+
    "\6\5\1\0\1\5\13\0\1\5\6\0\1\5\1\0"+
    "\1\5\1\0\1\67\12\0\4\5\2\0\4\5\1\u0128"+
    "\3\5\1\0\4\5\1\0\7\5\1\0\1\5\53\0"+
    "\1\u0129\35\0\1\5\6\0\1\5\1\0\1\5\1\0"+
    "\1\67\12\0\4\5\2\0\4\5\1\u012a\3\5\1\0"+
    "\4\5\1\0\7\5\1\0\1\5\13\0\1\5\6\0"+
    "\1\5\1\0\1\5\1\0\1\67\12\0\4\5\2\0"+
    "\10\5\1\0\4\5\1\u012b\1\u012c\6\5\1\0\1\5"+
    "\53\0\1\u012d\35\0\1\5\6\0\1\5\1\0\1\5"+
    "\1\0\1\67\12\0\4\5\2\0\4\5\1\u012e\3\5"+
    "\1\0\4\5\1\0\7\5\1\0\1\5\54\0\1\u012f"+
    "\34\0\1\5\6\0\1\5\1\0\1\5\1\0\1\67"+
    "\12\0\4\5\2\0\5\5\1\u0130\2\5\1\0\4\5"+
    "\1\0\7\5\1\0\1\5\54\0\1\u0131\34\0\1\5"+
    "\6\0\1\5\1\0\1\5\1\0\1\67\12\0\4\5"+
    "\2\0\5\5\1\u0132\2\5\1\0\4\5\1\0\7\5"+
    "\1\0\1\5\53\0\1\u0133\35\0\1\5\6\0\1\5"+
    "\1\0\1\5\1\0\1\67\12\0\4\5\2\0\4\5"+
    "\1\u0134\3\5\1\0\4\5\1\0\7\5\1\0\1\5"+
    "\13\0\1\5\6\0\1\5\1\0\1\5\1\0\1\67"+
    "\12\0\4\5\2\0\2\5\1\u0135\5\5\1\0\4\5"+
    "\1\0\7\5\1\0\1\5\13\0\1\5\6\0\1\5"+
    "\1\0\1\5\1\0\1\67\12\0\4\5\2\0\2\5"+
    "\1\u0136\5\5\1\0\4\5\1\0\7\5\1\0\1\5"+
    "\13\0\1\5\6\0\1\5\1\0\1\5\1\0\1\67"+
    "\12\0\4\5\2\0\3\5\1\u0137\4\5\1\0\4\5"+
    "\1\0\7\5\1\0\1\5\13\0\1\5\6\0\1\5"+
    "\1\0\1\5\1\0\1\67\12\0\4\5\2\0\3\5"+
    "\1\u0138\4\5\1\0\4\5\1\0\7\5\1\0\1\5"+
    "\13\0\1\5\6\0\1\5\1\0\1\5\1\0\1\67"+
    "\12\0\3\5\1\u0139\2\0\10\5\1\0\4\5\1\0"+
    "\7\5\1\u013a\1\u0139\54\0\1\u013b\34\0\1\5\6\0"+
    "\1\5\1\0\1\5\1\0\1\67\12\0\4\5\2\0"+
    "\5\5\1\u013c\2\5\1\0\4\5\1\0\7\5\1\0"+
    "\1\5\51\0\1\u013d\37\0\1\5\6\0\1\5\1\0"+
    "\1\5\1\0\1\67\12\0\4\5\2\0\2\5\1\u013e"+
    "\5\5\1\0\4\5\1\0\7\5\1\0\1\5\13\0"+
    "\1\5\6\0\1\5\1\0\1\5\1\0\1\67\12\0"+
    "\4\5\2\0\2\5\1\u013f\5\5\1\0\4\5\1\0"+
    "\7\5\1\0\1\5\53\0\1\u0140\35\0\1\5\6\0"+
    "\1\5\1\0\1\5\1\0\1\67\12\0\4\5\2\0"+
    "\4\5\1\u0141\3\5\1\0\4\5\1\0\7\5\1\0"+
    "\1\5\24\0\1\u0142\122\0\1\u0143\75\0\1\u0144\37\0"+
    "\1\5\6\0\1\5\1\0\1\u0145\1\0\1\67\12\0"+
    "\4\5\2\0\10\5\1\0\4\5\1\0\7\5\1\0"+
    "\1\5\13\0\1\5\6\0\1\5\1\0\1\5\1\0"+
    "\1\67\12\0\4\5\2\0\2\5\1\u0146\5\5\1\0"+
    "\4\5\1\0\7\5\1\0\1\5\13\0\1\5\6\0"+
    "\1\5\1\0\1\5\1\0\1\67\12\0\4\5\2\0"+
    "\2\5\1\u0147\5\5\1\0\4\5\1\0\7\5\1\0"+
    "\1\5\57\0\2\u0148\30\0\1\5\6\0\1\5\1\0"+
    "\1\5\1\0\1\67\12\0\4\5\2\0\10\5\1\u0148"+
    "\1\u0149\3\5\1\0\7\5\1\0\1\5\52\0\1\u014a"+
    "\36\0\1\5\6\0\1\5\1\0\1\5\1\0\1\67"+
    "\12\0\4\5\2\0\3\5\1\u014b\4\5\1\0\4\5"+
    "\1\0\7\5\1\0\1\5\51\0\1\u014c\37\0\1\5"+
    "\6\0\1\5\1\0\1\5\1\0\1\67\12\0\4\5"+
    "\2\0\2\5\1\u014d\5\5\1\0\4\5\1\0\7\5"+
    "\1\0\1\5\51\0\1\u014e\37\0\1\5\6\0\1\5"+
    "\1\0\1\5\1\0\1\67\12\0\4\5\2\0\2\5"+
    "\1\u014f\5\5\1\0\4\5\1\0\7\5\1\0\1\5"+
    "\13\0\1\5\6\0\1\5\1\0\1\5\1\0\1\67"+
    "\12\0\4\5\2\0\5\5\1\u0150\2\5\1\0\4\5"+
    "\1\0\7\5\1\0\1\5\13\0\1\5\6\0\1\5"+
    "\1\0\1\5\1\0\1\67\12\0\4\5\2\0\5\5"+
    "\1\u0151\2\5\1\0\4\5\1\0\7\5\1\0\1\5"+
    "\13\0\1\5\6\0\1\5\1\0\1\5\1\0\1\67"+
    "\12\0\4\5\2\0\4\5\1\u0152\3\5\1\0\4\5"+
    "\1\0\7\5\1\0\1\5\61\0\1\u0153\27\0\1\5"+
    "\6\0\1\5\1\0\1\5\1\0\1\67\12\0\4\5"+
    "\2\0\10\5\1\0\1\5\1\u0154\2\5\1\0\7\5"+
    "\1\0\1\5\51\0\1\u0155\37\0\1\5\6\0\1\5"+
    "\1\0\1\5\1\0\1\67\12\0\4\5\2\0\2\5"+
    "\1\u0156\5\5\1\0\4\5\1\0\7\5\1\0\1\5"+
    "\73\0\1\u0157\46\0\1\u0158\27\0\2\u0158\13\0\1\5"+
    "\6\0\1\5\1\0\1\5\1\0\1\67\12\0\4\5"+
    "\2\0\10\5\1\0\4\5\1\0\6\5\1\u0159\1\0"+
    "\1\5\13\0\1\5\6\0\1\5\1\0\1\5\1\0"+
    "\1\67\12\0\3\5\1\u015a\2\0\10\5\1\0\4\5"+
    "\1\0\7\5\1\u0158\1\u015a\54\0\1\u015b\34\0\1\5"+
    "\6\0\1\5\1\0\1\5\1\0\1\67\12\0\4\5"+
    "\2\0\5\5\1\u015c\2\5\1\0\4\5\1\0\7\5"+
    "\1\0\1\5\24\0\1\u015d\64\0\1\5\6\0\1\5"+
    "\1\0\1\u015e\1\0\1\67\12\0\4\5\2\0\10\5"+
    "\1\0\4\5\1\0\7\5\1\0\1\5\44\0\1\u015f"+
    "\27\0\2\u015f\13\0\1\5\6\0\1\5\1\0\1\5"+
    "\1\0\1\67\12\0\3\5\1\u0160\2\0\10\5\1\0"+
    "\4\5\1\0\7\5\1\u015f\1\u0160\55\0\1\u0161\33\0"+
    "\1\5\6\0\1\5\1\0\1\5\1\0\1\67\12\0"+
    "\4\5\2\0\6\5\1\u0162\1\5\1\0\4\5\1\0"+
    "\7\5\1\0\1\5\71\0\1\u0163\17\0\1\5\6\0"+
    "\1\5\1\0\1\5\1\0\1\67\12\0\4\5\2\0"+
    "\10\5\1\0\4\5\1\0\4\5\1\u0164\2\5\1\0"+
    "\1\5\61\0\1\u0165\27\0\1\5\6\0\1\5\1\0"+
    "\1\5\1\0\1\67\12\0\4\5\2\0\10\5\1\0"+
    "\1\5\1\u0166\2\5\1\0\7\5\1\0\1\5\63\0"+
    "\1\u0167\25\0\1\5\6\0\1\5\1\0\1\5\1\0"+
    "\1\67\12\0\4\5\2\0\10\5\1\0\3\5\1\u0168"+
    "\1\0\7\5\1\0\1\5\64\0\2\u0169\23\0\1\5"+
    "\6\0\1\5\1\0\1\5\1\0\1\67\12\0\4\5"+
    "\2\0\10\5\1\0\4\5\1\u0169\1\u016a\6\5\1\0"+
    "\1\5\54\0\1\u016b\34\0\1\5\6\0\1\5\1\0"+
    "\1\5\1\0\1\67\12\0\4\5\2\0\5\5\1\u016c"+
    "\2\5\1\0\4\5\1\0\7\5\1\0\1\5\61\0"+
    "\1\u016d\27\0\1\5\6\0\1\5\1\0\1\5\1\0"+
    "\1\67\12\0\4\5\2\0\10\5\1\0\1\5\1\u016e"+
    "\2\5\1\0\7\5\1\0\1\5\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17422];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\1\11\1\1\2\11\3\1\2\11"+
    "\1\1\2\11\3\1\1\11\23\1\4\11\1\1\1\11"+
    "\1\0\1\11\1\0\1\11\3\0\5\11\2\1\3\11"+
    "\1\0\13\1\1\0\7\1\2\0\2\1\1\0\7\1"+
    "\1\11\2\0\13\1\1\11\3\1\2\0\6\1\1\0"+
    "\3\1\3\0\3\1\1\0\3\1\1\0\5\1\1\11"+
    "\1\0\2\1\1\0\4\1\1\0\3\1\1\0\2\1"+
    "\1\0\1\11\6\1\1\11\3\1\4\0\4\1\1\0"+
    "\4\1\1\0\5\1\1\11\2\1\1\11\4\1\1\0"+
    "\1\1\1\11\2\1\1\11\2\1\1\0\2\1\1\0"+
    "\4\1\1\0\1\1\4\0\4\1\1\0\3\1\1\0"+
    "\1\1\1\0\3\1\1\0\5\1\1\0\4\1\1\0"+
    "\1\1\1\0\4\1\1\0\1\1\1\0\1\11\2\0"+
    "\4\1\1\0\2\1\1\0\1\1\1\0\1\1\1\0"+
    "\2\1\1\0\4\1\1\11\4\1\1\0\1\1\1\0"+
    "\3\1\1\0\1\1\3\0\3\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\11\1\1\1\11\1\1\1\0"+
    "\6\1\1\11\1\0\1\1\1\11\2\1\1\0\1\1"+
    "\1\0\1\1\1\11\3\1\1\11\1\1\1\0\1\1"+
    "\1\11\1\1\1\0\4\1\1\11\1\1\1\11\1\1"+
    "\1\0\1\11\2\1\1\11\1\1\1\0\1\1\1\11"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[366];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
//VARIABLES Y METODOS DEL SCANNER EN JAVA
    private Errores err = Errores.getInstance();
    private void reportarError(int fila, int columna, String descError)
    {
        err.nuevoErrorLexico(fila, columna, descError);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public lexicoGraphik(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 272) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { System.out.println("Error en el token: " + yytext() + "linea: "+ yyline);
                        reportarError((yyline+1), (yycolumn+1), "El token "+ yytext()+" no forma parte del lenguaje");
          }
        case 78: break;
        case 2: 
          { System.out.println("Entro id");
                    return new Symbol(symG.identificador, yyline, yycolumn, new String(yytext()));
          }
        case 79: break;
        case 3: 
          { System.out.println("Entro !");
                    return new Symbol(symG.tkn_not, yyline, yycolumn, new String(yytext()));
          }
        case 80: break;
        case 4: 
          { System.out.println("Entro =");
                    return new Symbol(symG.igual, yyline, yycolumn, new String(yytext()));
          }
        case 81: break;
        case 5: 
          { System.out.println("Entro ?");
                    return new Symbol(symG.int_der, yyline, yycolumn, new String(yytext()));
          }
        case 82: break;
        case 6: 
          { System.out.println("Entro -");
                    return new Symbol(symG.menos, yyline, yycolumn, new String(yytext()));
          }
        case 83: break;
        case 7: 
          { System.out.println("Entro .");
                    return new Symbol(symG.punto, yyline, yycolumn, new String(yytext()));
          }
        case 84: break;
        case 8: 
          { System.out.println("Entro ,");
                    return new Symbol(symG.coma, yyline, yycolumn, new String(yytext()));
          }
        case 85: break;
        case 9: 
          { System.out.println("Entro <");
                    return new Symbol(symG.menor, yyline, yycolumn, new String(yytext()));
          }
        case 86: break;
        case 10: 
          { System.out.println("Entro >");
                    return new Symbol(symG.mayor, yyline, yycolumn, new String(yytext()));
          }
        case 87: break;
        case 11: 
          { 
          }
        case 88: break;
        case 12: 
          { System.out.println("Entro [");
                    return new Symbol(symG.cor_izq, yyline, yycolumn, new String(yytext()));
          }
        case 89: break;
        case 13: 
          { System.out.println("Entro ]");
                    return new Symbol(symG.cor_der, yyline, yycolumn, new String(yytext()));
          }
        case 90: break;
        case 14: 
          { System.out.println("Entro +");
                    return new Symbol(symG.mas, yyline, yycolumn, new String(yytext()));
          }
        case 91: break;
        case 15: 
          { System.out.println("Entro *");
                    return new Symbol(symG.por, yyline, yycolumn, new String(yytext()));
          }
        case 92: break;
        case 16: 
          { System.out.println("Entro *");
                    return new Symbol(symG.potencia, yyline, yycolumn, new String(yytext()));
          }
        case 93: break;
        case 17: 
          { System.out.println("Entro numero");
                    return new Symbol(symG.numero, yyline, yycolumn, new String(yytext()));
          }
        case 94: break;
        case 18: 
          { System.out.println("Entro /");
                    return new Symbol(symG.div, yyline, yycolumn, new String(yytext()));
          }
        case 95: break;
        case 19: 
          { /* Se ignoran */
          }
        case 96: break;
        case 20: 
          { System.out.println("Entro (");
                    return new Symbol(symG.par_izq, yyline, yycolumn, new String(yytext()));
          }
        case 97: break;
        case 21: 
          { System.out.println("Entro )");
                    return new Symbol(symG.par_der, yyline, yycolumn, new String(yytext()));
          }
        case 98: break;
        case 22: 
          { System.out.println("Entro {");
                    return new Symbol(symG.llave_izq, yyline, yycolumn, new String(yytext()));
          }
        case 99: break;
        case 23: 
          { System.out.println("Entro }");
                    return new Symbol(symG.llave_der, yyline, yycolumn, new String(yytext()));
          }
        case 100: break;
        case 24: 
          { System.out.println("Entro :");
                    return new Symbol(symG.dosp, yyline, yycolumn, new String(yytext()));
          }
        case 101: break;
        case 25: 
          { System.out.println("Entro texto");
                    return new Symbol(symG.texto, yyline, yycolumn, new String(yytext()));
          }
        case 102: break;
        case 26: 
          { System.out.println("Entro Caracter");
                    return new Symbol(symG.caracter, yyline, yycolumn, new String(yytext()));
          }
        case 103: break;
        case 27: 
          { System.out.println("Entro !=");
                    return new Symbol(symG.diferente, yyline, yycolumn, new String(yytext()));
          }
        case 104: break;
        case 28: 
          { System.out.println("Entro ==");
                    return new Symbol(symG.igualacion, yyline, yycolumn, new String(yytext()));
          }
        case 105: break;
        case 29: 
          { System.out.println("Entro --");
                    return new Symbol(symG.decremento, yyline, yycolumn, new String(yytext()));
          }
        case 106: break;
        case 30: 
          { System.out.println("Entro <=");
                    return new Symbol(symG.menor_igual, yyline, yycolumn, new String(yytext()));
          }
        case 107: break;
        case 31: 
          { System.out.println("Entro >=");
                    return new Symbol(symG.mayor_igual, yyline, yycolumn, new String(yytext()));
          }
        case 108: break;
        case 32: 
          { System.out.println("Entro ++");
                    return new Symbol(symG.aumento, yyline, yycolumn, new String(yytext()));
          }
        case 109: break;
        case 33: 
          { System.out.println("Entro &&");
                    return new Symbol(symG.tkn_and, yyline, yycolumn, new String(yytext()));
          }
        case 110: break;
        case 34: 
          { System.out.println("Entro &|");
                    return new Symbol(symG.tkn_xor, yyline, yycolumn, new String(yytext()));
          }
        case 111: break;
        case 35: 
          { System.out.println("Entro Si");
                    return new Symbol(symG.tkn_si, yyline, yycolumn, new String(yytext()));
          }
        case 112: break;
        case 36: 
          { System.out.println("Entro ||");
                    return new Symbol(symG.tkn_or, yyline, yycolumn, new String(yytext()));
          }
        case 113: break;
        case 37: 
          { System.out.println("Entro decimal");
                    return new Symbol(symG.decimal, yyline, yycolumn, new String(yytext()));
          }
        case 114: break;
        case 38: 
          { System.out.println("Entro var");
                    return new Symbol(symG.tkn_var, yyline, yycolumn, new String(yytext()));
          }
        case 115: break;
        case 39: 
          { System.out.println("Entro ALS");
                    return new Symbol(symG.tkn_als, yyline, yycolumn, new String(yytext()));
          }
        case 116: break;
        case 40: 
          { System.out.println("Entro nombreArchivo");
                    return new Symbol(symG.nombreArchivo, yyline, yycolumn, new String(yytext()));
          }
        case 117: break;
        case 41: 
          { System.out.println("Entro Sino");
                    return new Symbol(symG.tkn_sino, yyline, yycolumn, new String(yytext()));
          }
        case 118: break;
        case 42: 
          { System.out.println("Entro caso");
                    return new Symbol(symG.tkn_caso, yyline, yycolumn, new String(yytext()));
          }
        case 119: break;
        case 43: 
          { System.out.println("Entro bool");
                    return new Symbol(symG.tkn_bool, yyline, yycolumn, new String(yytext()));
          }
        case 120: break;
        case 44: 
          { System.out.println("Entro Para");
                    return new Symbol(symG.tkn_para, yyline, yycolumn, new String(yytext()));
          }
        case 121: break;
        case 45: 
          { System.out.println("Entro vacio");
                    return new Symbol(symG.tkn_vacio, yyline, yycolumn, new String(yytext()));
          }
        case 122: break;
        case 46: 
          { System.out.println("Entro Datos");
                    return new Symbol(symG.tkn_datos, yyline, yycolumn, new String(yytext()));
          }
        case 123: break;
        case 47: 
          { System.out.println("Entro Donde");
                    return new Symbol(symG.tkn_donde, yyline, yycolumn, new String(yytext()));
          }
        case 124: break;
        case 48: 
          { System.out.println("Entro falso");
                    return new Symbol(symG.tkn_falso, yyline, yycolumn, new String(yytext()));
          }
        case 125: break;
        case 49: 
          { System.out.println("Entro nuevo");
                    return new Symbol(symG.tkn_nuevo, yyline, yycolumn, new String(yytext()));
          }
        case 126: break;
        case 50: 
          { System.out.println("Entro Hacer");
                    return new Symbol(symG.tkn_hacer, yyline, yycolumn, new String(yytext()));
          }
        case 127: break;
        case 51: 
          { System.out.println("Entro entero");
                    return new Symbol(symG.tkn_entero, yyline, yycolumn, new String(yytext()));
          }
        case 128: break;
        case 52: 
          { System.out.println("Entro llamar");
                    return new Symbol(symG.tkn_llamar, yyline, yycolumn, new String(yytext()));
          }
        case 129: break;
        case 53: 
          { System.out.println("Entro cadena");
                    return new Symbol(symG.tkn_cadena, yyline, yycolumn, new String(yytext()));
          }
        case 130: break;
        case 54: 
          { System.out.println("Entro inicio");
                    return new Symbol(symG.tkn_inicio, yyline, yycolumn, new String(yytext()));
          }
        case 131: break;
        case 55: 
          { System.out.println("Entro hereda");
                    return new Symbol(symG.tkn_hereda, yyline, yycolumn, new String(yytext()));
          }
        case 132: break;
        case 56: 
          { System.out.println("Entro Defecto");
                    return new Symbol(symG.tkn_defecto, yyline, yycolumn, new String(yytext()));
          }
        case 133: break;
        case 57: 
          { System.out.println("Entro decimal");
                    return new Symbol(symG.tkn_decimal, yyline, yycolumn, new String(yytext()));
          }
        case 134: break;
        case 58: 
          { System.out.println("Entro Columna");
                    return new Symbol(symG.tkn_columna, yyline, yycolumn, new String(yytext()));
          }
        case 135: break;
        case 59: 
          { System.out.println("Entro privado");
                    return new Symbol(symG.tkn_privado, yyline, yycolumn, new String(yytext()));
          }
        case 136: break;
        case 60: 
          { System.out.println("Entro publico");
                    return new Symbol(symG.tkn_publico, yyline, yycolumn, new String(yytext()));
          }
        case 137: break;
        case 61: 
          { System.out.println("Entro retornar");
                    return new Symbol(symG.tkn_retornar, yyline, yycolumn, new String(yytext()));
          }
        case 138: break;
        case 62: 
          { System.out.println("Entro llamarHK");
                    return new Symbol(symG.tkn_llamarHK, yyline, yycolumn, new String(yytext()));
          }
        case 139: break;
        case 63: 
          { System.out.println("Entro Terminar");
                    return new Symbol(symG.tkn_terminar, yyline, yycolumn, new String(yytext()));
          }
        case 140: break;
        case 64: 
          { System.out.println("Entro caracter");
                    return new Symbol(symG.tkn_caracter, yyline, yycolumn, new String(yytext()));
          }
        case 141: break;
        case 65: 
          { System.out.println("Entro imprimir");
                    return new Symbol(symG.tkn_imprimir, yyline, yycolumn, new String(yytext()));
          }
        case 142: break;
        case 66: 
          { System.out.println("Entro importar");
                    return new Symbol(symG.tkn_importar, yyline, yycolumn, new String(yytext()));
          }
        case 143: break;
        case 67: 
          { System.out.println("Entro Mientras");
                    return new Symbol(symG.tkn_mientras, yyline, yycolumn, new String(yytext()));
          }
        case 144: break;
        case 68: 
          { System.out.println("Entro Procesar");
                    return new Symbol(symG.tkn_procesar, yyline, yycolumn, new String(yytext()));
          }
        case 145: break;
        case 69: 
          { System.out.println("Entro verdadero");
                    return new Symbol(symG.tkn_verdadero, yyline, yycolumn, new String(yytext()));
          }
        case 146: break;
        case 70: 
          { System.out.println("Entro DondeTodo");
                    return new Symbol(symG.tkn_dondetodo, yyline, yycolumn, new String(yytext()));
          }
        case 147: break;
        case 71: 
          { System.out.println("Entro DondeCada");
                    return new Symbol(symG.tkn_dondecada, yyline, yycolumn, new String(yytext()));
          }
        case 148: break;
        case 72: 
          { System.out.println("Entro seleccion");
                    return new Symbol(symG.tkn_seleccion, yyline, yycolumn, new String(yytext()));
          }
        case 149: break;
        case 73: 
          { System.out.println("Entro Continuar");
                    return new Symbol(symG.tkn_continuar, yyline, yycolumn, new String(yytext()));
          }
        case 150: break;
        case 74: 
          { System.out.println("Entro imprimir");
                    return new Symbol(symG.tkn_imprimirK, yyline, yycolumn, new String(yytext()));
          }
        case 151: break;
        case 75: 
          { System.out.println("Entro protegido");
                    return new Symbol(symG.tkn_protegido, yyline, yycolumn, new String(yytext()));
          }
        case 152: break;
        case 76: 
          { System.out.println("Entro incluir_HK");
                    return new Symbol(symG.tkn_incluirHK, yyline, yycolumn, new String(yytext()));
          }
        case 153: break;
        case 77: 
          { System.out.println("Entro graphikar_funcion");
                        return new Symbol(symG.tkn_graphikar, yyline, yycolumn, new String(yytext()));
          }
        case 154: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(symG.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
