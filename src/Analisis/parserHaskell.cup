package Analisis;

import java_cup.runtime.*;
import java.io.*;
import Haskell.*;
import Errores.*;

parser code
{:

    private Errores err = Errores.getInstance();

    public void syntax_error(Symbol token) {
        err.nuevoErrorSintactico((token.left+1),(token.right+1), "Se esperaba "+token.value);
        System.out.println("Error sintactico: linea "+ (token.left+1)+" columna: "+(token.right+1)+" Lexema: "+token.value);

    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        err.nuevoErrorSintactico((s.left+1),(s.right+1), "Se esperaba "+s.value);
        System.out.println("Error sintactico: linea "+ s.left+" columna: "+s.right+" Lexema: "+s.value);

    }  

    public NodoHK nodo;
:}

action code
{:
    
:}

terminal String numero, texto, identificador, decimal;
terminal String tkn_let, tkn_calcular, tkn_succ, tkn_decc, tkn_min, tkn_max, tkn_sum, tkn_product;
terminal String tkn_revers, tkn_impr, tkn_par, tkn_asc, tkn_desc, tkn_length, tkn_end, tkn_if, tkn_else;
terminal String tkn_then, tkn_case;
terminal String par_izq, par_der, llave_izq, llave_der, cor_izq, cor_der, mas, menos, div, potencia, por, mod;
terminal String sqrt, coma, dolar, tkn_or, tkn_and, mayor, menor, mayor_igual, menor_igual, pyc;
terminal String igualacion, diferente, aumento, dadmiracion, igual, dosp, caracter;

non terminal NodoHK INICIO, LST_SEN, SENT, FUNCION, LST_SENTENCIAS, SENTENCIAS;
non terminal NodoHK IF, CASE, LLAMADA_MET, CALCULAR, LISTA, SUCC, DECC, MIN;
non terminal NodoHK MAX, SUM, PRODUCT, REVERS, IMPR, PAR, ASC, DESC, LENGTH;
non terminal NodoHK LST_PAR, LPAR, LST_PARAMETROS, PARAMETROS, LST_CASOS, CASOS;
non terminal NodoHK LST_DIM, DIM, VALOR, MET_NATIVOS, LST_DIMS, DIMS, ASIGNA_LISTA, OPC_LISTA;
non terminal NodoHK CONCAT, LST_CON, CON;
non terminal NodoHK LOGICAS, RELACIONALES, ARITMETICAS, OPERACIONES;
non terminal NodoHK OTRA_DIM, ODIM, BUSCA_LIST, COND, LLAMADAS;

precedence left tkn_or;
precedence left tkn_and;
precedence left igualacion, diferente;
precedence left mayor, menor, mayor_igual, menor_igual;
precedence left mas, menos;
precedence left por, div, mod;
precedence right potencia, sqrt;

start with INICIO;

INICIO ::= LST_SEN:nodo
                {:
                    parser.nodo=nodo;
                :};

LST_SEN ::= LST_SEN:nodo SENT:se
                {:
                    nodo.hijos.add(se);
                    RESULT = nodo;
                :}
          | SENT:se
                {:
                    NodoHK nodo = new NodoHK("LST_FUNCIONES");
                    nodo.hijos.add(se);
                    RESULT = nodo;
                :};

SENT ::= FUNCION:nodo {:RESULT = nodo; :};

FUNCION ::= identificador:id LST_PARAMETROS:pa igual LST_SENTENCIAS:lst tkn_end
                {:
                    NodoHK nodo = new NodoHK("FUNCION");
                    nodo.hijos.add(new NodoHK(id, idleft, idright));
                    nodo.hijos.add(pa);
                    nodo.hijos.add(lst);
                    RESULT = nodo;
                :}
           |identificador:id igual LST_SENTENCIAS:lst tkn_end
                {:
                    NodoHK nodo = new NodoHK("FUNCION");
                    nodo.hijos.add(new NodoHK(id, idleft, idright));
                    nodo.hijos.add(new NodoHK("sinparametros"));
                    nodo.hijos.add(lst);
                    RESULT = nodo;
                :};

LST_PARAMETROS ::= LST_PARAMETROS:nodo coma PARAMETROS:pa
                        {:
                            nodo.hijos.add(pa);
                            RESULT = nodo;
                        :}
                  |PARAMETROS:pa
                        {:
                            NodoHK nodo = new NodoHK("PARAMETROS");
                            nodo.hijos.add(pa);
                            RESULT = nodo;
                        :};

PARAMETROS ::= identificador:id
                    {:
                        NodoHK nodo = new NodoHK(id, idleft, idright);
                        RESULT = nodo;
                    :};

LST_SENTENCIAS ::= LST_SENTENCIAS:nodo SENTENCIAS:se
                    {:
                        nodo.hijos.add(se);
                        RESULT = nodo;
                    :}
                  |SENTENCIAS:se
                    {:
                        NodoHK nodo = new NodoHK("SENTENCIAS");
                        nodo.hijos.add(se);
                        RESULT = nodo;
                    :};

SENTENCIAS ::= IF:nodo {: RESULT = nodo; :}
              |CASE:nodo {: RESULT = nodo; :}
              |LLAMADA_MET:nodo {: RESULT = nodo; :}
              |LISTA:nodo {: RESULT = nodo; :}
              |MET_NATIVOS:nodo {: RESULT = nodo; :}
              |CALCULAR:nodo {: RESULT = nodo; :}
              |BUSCA_LIST:nodo {: RESULT = nodo; :};

IF ::= tkn_if COND:lo tkn_then LST_SENTENCIAS:lst tkn_else LST_SENTENCIAS:lst2 tkn_end
                {:
                    NodoHK nodo = new NodoHK("SINO");
                    NodoHK si = new NodoHK("SI");
                    si.hijos.add(lo);
                    si.hijos.add(lst);
                    nodo.hijos.add(si);
                    nodo.hijos.add(lst2);
                    RESULT = nodo;
                :};

CASE ::= tkn_case ARITMETICAS:lo LST_CASOS:lst tkn_end
                {:
                    NodoHK nodo = new NodoHK("NCASE");
                    nodo.hijos.add(lo);
                    nodo.hijos.add(lst);
                    RESULT = nodo;
                :};

LST_CASOS ::= LST_CASOS:nodo CASOS:ca
                {:
                    nodo.hijos.add(ca);
                    RESULT = nodo;
                :}
             |CASOS:ca
                {:
                    NodoHK nodo = new NodoHK("LST_CASOS");
                    nodo.hijos.add(ca);
                    RESULT = nodo;
                :};

CASOS ::= VALOR:val dosp LST_SENTENCIAS:lst pyc
            {:
                NodoHK nodo = new NodoHK("CASO");
                nodo.hijos.add(val);
                nodo.hijos.add(lst);
                RESULT = nodo;
            :};

VALOR::= numero:num
            {:
                NodoHK nodo = new NodoHK("entero");
                nodo.hijos.add(new NodoHK(num, numleft, numright));
                RESULT = nodo;
            :}
        |decimal:dec
            {:
                NodoHK nodo = new NodoHK("decimal");
                nodo.hijos.add(new NodoHK(dec, decleft, decright));
                RESULT = nodo;
            :}
        |caracter:car
            {:
                NodoHK nodo = new NodoHK("caracter");
                nodo.hijos.add(new NodoHK(car, carleft, carright));
                RESULT = nodo;
            :};

LLAMADA_MET ::= dolar identificador:id llave_izq LST_PAR:param llave_der dolar
                {:
                    NodoHK nodo = new NodoHK("LLAMADA_MET");
                    nodo.hijos.add(new NodoHK(id, idleft, idright));
                    nodo.hijos.add(param);
                    RESULT = nodo;
                :}
              | dolar identificador:id llave_izq llave_der dolar
                {:
                    NodoHK nodo = new NodoHK("LLAMADA_MET");
                    nodo.hijos.add(new NodoHK(id, idleft, idright));
                    RESULT = nodo;
                :};

LST_PAR ::= LST_PAR:nodo coma LPAR:pa
                {:
                    nodo.hijos.add(pa);
                    RESULT = nodo;
                :}
           |LPAR:pa
                {:
                    NodoHK nodo = new NodoHK("PARAMETROS");
                    nodo.hijos.add(pa);
                    RESULT = nodo;
                :};

LPAR ::= ARITMETICAS:nodo {: RESULT = nodo; :}
       | cor_izq LST_DIMS:di cor_der
                {:
                    NodoHK nodo = new NodoHK("lista");
                    nodo.hijos.add(di);
                    RESULT = nodo;
                :}
       | MET_NATIVOS:na
                {:
                    RESULT = na;
                :};

MET_NATIVOS ::= SUCC:nodo {: RESULT = nodo; :}
               |DECC:nodo {: RESULT = nodo; :}
               |MIN:nodo {: RESULT = nodo; :}
               |MAX:nodo {: RESULT = nodo; :}
               |SUM:nodo {: RESULT = nodo; :}
               |PRODUCT:nodo {: RESULT = nodo; :}
               |REVERS:nodo {: RESULT = nodo; :}
               |IMPR:nodo {: RESULT = nodo; :}
               |PAR:nodo {: RESULT = nodo; :}
               |DESC:nodo {: RESULT = nodo; :}
               |ASC:nodo {: RESULT = nodo; :}
               |LENGTH:nodo {: RESULT = nodo; :}
               |CONCAT:nodo {: RESULT = nodo; :};


LISTA ::= tkn_let identificador:id igual ASIGNA_LISTA:asg
                    {:
                        NodoHK nodo = new NodoHK("DECLARA_ASIGNA_LISTA");
                        nodo.hijos.add(new NodoHK(id, idleft, idright));
                        nodo.hijos.add(asg);
                        RESULT = nodo;
                    :}
         |tkn_let identificador:id igual LLAMADAS:asg
                    {:
                        NodoHK nodo = new NodoHK("DECLARA_ASIGNA_LISTA");
                        nodo.hijos.add(new NodoHK(id, idleft, idright));
                        nodo.hijos.add(asg);
                        RESULT = nodo;
                    :};

ASIGNA_LISTA ::= cor_izq LST_DIMS:di cor_der
                    {:
                        NodoHK nodo = new NodoHK("lista");
                        nodo.hijos.add(di);
                        RESULT = nodo;
                    :}
                |texto:cad
                    {:
                        NodoHK nodo = new NodoHK("cadena");
                        nodo.hijos.add(new NodoHK(cad, cadleft, cadright));
                        RESULT = nodo;
                    :}
                |identificador:id
                    {:
                        NodoHK nodo = new NodoHK("identificador");
                        nodo.hijos.add(new NodoHK(id, idleft, idright));
                        RESULT = nodo;
                    :};

LLAMADAS ::= LLAMADA_MET:me
                {:
                    RESULT = me;
                :}
            |MET_NATIVOS:na
                {:
                    RESULT = na;
                :};

LST_DIMS ::= LST_DIMS:nodo coma DIMS:di
                {:
                    nodo.hijos.add(di);
                    RESULT = nodo;
                :}
            |DIMS:di
                {:
                    NodoHK nodo = new NodoHK("DIMENSIONES");
                    nodo.hijos.add(di);
                    RESULT = nodo;
                :};

DIMS ::= ARITMETICAS:nodo
                {:
                    RESULT = nodo;
                :}
        |caracter:car
                {:
                    NodoHK nodo = new NodoHK("caracter");
                    nodo.hijos.add(new NodoHK(car, carleft, carright));
                    RESULT = nodo;
                :}
        |cor_izq OTRA_DIM:di cor_der
                {:
                    RESULT = di;
                :};

OTRA_DIM ::= OTRA_DIM:nodo coma ODIM:di
                {:
                    nodo.hijos.add(di);
                    RESULT = nodo;
                :}
            |ODIM:di
                {:
                    NodoHK nodo = new NodoHK("DIMENSIONES");
                    nodo.hijos.add(di);
                    RESULT = nodo;
                :};

ODIM ::= ARITMETICAS:nodo
                {:
                    RESULT = nodo;
                :}
        |caracter:car 
                {:
                    NodoHK nodo = new NodoHK("caracter");
                    nodo.hijos.add(new NodoHK(car, carleft, carright));
                    RESULT = nodo;
                :}
        |MET_NATIVOS:na
                {:
                    RESULT = na;
                :};

SUCC ::= dolar tkn_succ ARITMETICAS:opc dolar
                {:
                    NodoHK nodo = new NodoHK("SUCC");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                :}
        |dolar tkn_succ MET_NATIVOS:opc dolar
                {:
                    NodoHK nodo = new NodoHK("SUCC");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                :};

DECC ::= dolar tkn_decc ARITMETICAS:opc dolar
                {:
                    NodoHK nodo = new NodoHK("DECC");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                :}
        |dolar tkn_decc MET_NATIVOS:opc dolar
                {:
                    NodoHK nodo = new NodoHK("DECC");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                :};

OPC_LISTA ::= ASIGNA_LISTA:asg
                {:
                    RESULT = asg;
                :};

MIN ::= dolar tkn_min OPC_LISTA:opc dolar
                {:
                    NodoHK nodo = new NodoHK("MIN");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                :}
       |dolar tkn_min MET_NATIVOS:opc dolar
                {:
                    NodoHK nodo = new NodoHK("MIN");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                :};

MAX ::= dolar tkn_max OPC_LISTA:opc dolar
                {:
                    NodoHK nodo = new NodoHK("MAX");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                :}
       |dolar tkn_max MET_NATIVOS:opc dolar
                {:
                    NodoHK nodo = new NodoHK("MAX");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                :};

SUM ::= dolar tkn_sum OPC_LISTA:opc dolar
                {:
                    NodoHK nodo = new NodoHK("SUM");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                :}
       |dolar tkn_sum MET_NATIVOS:opc dolar
                {:
                    NodoHK nodo = new NodoHK("SUM");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                :};

PRODUCT ::= dolar tkn_product OPC_LISTA:opc dolar
                {:
                    NodoHK nodo = new NodoHK("PRODUCT");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                :}
           |dolar tkn_product MET_NATIVOS:opc dolar
                {:
                    NodoHK nodo = new NodoHK("PRODUCT");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                :};

REVERS ::= dolar tkn_revers OPC_LISTA:opc dolar
                {:
                    NodoHK nodo = new NodoHK("REVERS");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                :}
          |dolar tkn_revers MET_NATIVOS:opc dolar
                {:
                    NodoHK nodo = new NodoHK("REVERS");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                :};

IMPR ::= dolar tkn_impr OPC_LISTA:opc dolar
                {:
                    NodoHK nodo = new NodoHK("IMPR");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                :}

        |dolar tkn_impr MET_NATIVOS:opc dolar
                {:
                    NodoHK nodo = new NodoHK("IMPR");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                :};

PAR ::= dolar tkn_par OPC_LISTA:opc dolar
                {:
                    NodoHK nodo = new NodoHK("PAR");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                :}
       |dolar tkn_par MET_NATIVOS:opc dolar
                {:
                    NodoHK nodo = new NodoHK("PAR");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                :};

ASC ::= dolar tkn_asc OPC_LISTA:opc dolar
                {:
                    NodoHK nodo = new NodoHK("ASC");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                :}
        |dolar tkn_asc MET_NATIVOS:opc dolar
                {:
                    NodoHK nodo = new NodoHK("ASC");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                :};

DESC ::= dolar tkn_desc OPC_LISTA:opc dolar
                {:
                    NodoHK nodo = new NodoHK("DESC");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                :}
        |dolar tkn_desc MET_NATIVOS:opc dolar
                {:
                    NodoHK nodo = new NodoHK("DESC");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                :};

LENGTH ::= dolar tkn_length OPC_LISTA:opc dolar
                {:
                    NodoHK nodo = new NodoHK("LENGTH");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                :}
          |dolar tkn_length MET_NATIVOS:opc dolar
                {:
                    NodoHK nodo = new NodoHK("LENGTH");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                :};

CONCAT ::= ASIGNA_LISTA:as1 LST_CON:as2
                {:
                    NodoHK nodo = new NodoHK("CONCAT");
                    nodo.hijos.add(as1);
                    nodo.hijos.add(as2);
                    RESULT = nodo;
                :};

LST_CON ::= LST_CON:nodo CON:co
                {:
                    nodo.hijos.add(co);
                    RESULT = nodo;
                :}
          | CON:co
                {:
                    NodoHK nodo = new NodoHK("LST_CONCAT");
                    nodo.hijos.add(co);
                    RESULT = nodo;
                :};

CON ::= aumento ASIGNA_LISTA:as
            {:
                RESULT = as;
            :};

BUSCA_LIST ::= identificador:id LST_DIM:dime
                {:
                    NodoHK nodo = new NodoHK("INDICE");
                    NodoHK iden = new NodoHK("identificador");
                    iden.hijos.add(new NodoHK(id, idleft, idright));
                    nodo.hijos.add(iden);
                    nodo.hijos.add(dime);
                    RESULT = nodo;
                :};

LST_DIM ::= LST_DIM:nodo DIM:di
                {:
                    nodo.hijos.add(di);
                    RESULT = nodo;
                :}
           |DIM:di
                {:
                    NodoHK nodo = new NodoHK("DIMENSIONES");
                    nodo.hijos.add(di);
                    RESULT = nodo;
                :};

DIM ::= dadmiracion CALCULAR:nodo
            {:
                RESULT = nodo;
            :}
       |dadmiracion LLAMADAS:nodo
            {:
                RESULT = nodo;
           :}
       |dadmiracion identificador:id
            {:
                NodoHK nodo = new NodoHK("identificador");
                nodo.hijos.add(new NodoHK(id, idleft, idright));
                RESULT = nodo;
            :};

COND ::= LOGICAS:log {:RESULT = log;:};

LOGICAS ::= LOGICAS:log1 tkn_or LOGICAS:log2
                {:
                    NodoHK nodo = new NodoHK("or");
                    nodo.hijos.add(log1);
                    nodo.hijos.add(log2);
                    RESULT = nodo;
                :}
          | LOGICAS:log1 tkn_and LOGICAS:log2
                {:
                    NodoHK nodo = new NodoHK("and");
                    nodo.hijos.add(log1);
                    nodo.hijos.add(log2);
                    RESULT = nodo;
                :}
          | RELACIONALES:nodo
                {:
                    RESULT = nodo;
                :};

RELACIONALES ::= RELACIONALES:re1 igualacion RELACIONALES:re2
                    {:
                        NodoHK nodo = new NodoHK("igualacion");
                        nodo.hijos.add(re1);
                        nodo.hijos.add(re2);
                        RESULT = nodo;
                    :}
                |RELACIONALES:re1 diferente RELACIONALES:re2
                    {:
                        NodoHK nodo = new NodoHK("diferente");
                        nodo.hijos.add(re1);
                        nodo.hijos.add(re2);
                        RESULT = nodo;
                    :}
                |RELACIONALES:re1 mayor RELACIONALES:re2
                    {:
                        NodoHK nodo = new NodoHK("mayor");
                        nodo.hijos.add(re1);
                        nodo.hijos.add(re2);
                        RESULT = nodo;
                    :}
                |RELACIONALES:re1 menor RELACIONALES:re2
                    {:
                        NodoHK nodo = new NodoHK("menor");
                        nodo.hijos.add(re1);
                        nodo.hijos.add(re2);
                        RESULT = nodo;
                    :}
                |RELACIONALES:re1 mayor_igual RELACIONALES:re2
                    {:
                        NodoHK nodo = new NodoHK("mayorI");
                        nodo.hijos.add(re1);
                        nodo.hijos.add(re2);
                        RESULT = nodo;
                    :}
                |RELACIONALES:re1 menor_igual RELACIONALES:re2
                    {:
                        NodoHK nodo = new NodoHK("menorI");
                        nodo.hijos.add(re1);
                        nodo.hijos.add(re2);
                        RESULT = nodo;
                    :}
                |cor_izq LST_DIMS:di cor_der
                    {:
                        RESULT = di;
                    :}
                |ARITMETICAS:nodo
                    {:
                        RESULT = nodo;
                    :};

ARITMETICAS ::= CALCULAR:nodo
                    {:
                        RESULT = nodo;
                    :}
              | identificador:id
                    {:
                        NodoHK nodo = new NodoHK("identificador");
                        nodo.hijos.add(new NodoHK(id, idleft, idright));
                        RESULT = nodo;
                    :}
              | BUSCA_LIST:nodo
                    {:
                        RESULT = nodo;
                    :}
              | texto:tex
                    {:
                        NodoHK nodo = new NodoHK("cadena");
                        nodo.hijos.add(new NodoHK(tex));
                        RESULT = nodo;
                    :}
              
              | par_izq COND:log par_der
                    {:
                        RESULT = log;
                    :}
              
              | LLAMADA_MET:nodo
                    {:
                        RESULT = nodo;
                    :};


CALCULAR ::= dolar tkn_calcular OPERACIONES:op dolar
                    {:
                        NodoHK nodo = new NodoHK("CALCULAR");
                        nodo.hijos.add(op);
                        RESULT = nodo;
                    :};

OPERACIONES ::= OPERACIONES:op1 mas OPERACIONES:op2
                    {:
                        NodoHK nodo = new NodoHK("mas");
                        nodo.hijos.add(op1);
                        nodo.hijos.add(op2);
                        RESULT = nodo;
                    :}
               |OPERACIONES:op1 menos OPERACIONES:op2
                    {:
                        NodoHK nodo = new NodoHK("menos");
                        nodo.hijos.add(op1);
                        nodo.hijos.add(op2);
                        RESULT = nodo;
                    :}
               |OPERACIONES:op1 por OPERACIONES:op2
                    {:
                        NodoHK nodo = new NodoHK("por");
                        nodo.hijos.add(op1);
                        nodo.hijos.add(op2);
                        RESULT = nodo;
                    :}
               |OPERACIONES:op1 div OPERACIONES:op2
                    {:
                        NodoHK nodo = new NodoHK("div");
                        nodo.hijos.add(op1);
                        nodo.hijos.add(op2);
                        RESULT = nodo;
                    :}
               |OPERACIONES:op1 mod OPERACIONES:op2
                    {:
                        NodoHK nodo = new NodoHK("mod");
                        nodo.hijos.add(op1);
                        nodo.hijos.add(op2);
                        RESULT = nodo;
                    :}
               |OPERACIONES:op1 potencia OPERACIONES:op2
                    {:
                        NodoHK nodo = new NodoHK("potencia");
                        nodo.hijos.add(op1);
                        nodo.hijos.add(op2);
                        RESULT = nodo;
                    :}
               |OPERACIONES:op1 sqrt OPERACIONES:op2
                    {:
                        NodoHK nodo = new NodoHK("sqrt");
                        nodo.hijos.add(op1);
                        nodo.hijos.add(op2);
                        RESULT = nodo;
                    :}
               |menos OPERACIONES:op
                    {:
                        NodoHK nodo = new NodoHK("menos");
                        nodo.hijos.add(op);
                        RESULT = nodo;
                    :}
               |numero:num
                    {:
                        NodoHK nodo = new NodoHK("entero");
                        nodo.hijos.add(new NodoHK(num, numleft, numright));
                        RESULT = nodo;
                    :}
               |decimal:dec
                    {:
                        NodoHK nodo = new NodoHK("decimal");
                        nodo.hijos.add(new NodoHK(dec, decleft, decright));
                        RESULT = nodo;
                    :}
               |identificador:id
                    {:
                        NodoHK nodo = new NodoHK("identificador");
                        nodo.hijos.add(new NodoHK(id, idleft, idright));
                        RESULT = nodo;
                    :}
               |par_izq OPERACIONES:nodo par_der
                    {:
                        RESULT = nodo;
                    :}
               |LLAMADA_MET:nodo
                    {:
                        RESULT = nodo;
                    :}
               |MET_NATIVOS:nodo
                    {:
                        RESULT = nodo;
                    :}
               |BUSCA_LIST:nodo
                    {:
                        RESULT = nodo;
                    :}
               |CALCULAR:nodo {: RESULT = nodo; :};
