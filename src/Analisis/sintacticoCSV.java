
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Mar 29 09:17:57 CST 2017
//----------------------------------------------------

package Analisis;

import java_cup.runtime.*;
import java.io.*;
import Graphik.*;
import Errores.*;
import Logica.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Mar 29 09:17:57 CST 2017
  */
public class sintacticoCSV extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public sintacticoCSV() {super();}

  /** Constructor which sets the default scanner. */
  public sintacticoCSV(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintacticoCSV(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\015\000\002\002\004\000\002\004\006\000\002\005" +
    "\005\000\002\005\003\000\002\007\005\000\002\006\005" +
    "\000\002\006\003\000\002\010\005\000\002\010\003\000" +
    "\002\002\005\000\002\003\003\000\002\003\003\000\002" +
    "\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\030\000\004\007\004\001\002\000\004\005\031\001" +
    "\002\000\006\013\ufffe\015\ufffe\001\002\000\006\013\012" +
    "\015\011\001\002\000\004\002\010\001\002\000\004\002" +
    "\001\001\002\000\004\011\015\001\002\000\004\007\004" +
    "\001\002\000\006\013\uffff\015\uffff\001\002\000\004\015" +
    "\027\001\002\000\010\004\023\005\022\006\024\001\002" +
    "\000\006\013\ufff9\015\ufff9\001\002\000\006\013\020\015" +
    "\ufffb\001\002\000\004\011\015\001\002\000\006\013\ufffa" +
    "\015\ufffa\001\002\000\004\012\ufff7\001\002\000\004\012" +
    "\ufff6\001\002\000\004\012\ufff5\001\002\000\004\012\026" +
    "\001\002\000\006\013\ufff8\015\ufff8\001\002\000\006\002" +
    "\000\011\015\001\002\000\006\013\020\015\ufffc\001\002" +
    "\000\004\010\032\001\002\000\006\013\ufffd\015\ufffd\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\030\000\010\004\006\005\005\007\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\015\006\013\010" +
    "\016\001\001\000\004\007\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\002\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\002\015" +
    "\010\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintacticoCSV$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintacticoCSV$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintacticoCSV$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private Errores err = Errores.getInstance();

    public void syntax_error(Symbol token) {
        err.nuevoErrorSintactico((token.left+1),(token.right+1), "Se esperaba "+token.value);
        System.out.println("Error sintactico: linea "+ (token.left+1)+" columna: "+(token.right+1)+" Lexema: "+token.value);

    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        err.nuevoErrorSintactico((s.left+1),(s.right+1), "Se esperaba "+s.value);
        System.out.println("Error sintactico: linea "+ s.left+" columna: "+s.right+" Lexema: "+s.value);

    }  


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$sintacticoCSV$actions {


    CargarCSV cargar = CargarCSV.getInstance();
    int contColumna=0;
    int contFila=0;
    int contHeaders=0;
    Object fila[];

  private final sintacticoCSV parser;

  /** Constructor */
  CUP$sintacticoCSV$actions(sintacticoCSV parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$sintacticoCSV$do_action(
    int                        CUP$sintacticoCSV$act_num,
    java_cup.runtime.lr_parser CUP$sintacticoCSV$parser,
    java.util.Stack            CUP$sintacticoCSV$stack,
    int                        CUP$sintacticoCSV$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintacticoCSV$result;

      /* select the action based on the action number */
      switch (CUP$sintacticoCSV$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EXP ::= decimal 
            {
              Resultado RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$sintacticoCSV$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$sintacticoCSV$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$sintacticoCSV$stack.peek()).value;
		
                double resultado = Double.valueOf(dec);
                RESULT = new Resultado("decimal", resultado);
            
              CUP$sintacticoCSV$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$sintacticoCSV$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoCSV$stack.peek()), RESULT);
            }
          return CUP$sintacticoCSV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EXP ::= numero 
            {
              Resultado RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$sintacticoCSV$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$sintacticoCSV$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$sintacticoCSV$stack.peek()).value;
		
                int resultado = Integer.valueOf(num);
                RESULT = new Resultado("entero", resultado);
            
              CUP$sintacticoCSV$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$sintacticoCSV$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoCSV$stack.peek()), RESULT);
            }
          return CUP$sintacticoCSV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // EXP ::= texto 
            {
              Resultado RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$sintacticoCSV$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$sintacticoCSV$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$sintacticoCSV$stack.peek()).value;
		
                text=text.replace("\"","");
                RESULT = new Resultado("cadena", text);
            
              CUP$sintacticoCSV$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$sintacticoCSV$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoCSV$stack.peek()), RESULT);
            }
          return CUP$sintacticoCSV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DATO ::= llave_izq EXP llave_der 
            {
              Resultado RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$sintacticoCSV$stack.elementAt(CUP$sintacticoCSV$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$sintacticoCSV$stack.elementAt(CUP$sintacticoCSV$top-1)).right;
		Resultado ex = (Resultado)((java_cup.runtime.Symbol) CUP$sintacticoCSV$stack.elementAt(CUP$sintacticoCSV$top-1)).value;
		 RESULT = ex; 
              CUP$sintacticoCSV$result = parser.getSymbolFactory().newSymbol("DATO",0, ((java_cup.runtime.Symbol)CUP$sintacticoCSV$stack.elementAt(CUP$sintacticoCSV$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoCSV$stack.peek()), RESULT);
            }
          return CUP$sintacticoCSV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LST_DATO ::= DATO 
            {
              String RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$sintacticoCSV$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$sintacticoCSV$stack.peek()).right;
		Resultado da = (Resultado)((java_cup.runtime.Symbol) CUP$sintacticoCSV$stack.peek()).value;
		
                    contFila=0;
                    fila = new Object[contHeaders];
                    fila[contFila]=da;
                    contFila++;
                
              CUP$sintacticoCSV$result = parser.getSymbolFactory().newSymbol("LST_DATO",6, ((java_cup.runtime.Symbol)CUP$sintacticoCSV$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoCSV$stack.peek()), RESULT);
            }
          return CUP$sintacticoCSV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LST_DATO ::= LST_DATO coma DATO 
            {
              String RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$sintacticoCSV$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$sintacticoCSV$stack.peek()).right;
		Resultado da = (Resultado)((java_cup.runtime.Symbol) CUP$sintacticoCSV$stack.peek()).value;
		
                    fila[contFila] = da;
                    contFila++;
                
              CUP$sintacticoCSV$result = parser.getSymbolFactory().newSymbol("LST_DATO",6, ((java_cup.runtime.Symbol)CUP$sintacticoCSV$stack.elementAt(CUP$sintacticoCSV$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoCSV$stack.peek()), RESULT);
            }
          return CUP$sintacticoCSV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LST_LISTAS ::= LST_DATO 
            {
              String RESULT =null;
		
                    CargarCSV.modelo.addRow(fila);
                
              CUP$sintacticoCSV$result = parser.getSymbolFactory().newSymbol("LST_LISTAS",4, ((java_cup.runtime.Symbol)CUP$sintacticoCSV$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoCSV$stack.peek()), RESULT);
            }
          return CUP$sintacticoCSV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LST_LISTAS ::= LST_LISTAS finCadena LST_DATO 
            {
              String RESULT =null;
		
                    CargarCSV.modelo.addRow(fila);
                
              CUP$sintacticoCSV$result = parser.getSymbolFactory().newSymbol("LST_LISTAS",4, ((java_cup.runtime.Symbol)CUP$sintacticoCSV$stack.elementAt(CUP$sintacticoCSV$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoCSV$stack.peek()), RESULT);
            }
          return CUP$sintacticoCSV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // HEADER ::= cor_izq texto cor_der 
            {
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$sintacticoCSV$stack.elementAt(CUP$sintacticoCSV$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$sintacticoCSV$stack.elementAt(CUP$sintacticoCSV$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$sintacticoCSV$stack.elementAt(CUP$sintacticoCSV$top-1)).value;
		
                    RESULT = name;
                
              CUP$sintacticoCSV$result = parser.getSymbolFactory().newSymbol("HEADER",5, ((java_cup.runtime.Symbol)CUP$sintacticoCSV$stack.elementAt(CUP$sintacticoCSV$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoCSV$stack.peek()), RESULT);
            }
          return CUP$sintacticoCSV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LST_HEADER ::= HEADER 
            {
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$sintacticoCSV$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$sintacticoCSV$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$sintacticoCSV$stack.peek()).value;
		
                    contHeaders++;
                    name=name.replace("\"","");
                    CargarCSV.modelo.addColumn(name);
                
              CUP$sintacticoCSV$result = parser.getSymbolFactory().newSymbol("LST_HEADER",3, ((java_cup.runtime.Symbol)CUP$sintacticoCSV$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoCSV$stack.peek()), RESULT);
            }
          return CUP$sintacticoCSV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LST_HEADER ::= LST_HEADER coma HEADER 
            {
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$sintacticoCSV$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$sintacticoCSV$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$sintacticoCSV$stack.peek()).value;
		
                    contHeaders++;
                    name=name.replace("\"","");
                    CargarCSV.modelo.addColumn(name);
                
              CUP$sintacticoCSV$result = parser.getSymbolFactory().newSymbol("LST_HEADER",3, ((java_cup.runtime.Symbol)CUP$sintacticoCSV$stack.elementAt(CUP$sintacticoCSV$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoCSV$stack.peek()), RESULT);
            }
          return CUP$sintacticoCSV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LST_HEADER finCadena LST_LISTAS finCadena 
            {
              String RESULT =null;

              CUP$sintacticoCSV$result = parser.getSymbolFactory().newSymbol("INICIO",2, ((java_cup.runtime.Symbol)CUP$sintacticoCSV$stack.elementAt(CUP$sintacticoCSV$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoCSV$stack.peek()), RESULT);
            }
          return CUP$sintacticoCSV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintacticoCSV$stack.elementAt(CUP$sintacticoCSV$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintacticoCSV$stack.elementAt(CUP$sintacticoCSV$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$sintacticoCSV$stack.elementAt(CUP$sintacticoCSV$top-1)).value;
		RESULT = start_val;
              CUP$sintacticoCSV$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintacticoCSV$stack.elementAt(CUP$sintacticoCSV$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoCSV$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintacticoCSV$parser.done_parsing();
          return CUP$sintacticoCSV$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

