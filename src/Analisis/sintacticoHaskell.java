
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Mar 17 21:28:04 CST 2017
//----------------------------------------------------

package Analisis;

import java_cup.runtime.*;
import java.io.*;
import Haskell.*;
import Errores.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Mar 17 21:28:04 CST 2017
  */
public class sintacticoHaskell extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public sintacticoHaskell() {super();}

  /** Constructor which sets the default scanner. */
  public sintacticoHaskell(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintacticoHaskell(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\221\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\005\007" +
    "\000\002\005\006\000\002\033\005\000\002\033\003\000" +
    "\002\034\003\000\002\006\004\000\002\006\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\010\011\000\002\011\006\000\002\035\004\000" +
    "\002\035\003\000\002\036\006\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\012\010\000\002\012" +
    "\007\000\002\031\005\000\002\031\003\000\002\032\003" +
    "\000\002\032\005\000\002\032\003\000\002\042\003\000" +
    "\002\042\003\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\042\003\000\002\042\003" +
    "\000\002\042\003\000\002\042\003\000\002\014\006\000" +
    "\002\014\006\000\002\014\006\000\002\045\005\000\002" +
    "\045\003\000\002\045\003\000\002\062\003\000\002\062" +
    "\003\000\002\043\005\000\002\043\003\000\002\044\003" +
    "\000\002\044\003\000\002\044\005\000\002\056\005\000" +
    "\002\056\003\000\002\057\003\000\002\057\003\000\002" +
    "\057\003\000\002\015\006\000\002\015\006\000\002\016" +
    "\006\000\002\016\006\000\002\046\003\000\002\017\006" +
    "\000\002\017\006\000\002\017\006\000\002\020\006\000" +
    "\002\020\006\000\002\020\006\000\002\021\006\000\002" +
    "\021\006\000\002\021\006\000\002\022\006\000\002\022" +
    "\006\000\002\022\006\000\002\023\006\000\002\023\006" +
    "\000\002\023\006\000\002\024\006\000\002\024\006\000" +
    "\002\024\006\000\002\025\006\000\002\025\006\000\002" +
    "\025\006\000\002\026\006\000\002\026\006\000\002\026" +
    "\006\000\002\027\006\000\002\027\006\000\002\027\006" +
    "\000\002\030\006\000\002\030\006\000\002\030\006\000" +
    "\002\047\004\000\002\050\004\000\002\050\003\000\002" +
    "\051\004\000\002\060\004\000\002\037\004\000\002\037" +
    "\003\000\002\040\004\000\002\040\004\000\002\040\004" +
    "\000\002\061\003\000\002\052\005\000\002\052\005\000" +
    "\002\052\003\000\002\053\005\000\002\053\005\000\002" +
    "\053\005\000\002\053\005\000\002\053\005\000\002\053" +
    "\005\000\002\053\005\000\002\053\003\000\002\054\003" +
    "\000\002\054\003\000\002\054\003\000\002\054\003\000" +
    "\002\054\005\000\002\054\003\000\002\013\006\000\002" +
    "\055\005\000\002\055\005\000\002\055\005\000\002\055" +
    "\005\000\002\055\005\000\002\055\005\000\002\055\005" +
    "\000\002\055\004\000\002\055\003\000\002\055\003\000" +
    "\002\055\003\000\002\055\005\000\002\055\003\000\002" +
    "\055\003\000\002\055\003\000\002\055\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0107\000\004\006\006\001\002\000\006\002\000\006" +
    "\006\001\002\000\006\002\ufffd\006\ufffd\001\002\000\006" +
    "\006\014\065\013\001\002\000\006\002\ufffe\006\ufffe\001" +
    "\002\000\004\002\011\001\002\000\004\002\001\001\002" +
    "\000\006\050\u0105\065\u0104\001\002\000\020\005\021\006" +
    "\053\010\026\027\045\032\033\037\032\051\034\001\002" +
    "\000\006\050\ufff8\065\ufff8\001\002\000\006\050\ufff9\065" +
    "\ufff9\001\002\000\026\005\uffef\006\uffef\010\uffef\026\uffef" +
    "\027\uffef\030\uffef\032\uffef\037\uffef\051\uffef\060\uffef\001" +
    "\002\000\022\005\021\006\053\010\026\026\u0103\027\045" +
    "\032\033\037\032\051\034\001\002\000\106\004\uffd6\005" +
    "\uffd6\006\uffd6\007\uffd6\010\uffd6\026\uffd6\027\uffd6\030\uffd6" +
    "\031\uffd6\032\uffd6\034\uffd6\036\uffd6\037\uffd6\040\uffd6\041" +
    "\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6" +
    "\050\uffd6\051\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6\056" +
    "\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6\064\uffd6\067\uffd6" +
    "\001\002\000\110\004\uffce\005\uffce\006\uffce\007\uffce\010" +
    "\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\034\uffce" +
    "\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044" +
    "\uffce\045\uffce\046\uffce\047\uffce\050\uffce\051\uffce\052\uffce" +
    "\053\uffce\054\uffce\055\uffce\056\uffce\057\uffce\060\uffce\061" +
    "\uffce\062\uffce\063\uffce\064\uffce\067\uffce\001\002\000\106" +
    "\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda\026\uffda\027" +
    "\uffda\030\uffda\031\uffda\032\uffda\034\uffda\036\uffda\037\uffda" +
    "\040\uffda\041\uffda\042\uffda\043\uffda\044\uffda\045\uffda\046" +
    "\uffda\047\uffda\050\uffda\051\uffda\052\uffda\053\uffda\054\uffda" +
    "\055\uffda\056\uffda\057\uffda\060\uffda\061\uffda\062\uffda\064" +
    "\uffda\067\uffda\001\002\000\026\005\ufff3\006\ufff3\010\ufff3" +
    "\026\ufff3\027\ufff3\030\ufff3\032\ufff3\037\ufff3\051\ufff3\060" +
    "\ufff3\001\002\000\106\004\uffdb\005\uffdb\006\uffdb\007\uffdb" +
    "\010\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\034" +
    "\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb" +
    "\044\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb\052" +
    "\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb" +
    "\061\uffdb\062\uffdb\064\uffdb\067\uffdb\001\002\000\004\063" +
    "\252\001\002\000\004\006\375\001\002\000\026\005\ufff6" +
    "\006\ufff6\010\ufff6\026\ufff6\027\ufff6\030\ufff6\032\ufff6\037" +
    "\ufff6\051\ufff6\060\ufff6\001\002\000\106\004\uffd3\005\uffd3" +
    "\006\uffd3\007\uffd3\010\uffd3\026\uffd3\027\uffd3\030\uffd3\031" +
    "\uffd3\032\uffd3\034\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3" +
    "\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050" +
    "\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3" +
    "\057\uffd3\060\uffd3\061\uffd3\062\uffd3\064\uffd3\067\uffd3\001" +
    "\002\000\026\005\ufff5\006\ufff5\010\ufff5\026\ufff5\027\ufff5" +
    "\030\ufff5\032\ufff5\037\ufff5\051\ufff5\060\ufff5\001\002\000" +
    "\016\005\070\006\100\033\067\037\131\051\066\067\130" +
    "\001\002\000\012\005\070\006\100\033\067\051\066\001" +
    "\002\000\036\006\154\011\153\012\234\013\236\014\237" +
    "\015\231\016\241\017\227\020\235\021\242\022\230\023" +
    "\233\024\232\025\240\001\002\000\106\004\uffd9\005\uffd9" +
    "\006\uffd9\007\uffd9\010\uffd9\026\uffd9\027\uffd9\030\uffd9\031" +
    "\uffd9\032\uffd9\034\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9" +
    "\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\050" +
    "\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9\056\uffd9" +
    "\057\uffd9\060\uffd9\061\uffd9\062\uffd9\064\uffd9\067\uffd9\001" +
    "\002\000\106\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7" +
    "\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\034\uffd7\036" +
    "\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7" +
    "\045\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053" +
    "\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7" +
    "\062\uffd7\064\uffd7\067\uffd7\001\002\000\106\004\uffd4\005" +
    "\uffd4\006\uffd4\007\uffd4\010\uffd4\026\uffd4\027\uffd4\030\uffd4" +
    "\031\uffd4\032\uffd4\034\uffd4\036\uffd4\037\uffd4\040\uffd4\041" +
    "\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4" +
    "\050\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4\056" +
    "\uffd4\057\uffd4\060\uffd4\061\uffd4\062\uffd4\064\uffd4\067\uffd4" +
    "\001\002\000\106\004\uffde\005\uffde\006\uffde\007\uffde\010" +
    "\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\034\uffde" +
    "\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde\043\uffde\044" +
    "\uffde\045\uffde\046\uffde\047\uffde\050\uffde\051\uffde\052\uffde" +
    "\053\uffde\054\uffde\055\uffde\056\uffde\057\uffde\060\uffde\061" +
    "\uffde\062\uffde\064\uffde\067\uffde\001\002\000\026\005\ufff4" +
    "\006\ufff4\010\ufff4\026\ufff4\027\ufff4\030\ufff4\032\ufff4\037" +
    "\ufff4\051\ufff4\060\ufff4\001\002\000\106\004\uffdf\005\uffdf" +
    "\006\uffdf\007\uffdf\010\uffdf\026\uffdf\027\uffdf\030\uffdf\031" +
    "\uffdf\032\uffdf\034\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf" +
    "\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf\050" +
    "\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\056\uffdf" +
    "\057\uffdf\060\uffdf\061\uffdf\062\uffdf\064\uffdf\067\uffdf\001" +
    "\002\000\106\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd" +
    "\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\034\uffdd\036" +
    "\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd" +
    "\045\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053" +
    "\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd" +
    "\062\uffdd\064\uffdd\067\uffdd\001\002\000\106\004\uffd5\005" +
    "\uffd5\006\uffd5\007\uffd5\010\uffd5\026\uffd5\027\uffd5\030\uffd5" +
    "\031\uffd5\032\uffd5\034\uffd5\036\uffd5\037\uffd5\040\uffd5\041" +
    "\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5" +
    "\050\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5\056" +
    "\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5\064\uffd5\067\uffd5" +
    "\001\002\000\014\005\070\006\100\033\067\037\073\051" +
    "\066\001\002\000\026\005\ufff1\006\ufff1\010\ufff1\026\ufff1" +
    "\027\ufff1\030\ufff1\032\ufff1\037\ufff1\051\ufff1\060\ufff1\001" +
    "\002\000\026\005\ufff0\006\ufff0\010\ufff0\026\ufff0\027\ufff0" +
    "\030\ufff0\032\ufff0\037\ufff0\051\ufff0\060\ufff0\001\002\000" +
    "\106\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\026\uffdc" +
    "\027\uffdc\030\uffdc\031\uffdc\032\uffdc\034\uffdc\036\uffdc\037" +
    "\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc" +
    "\046\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\054" +
    "\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc\062\uffdc" +
    "\064\uffdc\067\uffdc\001\002\000\026\005\ufff2\006\ufff2\010" +
    "\ufff2\026\ufff2\027\ufff2\030\ufff2\032\ufff2\037\ufff2\051\ufff2" +
    "\060\ufff2\001\002\000\106\004\uffd8\005\uffd8\006\uffd8\007" +
    "\uffd8\010\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8" +
    "\034\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043" +
    "\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8" +
    "\052\uffd8\053\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8\060" +
    "\uffd8\061\uffd8\062\uffd8\064\uffd8\067\uffd8\001\002\000\032" +
    "\005\uffcd\006\uffcd\010\uffcd\026\uffcd\027\uffcd\030\uffcd\032" +
    "\uffcd\037\uffcd\051\uffcd\060\uffcd\063\uffcd\064\054\001\002" +
    "\000\012\005\021\006\064\037\032\051\034\001\002\000" +
    "\106\004\uff97\005\uff97\006\uff97\007\uff97\010\uff97\026\uff97" +
    "\027\uff97\030\uff97\031\uff97\032\uff97\034\uff97\036\uff97\037" +
    "\uff97\040\uff97\041\uff97\042\uff97\043\uff97\044\uff97\045\uff97" +
    "\046\uff97\047\uff97\050\uff97\051\uff97\052\uff97\053\uff97\054" +
    "\uff97\055\uff97\056\uff97\057\uff97\060\uff97\061\uff97\062\uff97" +
    "\064\uff97\067\uff97\001\002\000\106\004\uff99\005\uff99\006" +
    "\uff99\007\uff99\010\uff99\026\uff99\027\uff99\030\uff99\031\uff99" +
    "\032\uff99\034\uff99\036\uff99\037\uff99\040\uff99\041\uff99\042" +
    "\uff99\043\uff99\044\uff99\045\uff99\046\uff99\047\uff99\050\uff99" +
    "\051\uff99\052\uff99\053\uff99\054\uff99\055\uff99\056\uff99\057" +
    "\uff99\060\uff99\061\uff99\062\uff99\064\054\067\uff99\001\002" +
    "\000\106\004\uff98\005\uff98\006\uff98\007\uff98\010\uff98\026" +
    "\uff98\027\uff98\030\uff98\031\uff98\032\uff98\034\uff98\036\uff98" +
    "\037\uff98\040\uff98\041\uff98\042\uff98\043\uff98\044\uff98\045" +
    "\uff98\046\uff98\047\uff98\050\uff98\051\uff98\052\uff98\053\uff98" +
    "\054\uff98\055\uff98\056\uff98\057\uff98\060\uff98\061\uff98\062" +
    "\uff98\064\uff98\067\uff98\001\002\000\106\004\uff95\005\uff95" +
    "\006\uff95\007\uff95\010\uff95\026\uff95\027\uff95\030\uff95\031" +
    "\uff95\032\uff95\034\uff95\036\uff95\037\uff95\040\uff95\041\uff95" +
    "\042\uff95\043\uff95\044\uff95\045\uff95\046\uff95\047\uff95\050" +
    "\uff95\051\uff95\052\uff95\053\uff95\054\uff95\055\uff95\056\uff95" +
    "\057\uff95\060\uff95\061\uff95\062\uff95\064\uff95\067\uff95\001" +
    "\002\000\106\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc" +
    "\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\034\uffcc\036" +
    "\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc" +
    "\045\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053" +
    "\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc" +
    "\062\uffcc\064\uffcc\067\uffcc\001\002\000\106\004\uffcb\005" +
    "\uffcb\006\uffcb\007\uffcb\010\uffcb\026\uffcb\027\uffcb\030\uffcb" +
    "\031\uffcb\032\uffcb\034\uffcb\036\uffcb\037\uffcb\040\uffcb\041" +
    "\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb" +
    "\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb\056" +
    "\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb\064\uffcb\067\uffcb" +
    "\001\002\000\106\004\uff96\005\uff96\006\uff96\007\uff96\010" +
    "\uff96\026\uff96\027\uff96\030\uff96\031\uff96\032\uff96\034\uff96" +
    "\036\uff96\037\uff96\040\uff96\041\uff96\042\uff96\043\uff96\044" +
    "\uff96\045\uff96\046\uff96\047\uff96\050\uff96\051\uff96\052\uff96" +
    "\053\uff96\054\uff96\055\uff96\056\uff96\057\uff96\060\uff96\061" +
    "\uff96\062\uff96\064\uff96\067\uff96\001\002\000\110\004\uff94" +
    "\005\uff94\006\uff94\007\uff94\010\uff94\026\uff94\027\uff94\030" +
    "\uff94\031\uff94\032\uff94\034\uff94\036\uff94\037\uff94\040\uff94" +
    "\041\uff94\042\uff94\043\uff94\044\uff94\045\uff94\046\uff94\047" +
    "\uff94\050\uff94\051\uff94\052\uff94\053\uff94\054\uff94\055\uff94" +
    "\056\uff94\057\uff94\060\uff94\061\uff94\062\uff94\063\uffcd\064" +
    "\uff94\067\uff94\001\002\000\026\031\uff88\034\uff88\052\uff88" +
    "\053\uff88\054\uff88\055\uff88\056\uff88\057\uff88\061\uff88\062" +
    "\uff88\001\002\000\006\006\154\011\153\001\002\000\014" +
    "\005\070\006\100\033\067\037\073\051\066\001\002\000" +
    "\040\004\uff84\007\uff84\031\uff84\034\uff84\040\uff84\050\uff84" +
    "\052\uff84\053\uff84\054\uff84\055\uff84\056\uff84\057\uff84\061" +
    "\uff84\062\uff84\067\uff84\001\002\000\044\004\uff82\007\uff82" +
    "\031\uff82\034\uff82\036\uff82\040\uff82\050\uff82\051\uff82\052" +
    "\uff82\053\uff82\054\uff82\055\uff82\056\uff82\057\uff82\061\uff82" +
    "\062\uff82\067\uff82\001\002\000\044\004\uff85\007\uff85\031" +
    "\uff85\034\uff85\036\uff85\040\uff85\050\uff85\051\uff85\052\uff85" +
    "\053\uff85\054\uff85\055\uff85\056\uff85\057\uff85\061\uff85\062" +
    "\uff85\067\uff85\001\002\000\016\005\070\006\100\033\067" +
    "\037\131\051\066\067\130\001\002\000\012\031\uff93\034" +
    "\uff93\052\123\053\124\001\002\000\004\031\115\001\002" +
    "\000\026\031\uff90\034\uff90\052\uff90\053\uff90\054\105\055" +
    "\104\056\101\057\102\061\103\062\106\001\002\000\044" +
    "\004\uff87\007\uff87\031\uff87\034\uff87\036\uff87\040\uff87\050" +
    "\uff87\051\uff87\052\uff87\053\uff87\054\uff87\055\uff87\056\uff87" +
    "\057\uff87\061\uff87\062\uff87\067\uff87\001\002\000\042\004" +
    "\uff86\007\uff86\031\uff86\034\uff86\040\uff86\050\uff86\052\uff86" +
    "\053\uff86\054\uff86\055\uff86\056\uff86\057\uff86\061\uff86\062" +
    "\uff86\064\054\067\uff86\001\002\000\014\005\070\006\100" +
    "\033\067\037\073\051\066\001\002\000\014\005\070\006" +
    "\100\033\067\037\073\051\066\001\002\000\014\005\070" +
    "\006\100\033\067\037\073\051\066\001\002\000\014\005" +
    "\070\006\100\033\067\037\073\051\066\001\002\000\014" +
    "\005\070\006\100\033\067\037\073\051\066\001\002\000" +
    "\014\005\070\006\100\033\067\037\073\051\066\001\002" +
    "\000\026\031\uff8e\034\uff8e\052\uff8e\053\uff8e\054\105\055" +
    "\104\056\101\057\102\061\uff8e\062\uff8e\001\002\000\026" +
    "\031\uff8d\034\uff8d\052\uff8d\053\uff8d\054\uff8d\055\uff8d\056" +
    "\uff8d\057\uff8d\061\uff8d\062\uff8d\001\002\000\026\031\uff8c" +
    "\034\uff8c\052\uff8c\053\uff8c\054\uff8c\055\uff8c\056\uff8c\057" +
    "\uff8c\061\uff8c\062\uff8c\001\002\000\026\031\uff8f\034\uff8f" +
    "\052\uff8f\053\uff8f\054\105\055\104\056\101\057\102\061" +
    "\uff8f\062\uff8f\001\002\000\026\031\uff8a\034\uff8a\052\uff8a" +
    "\053\uff8a\054\uff8a\055\uff8a\056\uff8a\057\uff8a\061\uff8a\062" +
    "\uff8a\001\002\000\026\031\uff8b\034\uff8b\052\uff8b\053\uff8b" +
    "\054\uff8b\055\uff8b\056\uff8b\057\uff8b\061\uff8b\062\uff8b\001" +
    "\002\000\020\005\021\006\053\010\026\027\045\032\033" +
    "\037\032\051\034\001\002\000\022\005\021\006\053\010" +
    "\026\027\045\030\120\032\033\037\032\051\034\001\002" +
    "\000\026\005\ufff7\006\ufff7\010\ufff7\026\ufff7\027\ufff7\030" +
    "\ufff7\032\ufff7\037\ufff7\051\ufff7\060\ufff7\001\002\000\020" +
    "\005\021\006\053\010\026\027\045\032\033\037\032\051" +
    "\034\001\002\000\022\005\021\006\053\010\026\026\122" +
    "\027\045\032\033\037\032\051\034\001\002\000\026\005" +
    "\uffee\006\uffee\010\uffee\026\uffee\027\uffee\030\uffee\032\uffee" +
    "\037\uffee\051\uffee\060\uffee\001\002\000\014\005\070\006" +
    "\100\033\067\037\073\051\066\001\002\000\014\005\070" +
    "\006\100\033\067\037\073\051\066\001\002\000\012\031" +
    "\uff91\034\uff91\052\uff91\053\uff91\001\002\000\012\031\uff92" +
    "\034\uff92\052\uff92\053\124\001\002\000\006\040\uffc8\050" +
    "\uffc8\001\002\000\006\040\uffc7\050\uffc7\001\002\000\016" +
    "\005\137\006\145\033\067\037\032\051\034\067\140\001" +
    "\002\000\006\040\134\050\135\001\002\000\006\040\uffc9" +
    "\050\uffc9\001\002\000\026\031\uff89\034\uff89\052\uff89\053" +
    "\uff89\054\uff89\055\uff89\056\uff89\057\uff89\061\uff89\062\uff89" +
    "\001\002\000\016\005\070\006\100\033\067\037\131\051" +
    "\066\067\130\001\002\000\006\040\uffca\050\uffca\001\002" +
    "\000\014\036\uff84\040\uff84\050\uff84\051\uff84\063\uffce\001" +
    "\002\000\006\040\uffc2\050\uffc2\001\002\000\006\040\146" +
    "\050\147\001\002\000\006\040\uffc4\050\uffc4\001\002\000" +
    "\006\040\uffc1\050\uffc1\001\002\000\006\040\uffc3\050\uffc3" +
    "\001\002\000\016\036\uff86\040\uff86\050\uff86\051\uff86\063" +
    "\uffcd\064\054\001\002\000\006\040\uffc6\050\uffc6\001\002" +
    "\000\016\005\137\006\145\033\067\037\032\051\034\067" +
    "\140\001\002\000\006\040\uffc5\050\uffc5\001\002\000\004" +
    "\034\152\001\002\000\044\004\uff83\007\uff83\031\uff83\034" +
    "\uff83\036\uff83\040\uff83\050\uff83\051\uff83\052\uff83\053\uff83" +
    "\054\uff83\055\uff83\056\uff83\057\uff83\061\uff83\062\uff83\067" +
    "\uff83\001\002\000\022\004\176\005\021\006\204\007\174" +
    "\033\177\037\032\042\201\051\034\001\002\000\004\035" +
    "\155\001\002\000\016\005\137\006\145\033\067\036\157" +
    "\037\160\051\034\001\002\000\006\036\170\050\167\001" +
    "\002\000\004\051\166\001\002\000\016\005\070\006\100" +
    "\033\067\037\131\051\066\067\130\001\002\000\006\036" +
    "\uffe0\050\uffe0\001\002\000\006\036\uffe2\050\uffe2\001\002" +
    "\000\006\036\uffe3\050\uffe3\001\002\000\006\040\165\050" +
    "\135\001\002\000\010\036\uffe1\050\uffe1\063\uffcf\001\002" +
    "\000\106\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\026" +
    "\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\034\uffe5\036\uffe5" +
    "\037\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045" +
    "\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5" +
    "\054\uffe5\055\uffe5\056\uffe5\057\uffe5\060\uffe5\061\uffe5\062" +
    "\uffe5\064\uffe5\067\uffe5\001\002\000\014\005\137\006\145" +
    "\033\067\037\160\051\034\001\002\000\004\051\171\001" +
    "\002\000\106\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6" +
    "\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\034\uffe6\036" +
    "\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6" +
    "\045\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053" +
    "\uffe6\054\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6" +
    "\062\uffe6\064\uffe6\067\uffe6\001\002\000\006\036\uffe4\050" +
    "\uffe4\001\002\000\024\034\uff72\041\uff72\042\uff72\043\uff72" +
    "\044\uff72\045\uff72\046\uff72\047\uff72\051\uff72\001\002\000" +
    "\024\034\uff77\041\uff77\042\uff77\043\uff77\044\uff77\045\uff77" +
    "\046\uff77\047\uff77\051\uff77\001\002\000\024\034\uff74\041" +
    "\uff74\042\uff74\043\uff74\044\uff74\045\uff74\046\uff74\047\uff74" +
    "\051\uff74\001\002\000\024\034\uff78\041\uff78\042\uff78\043" +
    "\uff78\044\uff78\045\uff78\046\uff78\047\uff78\051\uff78\001\002" +
    "\000\022\004\176\005\021\006\204\007\174\033\177\037" +
    "\032\042\201\051\034\001\002\000\022\041\210\042\211" +
    "\043\214\044\213\045\206\046\207\047\212\051\224\001" +
    "\002\000\022\004\176\005\021\006\204\007\174\033\177" +
    "\037\032\042\201\051\034\001\002\000\024\034\uff73\041" +
    "\uff73\042\uff73\043\uff73\044\uff73\045\uff73\046\uff73\047\uff73" +
    "\051\uff73\001\002\000\024\034\uff71\041\uff71\042\uff71\043" +
    "\uff71\044\uff71\045\uff71\046\uff71\047\uff71\051\uff71\001\002" +
    "\000\030\034\uff76\041\uff76\042\uff76\043\uff76\044\uff76\045" +
    "\uff76\046\uff76\047\uff76\051\uff76\063\uffcd\064\054\001\002" +
    "\000\024\034\uff79\041\uff79\042\uff79\043\214\044\213\045" +
    "\206\046\207\047\212\051\uff79\001\002\000\022\004\176" +
    "\005\021\006\204\007\174\033\177\037\032\042\201\051" +
    "\034\001\002\000\022\004\176\005\021\006\204\007\174" +
    "\033\177\037\032\042\201\051\034\001\002\000\022\004" +
    "\176\005\021\006\204\007\174\033\177\037\032\042\201" +
    "\051\034\001\002\000\022\004\176\005\021\006\204\007" +
    "\174\033\177\037\032\042\201\051\034\001\002\000\022" +
    "\004\176\005\021\006\204\007\174\033\177\037\032\042" +
    "\201\051\034\001\002\000\022\004\176\005\021\006\204" +
    "\007\174\033\177\037\032\042\201\051\034\001\002\000" +
    "\022\004\176\005\021\006\204\007\174\033\177\037\032" +
    "\042\201\051\034\001\002\000\024\034\uff7d\041\uff7d\042" +
    "\uff7d\043\uff7d\044\213\045\uff7d\046\uff7d\047\212\051\uff7d" +
    "\001\002\000\024\034\uff7b\041\uff7b\042\uff7b\043\uff7b\044" +
    "\213\045\uff7b\046\uff7b\047\212\051\uff7b\001\002\000\024" +
    "\034\uff7a\041\uff7a\042\uff7a\043\uff7a\044\213\045\uff7a\046" +
    "\uff7a\047\212\051\uff7a\001\002\000\024\034\uff7f\041\uff7f" +
    "\042\uff7f\043\214\044\213\045\206\046\207\047\212\051" +
    "\uff7f\001\002\000\024\034\uff80\041\uff80\042\uff80\043\214" +
    "\044\213\045\206\046\207\047\212\051\uff80\001\002\000" +
    "\024\034\uff7c\041\uff7c\042\uff7c\043\uff7c\044\213\045\uff7c" +
    "\046\uff7c\047\212\051\uff7c\001\002\000\024\034\uff7e\041" +
    "\uff7e\042\uff7e\043\uff7e\044\213\045\uff7e\046\uff7e\047\212" +
    "\051\uff7e\001\002\000\106\004\uff81\005\uff81\006\uff81\007" +
    "\uff81\010\uff81\026\uff81\027\uff81\030\uff81\031\uff81\032\uff81" +
    "\034\uff81\036\uff81\037\uff81\040\uff81\041\uff81\042\uff81\043" +
    "\uff81\044\uff81\045\uff81\046\uff81\047\uff81\050\uff81\051\uff81" +
    "\052\uff81\053\uff81\054\uff81\055\uff81\056\uff81\057\uff81\060" +
    "\uff81\061\uff81\062\uff81\064\uff81\067\uff81\001\002\000\022" +
    "\034\226\041\210\042\211\043\214\044\213\045\206\046" +
    "\207\047\212\001\002\000\024\034\uff75\041\uff75\042\uff75" +
    "\043\uff75\044\uff75\045\uff75\046\uff75\047\uff75\051\uff75\001" +
    "\002\000\012\005\021\006\053\037\032\051\245\001\002" +
    "\000\012\005\021\006\053\037\032\051\245\001\002\000" +
    "\012\005\021\006\053\037\032\051\245\001\002\000\012" +
    "\005\021\006\053\037\032\051\245\001\002\000\012\005" +
    "\021\006\053\037\032\051\245\001\002\000\014\005\137" +
    "\006\145\033\067\037\032\051\034\001\002\000\012\005" +
    "\021\006\053\037\032\051\245\001\002\000\014\005\137" +
    "\006\145\033\067\037\032\051\034\001\002\000\012\005" +
    "\021\006\053\037\032\051\245\001\002\000\012\005\021" +
    "\006\053\037\032\051\245\001\002\000\012\005\021\006" +
    "\053\037\032\051\245\001\002\000\012\005\021\006\053" +
    "\037\032\051\245\001\002\000\004\051\260\001\002\000" +
    "\006\051\uffbc\063\252\001\002\000\032\012\234\013\236" +
    "\014\237\015\231\016\241\017\227\020\235\021\242\022" +
    "\230\023\233\024\232\025\240\001\002\000\004\051\251" +
    "\001\002\000\004\051\250\001\002\000\106\004\uffab\005" +
    "\uffab\006\uffab\007\uffab\010\uffab\026\uffab\027\uffab\030\uffab" +
    "\031\uffab\032\uffab\034\uffab\036\uffab\037\uffab\040\uffab\041" +
    "\uffab\042\uffab\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab" +
    "\050\uffab\051\uffab\052\uffab\053\uffab\054\uffab\055\uffab\056" +
    "\uffab\057\uffab\060\uffab\061\uffab\062\uffab\064\uffab\067\uffab" +
    "\001\002\000\106\004\uffac\005\uffac\006\uffac\007\uffac\010" +
    "\uffac\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac\034\uffac" +
    "\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044" +
    "\uffac\045\uffac\046\uffac\047\uffac\050\uffac\051\uffac\052\uffac" +
    "\053\uffac\054\uffac\055\uffac\056\uffac\057\uffac\060\uffac\061" +
    "\uffac\062\uffac\064\uffac\067\uffac\001\002\000\010\005\021" +
    "\006\256\037\032\001\002\000\110\004\uff9b\005\uff9b\006" +
    "\uff9b\007\uff9b\010\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b" +
    "\032\uff9b\034\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042" +
    "\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b\050\uff9b" +
    "\051\uff9b\052\uff9b\053\uff9b\054\uff9b\055\uff9b\056\uff9b\057" +
    "\uff9b\060\uff9b\061\uff9b\062\uff9b\063\uff9b\064\uff9b\067\uff9b" +
    "\001\002\000\110\004\uff9d\005\uff9d\006\uff9d\007\uff9d\010" +
    "\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\034\uff9d" +
    "\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d\044" +
    "\uff9d\045\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d\052\uff9d" +
    "\053\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d\060\uff9d\061" +
    "\uff9d\062\uff9d\063\252\064\uff9d\067\uff9d\001\002\000\110" +
    "\004\uff9c\005\uff9c\006\uff9c\007\uff9c\010\uff9c\026\uff9c\027" +
    "\uff9c\030\uff9c\031\uff9c\032\uff9c\034\uff9c\036\uff9c\037\uff9c" +
    "\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c\046" +
    "\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c" +
    "\055\uff9c\056\uff9c\057\uff9c\060\uff9c\061\uff9c\062\uff9c\063" +
    "\uff9c\064\uff9c\067\uff9c\001\002\000\110\004\uffcd\005\uffcd" +
    "\006\uffcd\007\uffcd\010\uffcd\026\uffcd\027\uffcd\030\uffcd\031" +
    "\uffcd\032\uffcd\034\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd" +
    "\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050" +
    "\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd" +
    "\057\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd\067" +
    "\uffcd\001\002\000\110\004\uff9a\005\uff9a\006\uff9a\007\uff9a" +
    "\010\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a\034" +
    "\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a" +
    "\044\uff9a\045\uff9a\046\uff9a\047\uff9a\050\uff9a\051\uff9a\052" +
    "\uff9a\053\uff9a\054\uff9a\055\uff9a\056\uff9a\057\uff9a\060\uff9a" +
    "\061\uff9a\062\uff9a\063\uff9a\064\uff9a\067\uff9a\001\002\000" +
    "\106\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\026\uffaa" +
    "\027\uffaa\030\uffaa\031\uffaa\032\uffaa\034\uffaa\036\uffaa\037" +
    "\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa" +
    "\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054" +
    "\uffaa\055\uffaa\056\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa" +
    "\064\uffaa\067\uffaa\001\002\000\004\051\266\001\002\000" +
    "\004\051\265\001\002\000\004\051\264\001\002\000\106" +
    "\004\uffb4\005\uffb4\006\uffb4\007\uffb4\010\uffb4\026\uffb4\027" +
    "\uffb4\030\uffb4\031\uffb4\032\uffb4\034\uffb4\036\uffb4\037\uffb4" +
    "\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\046" +
    "\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4" +
    "\055\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4\064" +
    "\uffb4\067\uffb4\001\002\000\106\004\uffb5\005\uffb5\006\uffb5" +
    "\007\uffb5\010\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032" +
    "\uffb5\034\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5" +
    "\043\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051" +
    "\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5" +
    "\060\uffb5\061\uffb5\062\uffb5\064\uffb5\067\uffb5\001\002\000" +
    "\106\004\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3\026\uffb3" +
    "\027\uffb3\030\uffb3\031\uffb3\032\uffb3\034\uffb3\036\uffb3\037" +
    "\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3" +
    "\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054" +
    "\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3" +
    "\064\uffb3\067\uffb3\001\002\000\004\051\274\001\002\000" +
    "\004\051\273\001\002\000\004\051\272\001\002\000\106" +
    "\004\uff9f\005\uff9f\006\uff9f\007\uff9f\010\uff9f\026\uff9f\027" +
    "\uff9f\030\uff9f\031\uff9f\032\uff9f\034\uff9f\036\uff9f\037\uff9f" +
    "\040\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046" +
    "\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f" +
    "\055\uff9f\056\uff9f\057\uff9f\060\uff9f\061\uff9f\062\uff9f\064" +
    "\uff9f\067\uff9f\001\002\000\106\004\uffa0\005\uffa0\006\uffa0" +
    "\007\uffa0\010\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0\032" +
    "\uffa0\034\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0" +
    "\043\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0\051" +
    "\uffa0\052\uffa0\053\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0" +
    "\060\uffa0\061\uffa0\062\uffa0\064\uffa0\067\uffa0\001\002\000" +
    "\106\004\uff9e\005\uff9e\006\uff9e\007\uff9e\010\uff9e\026\uff9e" +
    "\027\uff9e\030\uff9e\031\uff9e\032\uff9e\034\uff9e\036\uff9e\037" +
    "\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e" +
    "\046\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\054" +
    "\uff9e\055\uff9e\056\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e" +
    "\064\uff9e\067\uff9e\001\002\000\004\051\302\001\002\000" +
    "\004\051\301\001\002\000\004\051\300\001\002\000\106" +
    "\004\uffba\005\uffba\006\uffba\007\uffba\010\uffba\026\uffba\027" +
    "\uffba\030\uffba\031\uffba\032\uffba\034\uffba\036\uffba\037\uffba" +
    "\040\uffba\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046" +
    "\uffba\047\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba" +
    "\055\uffba\056\uffba\057\uffba\060\uffba\061\uffba\062\uffba\064" +
    "\uffba\067\uffba\001\002\000\106\004\uffbb\005\uffbb\006\uffbb" +
    "\007\uffbb\010\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032" +
    "\uffbb\034\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb" +
    "\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051" +
    "\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb" +
    "\060\uffbb\061\uffbb\062\uffbb\064\uffbb\067\uffbb\001\002\000" +
    "\106\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\026\uffb9" +
    "\027\uffb9\030\uffb9\031\uffb9\032\uffb9\034\uffb9\036\uffb9\037" +
    "\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9" +
    "\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054" +
    "\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\061\uffb9\062\uffb9" +
    "\064\uffb9\067\uffb9\001\002\000\004\051\306\001\002\000" +
    "\004\051\305\001\002\000\106\004\uffbe\005\uffbe\006\uffbe" +
    "\007\uffbe\010\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032" +
    "\uffbe\034\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe" +
    "\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051" +
    "\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe" +
    "\060\uffbe\061\uffbe\062\uffbe\064\uffbe\067\uffbe\001\002\000" +
    "\106\004\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd\026\uffbd" +
    "\027\uffbd\030\uffbd\031\uffbd\032\uffbd\034\uffbd\036\uffbd\037" +
    "\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd" +
    "\046\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054" +
    "\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd" +
    "\064\uffbd\067\uffbd\001\002\000\004\051\314\001\002\000" +
    "\004\051\313\001\002\000\004\051\312\001\002\000\106" +
    "\004\uffae\005\uffae\006\uffae\007\uffae\010\uffae\026\uffae\027" +
    "\uffae\030\uffae\031\uffae\032\uffae\034\uffae\036\uffae\037\uffae" +
    "\040\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046" +
    "\uffae\047\uffae\050\uffae\051\uffae\052\uffae\053\uffae\054\uffae" +
    "\055\uffae\056\uffae\057\uffae\060\uffae\061\uffae\062\uffae\064" +
    "\uffae\067\uffae\001\002\000\106\004\uffaf\005\uffaf\006\uffaf" +
    "\007\uffaf\010\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032" +
    "\uffaf\034\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf" +
    "\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051" +
    "\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf" +
    "\060\uffaf\061\uffaf\062\uffaf\064\uffaf\067\uffaf\001\002\000" +
    "\106\004\uffad\005\uffad\006\uffad\007\uffad\010\uffad\026\uffad" +
    "\027\uffad\030\uffad\031\uffad\032\uffad\034\uffad\036\uffad\037" +
    "\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad" +
    "\046\uffad\047\uffad\050\uffad\051\uffad\052\uffad\053\uffad\054" +
    "\uffad\055\uffad\056\uffad\057\uffad\060\uffad\061\uffad\062\uffad" +
    "\064\uffad\067\uffad\001\002\000\004\051\320\001\002\000" +
    "\004\051\317\001\002\000\106\004\uffc0\005\uffc0\006\uffc0" +
    "\007\uffc0\010\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032" +
    "\uffc0\034\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0" +
    "\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\051" +
    "\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0" +
    "\060\uffc0\061\uffc0\062\uffc0\064\uffc0\067\uffc0\001\002\000" +
    "\106\004\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf\026\uffbf" +
    "\027\uffbf\030\uffbf\031\uffbf\032\uffbf\034\uffbf\036\uffbf\037" +
    "\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf" +
    "\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054" +
    "\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf\061\uffbf\062\uffbf" +
    "\064\uffbf\067\uffbf\001\002\000\004\051\326\001\002\000" +
    "\004\051\325\001\002\000\004\051\324\001\002\000\106" +
    "\004\uffa5\005\uffa5\006\uffa5\007\uffa5\010\uffa5\026\uffa5\027" +
    "\uffa5\030\uffa5\031\uffa5\032\uffa5\034\uffa5\036\uffa5\037\uffa5" +
    "\040\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5\046" +
    "\uffa5\047\uffa5\050\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5" +
    "\055\uffa5\056\uffa5\057\uffa5\060\uffa5\061\uffa5\062\uffa5\064" +
    "\uffa5\067\uffa5\001\002\000\106\004\uffa6\005\uffa6\006\uffa6" +
    "\007\uffa6\010\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6\032" +
    "\uffa6\034\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6" +
    "\043\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051" +
    "\uffa6\052\uffa6\053\uffa6\054\uffa6\055\uffa6\056\uffa6\057\uffa6" +
    "\060\uffa6\061\uffa6\062\uffa6\064\uffa6\067\uffa6\001\002\000" +
    "\106\004\uffa4\005\uffa4\006\uffa4\007\uffa4\010\uffa4\026\uffa4" +
    "\027\uffa4\030\uffa4\031\uffa4\032\uffa4\034\uffa4\036\uffa4\037" +
    "\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4" +
    "\046\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4\054" +
    "\uffa4\055\uffa4\056\uffa4\057\uffa4\060\uffa4\061\uffa4\062\uffa4" +
    "\064\uffa4\067\uffa4\001\002\000\004\051\334\001\002\000" +
    "\004\051\333\001\002\000\004\051\332\001\002\000\106" +
    "\004\uffa2\005\uffa2\006\uffa2\007\uffa2\010\uffa2\026\uffa2\027" +
    "\uffa2\030\uffa2\031\uffa2\032\uffa2\034\uffa2\036\uffa2\037\uffa2" +
    "\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\046" +
    "\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2" +
    "\055\uffa2\056\uffa2\057\uffa2\060\uffa2\061\uffa2\062\uffa2\064" +
    "\uffa2\067\uffa2\001\002\000\106\004\uffa3\005\uffa3\006\uffa3" +
    "\007\uffa3\010\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032" +
    "\uffa3\034\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3" +
    "\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3\051" +
    "\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3\056\uffa3\057\uffa3" +
    "\060\uffa3\061\uffa3\062\uffa3\064\uffa3\067\uffa3\001\002\000" +
    "\106\004\uffa1\005\uffa1\006\uffa1\007\uffa1\010\uffa1\026\uffa1" +
    "\027\uffa1\030\uffa1\031\uffa1\032\uffa1\034\uffa1\036\uffa1\037" +
    "\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1" +
    "\046\uffa1\047\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1\054" +
    "\uffa1\055\uffa1\056\uffa1\057\uffa1\060\uffa1\061\uffa1\062\uffa1" +
    "\064\uffa1\067\uffa1\001\002\000\004\051\342\001\002\000" +
    "\004\051\341\001\002\000\004\051\340\001\002\000\106" +
    "\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7\026\uffb7\027" +
    "\uffb7\030\uffb7\031\uffb7\032\uffb7\034\uffb7\036\uffb7\037\uffb7" +
    "\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046" +
    "\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7" +
    "\055\uffb7\056\uffb7\057\uffb7\060\uffb7\061\uffb7\062\uffb7\064" +
    "\uffb7\067\uffb7\001\002\000\106\004\uffb8\005\uffb8\006\uffb8" +
    "\007\uffb8\010\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032" +
    "\uffb8\034\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8" +
    "\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051" +
    "\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8" +
    "\060\uffb8\061\uffb8\062\uffb8\064\uffb8\067\uffb8\001\002\000" +
    "\106\004\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6\026\uffb6" +
    "\027\uffb6\030\uffb6\031\uffb6\032\uffb6\034\uffb6\036\uffb6\037" +
    "\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6" +
    "\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054" +
    "\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6\061\uffb6\062\uffb6" +
    "\064\uffb6\067\uffb6\001\002\000\004\051\350\001\002\000" +
    "\004\051\347\001\002\000\004\051\346\001\002\000\106" +
    "\004\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8\026\uffa8\027" +
    "\uffa8\030\uffa8\031\uffa8\032\uffa8\034\uffa8\036\uffa8\037\uffa8" +
    "\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046" +
    "\uffa8\047\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8" +
    "\055\uffa8\056\uffa8\057\uffa8\060\uffa8\061\uffa8\062\uffa8\064" +
    "\uffa8\067\uffa8\001\002\000\106\004\uffa9\005\uffa9\006\uffa9" +
    "\007\uffa9\010\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\032" +
    "\uffa9\034\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9" +
    "\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\051" +
    "\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9\056\uffa9\057\uffa9" +
    "\060\uffa9\061\uffa9\062\uffa9\064\uffa9\067\uffa9\001\002\000" +
    "\106\004\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7\026\uffa7" +
    "\027\uffa7\030\uffa7\031\uffa7\032\uffa7\034\uffa7\036\uffa7\037" +
    "\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7" +
    "\046\uffa7\047\uffa7\050\uffa7\051\uffa7\052\uffa7\053\uffa7\054" +
    "\uffa7\055\uffa7\056\uffa7\057\uffa7\060\uffa7\061\uffa7\062\uffa7" +
    "\064\uffa7\067\uffa7\001\002\000\004\051\356\001\002\000" +
    "\004\051\355\001\002\000\004\051\354\001\002\000\106" +
    "\004\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1\026\uffb1\027" +
    "\uffb1\030\uffb1\031\uffb1\032\uffb1\034\uffb1\036\uffb1\037\uffb1" +
    "\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046" +
    "\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1" +
    "\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1\064" +
    "\uffb1\067\uffb1\001\002\000\106\004\uffb2\005\uffb2\006\uffb2" +
    "\007\uffb2\010\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032" +
    "\uffb2\034\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2" +
    "\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2\051" +
    "\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2" +
    "\060\uffb2\061\uffb2\062\uffb2\064\uffb2\067\uffb2\001\002\000" +
    "\106\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0\026\uffb0" +
    "\027\uffb0\030\uffb0\031\uffb0\032\uffb0\034\uffb0\036\uffb0\037" +
    "\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0" +
    "\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054" +
    "\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0" +
    "\064\uffb0\067\uffb0\001\002\000\010\004\361\007\360\067" +
    "\364\001\002\000\004\066\uffe8\001\002\000\004\066\uffe9" +
    "\001\002\000\012\004\uffeb\007\uffeb\026\uffeb\067\uffeb\001" +
    "\002\000\004\066\370\001\002\000\004\066\uffe7\001\002" +
    "\000\012\004\361\007\360\026\367\067\364\001\002\000" +
    "\012\004\uffec\007\uffec\026\uffec\067\uffec\001\002\000\026" +
    "\005\uffed\006\uffed\010\uffed\026\uffed\027\uffed\030\uffed\032" +
    "\uffed\037\uffed\051\uffed\060\uffed\001\002\000\020\005\021" +
    "\006\053\010\026\027\045\032\033\037\032\051\034\001" +
    "\002\000\022\005\021\006\053\010\026\027\045\032\033" +
    "\037\032\051\034\060\372\001\002\000\012\004\uffea\007" +
    "\uffea\026\uffea\067\uffea\001\002\000\006\040\374\050\135" +
    "\001\002\000\110\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010" +
    "\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\034\uffcf" +
    "\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044" +
    "\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf" +
    "\053\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf\061" +
    "\uffcf\062\uffcf\063\uffcf\064\uffcf\067\uffcf\001\002\000\004" +
    "\065\376\001\002\000\012\005\021\006\053\037\032\051" +
    "\u0102\001\002\000\026\005\uffd1\006\uffd1\010\uffd1\026\uffd1" +
    "\027\uffd1\030\uffd1\032\uffd1\037\uffd1\051\uffd1\060\uffd1\001" +
    "\002\000\026\005\uffd0\006\uffd0\010\uffd0\026\uffd0\027\uffd0" +
    "\030\uffd0\032\uffd0\037\uffd0\051\uffd0\060\uffd0\001\002\000" +
    "\030\005\uffd2\006\uffd2\010\uffd2\026\uffd2\027\uffd2\030\uffd2" +
    "\032\uffd2\037\uffd2\051\uffd2\060\uffd2\063\252\001\002\000" +
    "\034\006\154\012\234\013\236\014\237\015\231\016\241" +
    "\017\227\020\235\021\242\022\230\023\233\024\232\025" +
    "\240\001\002\000\006\002\ufffb\006\ufffb\001\002\000\020" +
    "\005\021\006\053\010\026\027\045\032\033\037\032\051" +
    "\034\001\002\000\004\006\014\001\002\000\006\050\ufffa" +
    "\065\ufffa\001\002\000\022\005\021\006\053\010\026\026" +
    "\u0108\027\045\032\033\037\032\051\034\001\002\000\006" +
    "\002\ufffc\006\ufffc\001\002\000\006\002\uffff\006\uffff\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0107\000\012\002\007\003\003\004\006\005\004\001" +
    "\001\000\006\004\u0108\005\004\001\001\000\002\001\001" +
    "\000\006\033\011\034\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\060" +
    "\006\016\007\026\010\030\011\040\012\022\013\046\014" +
    "\050\015\041\016\037\017\042\020\047\021\023\022\021" +
    "\023\034\024\051\025\035\026\043\027\017\030\036\042" +
    "\045\045\024\047\027\060\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\007\116\010" +
    "\030\011\040\012\022\013\046\014\050\015\041\016\037" +
    "\017\042\020\047\021\023\022\021\023\034\024\051\025" +
    "\035\026\043\027\017\030\036\042\045\045\024\047\027" +
    "\060\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\050\253\051\252\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\012\070" +
    "\013\076\043\372\044\132\054\126\060\071\001\001\000" +
    "\012\012\070\013\076\054\356\060\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\012\070\013" +
    "\076\052\073\053\075\054\064\060\071\061\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\037\055\040\054" +
    "\001\001\000\046\012\060\013\062\015\041\016\037\017" +
    "\042\020\047\021\023\022\021\023\034\024\051\025\035" +
    "\026\043\027\017\030\036\042\061\045\024\047\027\062" +
    "\057\001\001\000\002\001\001\000\004\040\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\012\070\013\076\052" +
    "\073\053\075\054\064\060\071\061\150\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\012" +
    "\070\013\076\043\131\044\132\054\126\060\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\037\055\040\054\001\001\000\014" +
    "\012\070\013\076\053\113\054\064\060\071\001\001\000" +
    "\014\012\070\013\076\053\112\054\064\060\071\001\001" +
    "\000\014\012\070\013\076\053\111\054\064\060\071\001" +
    "\001\000\014\012\070\013\076\053\110\054\064\060\071" +
    "\001\001\000\014\012\070\013\076\053\107\054\064\060" +
    "\071\001\001\000\014\012\070\013\076\053\106\054\064" +
    "\060\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\060\006\115\007\026\010\030\011\040\012" +
    "\022\013\046\014\050\015\041\016\037\017\042\020\047" +
    "\021\023\022\021\023\034\024\051\025\035\026\043\027" +
    "\017\030\036\042\045\045\024\047\027\060\015\001\001" +
    "\000\056\007\116\010\030\011\040\012\022\013\046\014" +
    "\050\015\041\016\037\017\042\020\047\021\023\022\021" +
    "\023\034\024\051\025\035\026\043\027\017\030\036\042" +
    "\045\045\024\047\027\060\015\001\001\000\002\001\001" +
    "\000\060\006\120\007\026\010\030\011\040\012\022\013" +
    "\046\014\050\015\041\016\037\017\042\020\047\021\023" +
    "\022\021\023\034\024\051\025\035\026\043\027\017\030" +
    "\036\042\045\045\024\047\027\060\015\001\001\000\056" +
    "\007\116\010\030\011\040\012\022\013\046\014\050\015" +
    "\041\016\037\017\042\020\047\021\023\022\021\023\034" +
    "\024\051\025\035\026\043\027\017\030\036\042\045\045" +
    "\024\047\027\060\015\001\001\000\002\001\001\000\016" +
    "\012\070\013\076\052\125\053\075\054\064\060\071\001" +
    "\001\000\016\012\070\013\076\052\124\053\075\054\064" +
    "\060\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\054\012\070\013\076" +
    "\015\041\016\037\017\042\020\047\021\023\022\021\023" +
    "\034\024\051\025\035\026\043\027\017\030\036\042\142" +
    "\045\024\047\027\054\143\056\140\057\141\060\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\012\070\013\076\044\135\054\126\060\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\037\055\040\054\001\001\000\002" +
    "\001\001\000\052\012\070\013\076\015\041\016\037\017" +
    "\042\020\047\021\023\022\021\023\034\024\051\025\035" +
    "\026\043\027\017\030\036\042\142\045\024\047\027\054" +
    "\143\057\147\060\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\012\174\013\202\015" +
    "\041\016\037\017\042\020\047\021\023\022\021\023\034" +
    "\024\051\025\035\026\043\027\017\030\036\042\201\045" +
    "\024\047\027\055\177\060\172\001\001\000\002\001\001" +
    "\000\054\012\070\013\076\015\041\016\037\017\042\020" +
    "\047\021\023\022\021\023\034\024\051\025\035\026\043" +
    "\027\017\030\036\031\155\032\162\042\160\045\024\047" +
    "\027\054\161\060\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\012\070\013\076\043\163\044\132\054" +
    "\126\060\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\012\070\013\076\015\041\016\037" +
    "\017\042\020\047\021\023\022\021\023\034\024\051\025" +
    "\035\026\043\027\017\030\036\032\171\042\160\045\024" +
    "\047\027\054\161\060\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\012" +
    "\174\013\202\015\041\016\037\017\042\020\047\021\023" +
    "\022\021\023\034\024\051\025\035\026\043\027\017\030" +
    "\036\042\201\045\024\047\027\055\224\060\172\001\001" +
    "\000\002\001\001\000\050\012\174\013\202\015\041\016" +
    "\037\017\042\020\047\021\023\022\021\023\034\024\051" +
    "\025\035\026\043\027\017\030\036\042\201\045\024\047" +
    "\027\055\204\060\172\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\037\055\040\054\001\001\000\002\001" +
    "\001\000\050\012\174\013\202\015\041\016\037\017\042" +
    "\020\047\021\023\022\021\023\034\024\051\025\035\026" +
    "\043\027\017\030\036\042\201\045\024\047\027\055\222" +
    "\060\172\001\001\000\050\012\174\013\202\015\041\016" +
    "\037\017\042\020\047\021\023\022\021\023\034\024\051" +
    "\025\035\026\043\027\017\030\036\042\201\045\024\047" +
    "\027\055\221\060\172\001\001\000\050\012\174\013\202" +
    "\015\041\016\037\017\042\020\047\021\023\022\021\023" +
    "\034\024\051\025\035\026\043\027\017\030\036\042\201" +
    "\045\024\047\027\055\220\060\172\001\001\000\050\012" +
    "\174\013\202\015\041\016\037\017\042\020\047\021\023" +
    "\022\021\023\034\024\051\025\035\026\043\027\017\030" +
    "\036\042\201\045\024\047\027\055\217\060\172\001\001" +
    "\000\050\012\174\013\202\015\041\016\037\017\042\020" +
    "\047\021\023\022\021\023\034\024\051\025\035\026\043" +
    "\027\017\030\036\042\201\045\024\047\027\055\216\060" +
    "\172\001\001\000\050\012\174\013\202\015\041\016\037" +
    "\017\042\020\047\021\023\022\021\023\034\024\051\025" +
    "\035\026\043\027\017\030\036\042\201\045\024\047\027" +
    "\055\215\060\172\001\001\000\050\012\174\013\202\015" +
    "\041\016\037\017\042\020\047\021\023\022\021\023\034" +
    "\024\051\025\035\026\043\027\017\030\036\042\201\045" +
    "\024\047\027\055\214\060\172\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\015" +
    "\041\016\037\017\042\020\047\021\023\022\021\023\034" +
    "\024\051\025\035\026\043\027\017\030\036\042\352\045" +
    "\243\046\351\047\027\060\350\001\001\000\044\015\041" +
    "\016\037\017\042\020\047\021\023\022\021\023\034\024" +
    "\051\025\035\026\043\027\017\030\036\042\344\045\243" +
    "\046\343\047\027\060\342\001\001\000\044\015\041\016" +
    "\037\017\042\020\047\021\023\022\021\023\034\024\051" +
    "\025\035\026\043\027\017\030\036\042\336\045\243\046" +
    "\335\047\027\060\334\001\001\000\044\015\041\016\037" +
    "\017\042\020\047\021\023\022\021\023\034\024\051\025" +
    "\035\026\043\027\017\030\036\042\330\045\243\046\327" +
    "\047\027\060\326\001\001\000\044\015\041\016\037\017" +
    "\042\020\047\021\023\022\021\023\034\024\051\025\035" +
    "\026\043\027\017\030\036\042\322\045\243\046\321\047" +
    "\027\060\320\001\001\000\050\012\070\013\076\015\041" +
    "\016\037\017\042\020\047\021\023\022\021\023\034\024" +
    "\051\025\035\026\043\027\017\030\036\042\314\045\024" +
    "\047\027\054\315\060\071\001\001\000\044\015\041\016" +
    "\037\017\042\020\047\021\023\022\021\023\034\024\051" +
    "\025\035\026\043\027\017\030\036\042\310\045\243\046" +
    "\307\047\027\060\306\001\001\000\050\012\070\013\076" +
    "\015\041\016\037\017\042\020\047\021\023\022\021\023" +
    "\034\024\051\025\035\026\043\027\017\030\036\042\302" +
    "\045\024\047\027\054\303\060\071\001\001\000\044\015" +
    "\041\016\037\017\042\020\047\021\023\022\021\023\034" +
    "\024\051\025\035\026\043\027\017\030\036\042\276\045" +
    "\243\046\275\047\027\060\274\001\001\000\044\015\041" +
    "\016\037\017\042\020\047\021\023\022\021\023\034\024" +
    "\051\025\035\026\043\027\017\030\036\042\270\045\243" +
    "\046\267\047\027\060\266\001\001\000\044\015\041\016" +
    "\037\017\042\020\047\021\023\022\021\023\034\024\051" +
    "\025\035\026\043\027\017\030\036\042\262\045\243\046" +
    "\261\047\027\060\260\001\001\000\044\015\041\016\037" +
    "\017\042\020\047\021\023\022\021\023\034\024\051\025" +
    "\035\026\043\027\017\030\036\042\246\045\243\046\245" +
    "\047\027\060\242\001\001\000\002\001\001\000\006\050" +
    "\253\051\252\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\045\256\001\001\000\002\001\001\000\004\051\254" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\035\364\036\361\041" +
    "\362\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\036" +
    "\365\041\362\001\001\000\002\001\001\000\002\001\001" +
    "\000\060\006\370\007\026\010\030\011\040\012\022\013" +
    "\046\014\050\015\041\016\037\017\042\020\047\021\023" +
    "\022\021\023\034\024\051\025\035\026\043\027\017\030" +
    "\036\042\045\045\024\047\027\060\015\001\001\000\056" +
    "\007\116\010\030\011\040\012\022\013\046\014\050\015" +
    "\041\016\037\017\042\020\047\021\023\022\021\023\034" +
    "\024\051\025\035\026\043\027\017\030\036\042\045\045" +
    "\024\047\027\060\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\012" +
    "\060\015\041\016\037\017\042\020\047\021\023\022\021" +
    "\023\034\024\051\025\035\026\043\027\017\030\036\042" +
    "\061\045\u0100\047\027\060\377\062\376\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\050\253\051\252\001" +
    "\001\000\002\001\001\000\002\001\001\000\060\006\u0106" +
    "\007\026\010\030\011\040\012\022\013\046\014\050\015" +
    "\041\016\037\017\042\020\047\021\023\022\021\023\034" +
    "\024\051\025\035\026\043\027\017\030\036\042\045\045" +
    "\024\047\027\060\015\001\001\000\004\034\u0105\001\001" +
    "\000\002\001\001\000\056\007\116\010\030\011\040\012" +
    "\022\013\046\014\050\015\041\016\037\017\042\020\047" +
    "\021\023\022\021\023\034\024\051\025\035\026\043\027" +
    "\017\030\036\042\045\045\024\047\027\060\015\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintacticoHaskell$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintacticoHaskell$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintacticoHaskell$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private Errores err = Errores.getInstance();

    public void syntax_error(Symbol token) {
        err.nuevoErrorSintactico((token.left+1),(token.right+1), "Se esperaba "+token.value);
        System.out.println("Error sintactico: linea "+ (token.left+1)+" columna: "+(token.right+1)+" Lexema: "+token.value);

    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        err.nuevoErrorSintactico((s.left+1),(s.right+1), "Se esperaba "+s.value);
        System.out.println("Error sintactico: linea "+ s.left+" columna: "+s.right+" Lexema: "+s.value);

    }  

    public NodoHK nodo;

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$sintacticoHaskell$actions {


    

  private final sintacticoHaskell parser;

  /** Constructor */
  CUP$sintacticoHaskell$actions(sintacticoHaskell parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$sintacticoHaskell$do_action(
    int                        CUP$sintacticoHaskell$act_num,
    java_cup.runtime.lr_parser CUP$sintacticoHaskell$parser,
    java.util.Stack            CUP$sintacticoHaskell$stack,
    int                        CUP$sintacticoHaskell$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintacticoHaskell$result;

      /* select the action based on the action number */
      switch (CUP$sintacticoHaskell$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // OPERACIONES ::= CALCULAR 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPERACIONES",43, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // OPERACIONES ::= BUSCA_LIST 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                        RESULT = nodo;
                    
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPERACIONES",43, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // OPERACIONES ::= MET_NATIVOS 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                        RESULT = nodo;
                    
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPERACIONES",43, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // OPERACIONES ::= LLAMADA_MET 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                        RESULT = nodo;
                    
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPERACIONES",43, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // OPERACIONES ::= par_izq OPERACIONES par_der 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		
                        RESULT = nodo;
                    
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPERACIONES",43, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // OPERACIONES ::= identificador 
            {
              NodoHK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                        NodoHK nodo = new NodoHK("identificador");
                        nodo.hijos.add(new NodoHK(id, idleft, idright));
                        RESULT = nodo;
                    
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPERACIONES",43, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // OPERACIONES ::= decimal 
            {
              NodoHK RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                        NodoHK nodo = new NodoHK("decimal");
                        nodo.hijos.add(new NodoHK(dec, decleft, decright));
                        RESULT = nodo;
                    
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPERACIONES",43, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // OPERACIONES ::= numero 
            {
              NodoHK RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                        NodoHK nodo = new NodoHK("entero");
                        nodo.hijos.add(new NodoHK(num, numleft, numright));
                        RESULT = nodo;
                    
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPERACIONES",43, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // OPERACIONES ::= menos OPERACIONES 
            {
              NodoHK RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK op = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                        NodoHK nodo = new NodoHK("menos");
                        nodo.hijos.add(op);
                        RESULT = nodo;
                    
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPERACIONES",43, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OPERACIONES ::= OPERACIONES sqrt OPERACIONES 
            {
              NodoHK RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).right;
		NodoHK op1 = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK op2 = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                        NodoHK nodo = new NodoHK("sqrt");
                        nodo.hijos.add(op1);
                        nodo.hijos.add(op2);
                        RESULT = nodo;
                    
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPERACIONES",43, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OPERACIONES ::= OPERACIONES potencia OPERACIONES 
            {
              NodoHK RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).right;
		NodoHK op1 = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK op2 = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                        NodoHK nodo = new NodoHK("potencia");
                        nodo.hijos.add(op1);
                        nodo.hijos.add(op2);
                        RESULT = nodo;
                    
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPERACIONES",43, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OPERACIONES ::= OPERACIONES mod OPERACIONES 
            {
              NodoHK RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).right;
		NodoHK op1 = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK op2 = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                        NodoHK nodo = new NodoHK("mod");
                        nodo.hijos.add(op1);
                        nodo.hijos.add(op2);
                        RESULT = nodo;
                    
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPERACIONES",43, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OPERACIONES ::= OPERACIONES div OPERACIONES 
            {
              NodoHK RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).right;
		NodoHK op1 = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK op2 = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                        NodoHK nodo = new NodoHK("div");
                        nodo.hijos.add(op1);
                        nodo.hijos.add(op2);
                        RESULT = nodo;
                    
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPERACIONES",43, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OPERACIONES ::= OPERACIONES por OPERACIONES 
            {
              NodoHK RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).right;
		NodoHK op1 = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK op2 = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                        NodoHK nodo = new NodoHK("por");
                        nodo.hijos.add(op1);
                        nodo.hijos.add(op2);
                        RESULT = nodo;
                    
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPERACIONES",43, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OPERACIONES ::= OPERACIONES menos OPERACIONES 
            {
              NodoHK RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).right;
		NodoHK op1 = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK op2 = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                        NodoHK nodo = new NodoHK("menos");
                        nodo.hijos.add(op1);
                        nodo.hijos.add(op2);
                        RESULT = nodo;
                    
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPERACIONES",43, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OPERACIONES ::= OPERACIONES mas OPERACIONES 
            {
              NodoHK RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).right;
		NodoHK op1 = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK op2 = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                        NodoHK nodo = new NodoHK("mas");
                        nodo.hijos.add(op1);
                        nodo.hijos.add(op2);
                        RESULT = nodo;
                    
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPERACIONES",43, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CALCULAR ::= dolar tkn_calcular OPERACIONES dolar 
            {
              NodoHK RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK op = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		
                        NodoHK nodo = new NodoHK("CALCULAR");
                        nodo.hijos.add(op);
                        RESULT = nodo;
                    
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CALCULAR",9, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ARITMETICAS ::= LLAMADA_MET 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                        RESULT = nodo;
                    
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("ARITMETICAS",42, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ARITMETICAS ::= par_izq COND par_der 
            {
              NodoHK RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK log = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		
                        RESULT = log;
                    
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("ARITMETICAS",42, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ARITMETICAS ::= texto 
            {
              NodoHK RESULT =null;
		int texleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int texright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		String tex = (String)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                        NodoHK nodo = new NodoHK("cadena");
                        nodo.hijos.add(new NodoHK(tex));
                        RESULT = nodo;
                    
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("ARITMETICAS",42, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ARITMETICAS ::= BUSCA_LIST 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                        RESULT = nodo;
                    
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("ARITMETICAS",42, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ARITMETICAS ::= identificador 
            {
              NodoHK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                        NodoHK nodo = new NodoHK("identificador");
                        nodo.hijos.add(new NodoHK(id, idleft, idright));
                        RESULT = nodo;
                    
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("ARITMETICAS",42, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ARITMETICAS ::= CALCULAR 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                        RESULT = nodo;
                    
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("ARITMETICAS",42, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // RELACIONALES ::= ARITMETICAS 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                        RESULT = nodo;
                    
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("RELACIONALES",41, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // RELACIONALES ::= cor_izq LST_DIMS cor_der 
            {
              NodoHK RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK di = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		
                        RESULT = di;
                    
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("RELACIONALES",41, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // RELACIONALES ::= RELACIONALES menor_igual RELACIONALES 
            {
              NodoHK RESULT =null;
		int re1left = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).left;
		int re1right = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).right;
		NodoHK re1 = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).value;
		int re2left = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int re2right = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK re2 = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                        NodoHK nodo = new NodoHK("menorI");
                        nodo.hijos.add(re1);
                        nodo.hijos.add(re2);
                        RESULT = nodo;
                    
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("RELACIONALES",41, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // RELACIONALES ::= RELACIONALES mayor_igual RELACIONALES 
            {
              NodoHK RESULT =null;
		int re1left = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).left;
		int re1right = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).right;
		NodoHK re1 = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).value;
		int re2left = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int re2right = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK re2 = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                        NodoHK nodo = new NodoHK("mayorI");
                        nodo.hijos.add(re1);
                        nodo.hijos.add(re2);
                        RESULT = nodo;
                    
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("RELACIONALES",41, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // RELACIONALES ::= RELACIONALES menor RELACIONALES 
            {
              NodoHK RESULT =null;
		int re1left = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).left;
		int re1right = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).right;
		NodoHK re1 = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).value;
		int re2left = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int re2right = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK re2 = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                        NodoHK nodo = new NodoHK("menor");
                        nodo.hijos.add(re1);
                        nodo.hijos.add(re2);
                        RESULT = nodo;
                    
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("RELACIONALES",41, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // RELACIONALES ::= RELACIONALES mayor RELACIONALES 
            {
              NodoHK RESULT =null;
		int re1left = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).left;
		int re1right = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).right;
		NodoHK re1 = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).value;
		int re2left = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int re2right = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK re2 = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                        NodoHK nodo = new NodoHK("mayor");
                        nodo.hijos.add(re1);
                        nodo.hijos.add(re2);
                        RESULT = nodo;
                    
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("RELACIONALES",41, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // RELACIONALES ::= RELACIONALES diferente RELACIONALES 
            {
              NodoHK RESULT =null;
		int re1left = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).left;
		int re1right = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).right;
		NodoHK re1 = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).value;
		int re2left = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int re2right = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK re2 = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                        NodoHK nodo = new NodoHK("diferente");
                        nodo.hijos.add(re1);
                        nodo.hijos.add(re2);
                        RESULT = nodo;
                    
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("RELACIONALES",41, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // RELACIONALES ::= RELACIONALES igualacion RELACIONALES 
            {
              NodoHK RESULT =null;
		int re1left = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).left;
		int re1right = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).right;
		NodoHK re1 = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).value;
		int re2left = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int re2right = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK re2 = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                        NodoHK nodo = new NodoHK("igualacion");
                        nodo.hijos.add(re1);
                        nodo.hijos.add(re2);
                        RESULT = nodo;
                    
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("RELACIONALES",41, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // LOGICAS ::= RELACIONALES 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LOGICAS",40, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // LOGICAS ::= LOGICAS tkn_and LOGICAS 
            {
              NodoHK RESULT =null;
		int log1left = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).left;
		int log1right = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).right;
		NodoHK log1 = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).value;
		int log2left = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int log2right = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK log2 = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                    NodoHK nodo = new NodoHK("and");
                    nodo.hijos.add(log1);
                    nodo.hijos.add(log2);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LOGICAS",40, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // LOGICAS ::= LOGICAS tkn_or LOGICAS 
            {
              NodoHK RESULT =null;
		int log1left = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).left;
		int log1right = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).right;
		NodoHK log1 = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).value;
		int log2left = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int log2right = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK log2 = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                    NodoHK nodo = new NodoHK("or");
                    nodo.hijos.add(log1);
                    nodo.hijos.add(log2);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LOGICAS",40, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // COND ::= LOGICAS 
            {
              NodoHK RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int logright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK log = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		RESULT = log;
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("COND",47, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DIM ::= dadmiracion identificador 
            {
              NodoHK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                NodoHK nodo = new NodoHK("identificador");
                nodo.hijos.add(new NodoHK(id, idleft, idright));
                RESULT = nodo;
            
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("DIM",30, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // DIM ::= dadmiracion LLAMADAS 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                RESULT = nodo;
           
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("DIM",30, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // DIM ::= dadmiracion CALCULAR 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                RESULT = nodo;
            
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("DIM",30, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // LST_DIM ::= DIM 
            {
              NodoHK RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int diright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK di = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                    NodoHK nodo = new NodoHK("DIMENSIONES");
                    nodo.hijos.add(di);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LST_DIM",29, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // LST_DIM ::= LST_DIM DIM 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		int dileft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int diright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK di = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                    nodo.hijos.add(di);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LST_DIM",29, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // BUSCA_LIST ::= identificador LST_DIM 
            {
              NodoHK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		int dimeleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int dimeright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK dime = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                    NodoHK nodo = new NodoHK("INDICE");
                    NodoHK iden = new NodoHK("identificador");
                    iden.hijos.add(new NodoHK(id, idleft, idright));
                    nodo.hijos.add(iden);
                    nodo.hijos.add(dime);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("BUSCA_LIST",46, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CON ::= aumento ASIGNA_LISTA 
            {
              NodoHK RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK as = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                RESULT = as;
            
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CON",39, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // LST_CON ::= CON 
            {
              NodoHK RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK co = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                    NodoHK nodo = new NodoHK("LST_CONCAT");
                    nodo.hijos.add(co);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LST_CON",38, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // LST_CON ::= LST_CON CON 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		int coleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK co = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                    nodo.hijos.add(co);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LST_CON",38, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CONCAT ::= ASIGNA_LISTA LST_CON 
            {
              NodoHK RESULT =null;
		int as1left = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int as1right = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK as1 = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		int as2left = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int as2right = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK as2 = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                    NodoHK nodo = new NodoHK("CONCAT");
                    nodo.hijos.add(as1);
                    nodo.hijos.add(as2);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CONCAT",37, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // LENGTH ::= dolar tkn_length BUSCA_LIST dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		
                    NodoHK nodo = new NodoHK("LENGTH");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LENGTH",22, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // LENGTH ::= dolar tkn_length MET_NATIVOS dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		
                    NodoHK nodo = new NodoHK("LENGTH");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LENGTH",22, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // LENGTH ::= dolar tkn_length OPC_LISTA dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		
                    NodoHK nodo = new NodoHK("LENGTH");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LENGTH",22, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DESC ::= dolar tkn_desc BUSCA_LIST dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		
                    NodoHK nodo = new NodoHK("DESC");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("DESC",21, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DESC ::= dolar tkn_desc MET_NATIVOS dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		
                    NodoHK nodo = new NodoHK("DESC");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("DESC",21, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DESC ::= dolar tkn_desc OPC_LISTA dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		
                    NodoHK nodo = new NodoHK("DESC");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("DESC",21, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ASC ::= dolar tkn_asc BUSCA_LIST dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		
                    NodoHK nodo = new NodoHK("ASC");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("ASC",20, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ASC ::= dolar tkn_asc MET_NATIVOS dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		
                    NodoHK nodo = new NodoHK("ASC");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("ASC",20, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ASC ::= dolar tkn_asc OPC_LISTA dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		
                    NodoHK nodo = new NodoHK("ASC");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("ASC",20, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // PAR ::= dolar tkn_par BUSCA_LIST dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		
                    NodoHK nodo = new NodoHK("PAR");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("PAR",19, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // PAR ::= dolar tkn_par MET_NATIVOS dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		
                    NodoHK nodo = new NodoHK("PAR");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("PAR",19, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // PAR ::= dolar tkn_par OPC_LISTA dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		
                    NodoHK nodo = new NodoHK("PAR");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("PAR",19, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // IMPR ::= dolar tkn_impr BUSCA_LIST dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		
                    NodoHK nodo = new NodoHK("IMPR");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("IMPR",18, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // IMPR ::= dolar tkn_impr MET_NATIVOS dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		
                    NodoHK nodo = new NodoHK("IMPR");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("IMPR",18, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // IMPR ::= dolar tkn_impr OPC_LISTA dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		
                    NodoHK nodo = new NodoHK("IMPR");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("IMPR",18, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // REVERS ::= dolar tkn_revers BUSCA_LIST dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		
                    NodoHK nodo = new NodoHK("REVERS");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("REVERS",17, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // REVERS ::= dolar tkn_revers MET_NATIVOS dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		
                    NodoHK nodo = new NodoHK("REVERS");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("REVERS",17, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // REVERS ::= dolar tkn_revers OPC_LISTA dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		
                    NodoHK nodo = new NodoHK("REVERS");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("REVERS",17, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PRODUCT ::= dolar tkn_product BUSCA_LIST dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		
                    NodoHK nodo = new NodoHK("PRODUCT");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("PRODUCT",16, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // PRODUCT ::= dolar tkn_product MET_NATIVOS dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		
                    NodoHK nodo = new NodoHK("PRODUCT");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("PRODUCT",16, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // PRODUCT ::= dolar tkn_product OPC_LISTA dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		
                    NodoHK nodo = new NodoHK("PRODUCT");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("PRODUCT",16, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SUM ::= dolar tkn_sum BUSCA_LIST dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		
                    NodoHK nodo = new NodoHK("SUM");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("SUM",15, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SUM ::= dolar tkn_sum MET_NATIVOS dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		
                    NodoHK nodo = new NodoHK("SUM");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("SUM",15, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SUM ::= dolar tkn_sum OPC_LISTA dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		
                    NodoHK nodo = new NodoHK("SUM");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("SUM",15, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // MAX ::= dolar tkn_max BUSCA_LIST dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		
                    NodoHK nodo = new NodoHK("MAX");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("MAX",14, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // MAX ::= dolar tkn_max MET_NATIVOS dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		
                    NodoHK nodo = new NodoHK("MAX");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("MAX",14, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // MAX ::= dolar tkn_max OPC_LISTA dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		
                    NodoHK nodo = new NodoHK("MAX");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("MAX",14, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // MIN ::= dolar tkn_min BUSCA_LIST dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		
                    NodoHK nodo = new NodoHK("MIN");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("MIN",13, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // MIN ::= dolar tkn_min MET_NATIVOS dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		
                    NodoHK nodo = new NodoHK("MIN");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("MIN",13, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // MIN ::= dolar tkn_min OPC_LISTA dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		
                    NodoHK nodo = new NodoHK("MIN");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("MIN",13, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPC_LISTA ::= ASIGNA_LISTA 
            {
              NodoHK RESULT =null;
		int asgleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int asgright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK asg = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                    RESULT = asg;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OPC_LISTA",36, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECC ::= dolar tkn_decc MET_NATIVOS dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		
                    NodoHK nodo = new NodoHK("DECC");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("DECC",12, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECC ::= dolar tkn_decc ARITMETICAS dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		
                    NodoHK nodo = new NodoHK("DECC");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("DECC",12, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SUCC ::= dolar tkn_succ MET_NATIVOS dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		
                    NodoHK nodo = new NodoHK("SUCC");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("SUCC",11, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SUCC ::= dolar tkn_succ ARITMETICAS dolar 
            {
              NodoHK RESULT =null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK opc = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		
                    NodoHK nodo = new NodoHK("SUCC");
                    nodo.hijos.add(opc);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("SUCC",11, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ODIM ::= MET_NATIVOS 
            {
              NodoHK RESULT =null;
		int naleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int naright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK na = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                    RESULT = na;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("ODIM",45, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ODIM ::= caracter 
            {
              NodoHK RESULT =null;
		int carleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int carright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		String car = (String)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                    NodoHK nodo = new NodoHK("caracter");
                    nodo.hijos.add(new NodoHK(car, carleft, carright));
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("ODIM",45, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ODIM ::= ARITMETICAS 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("ODIM",45, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OTRA_DIM ::= ODIM 
            {
              NodoHK RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int diright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK di = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                    NodoHK nodo = new NodoHK("DIMENSIONES");
                    nodo.hijos.add(di);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OTRA_DIM",44, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OTRA_DIM ::= OTRA_DIM coma ODIM 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).value;
		int dileft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int diright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK di = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                    nodo.hijos.add(di);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("OTRA_DIM",44, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DIMS ::= cor_izq OTRA_DIM cor_der 
            {
              NodoHK RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK di = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		
                    RESULT = di;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("DIMS",34, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DIMS ::= caracter 
            {
              NodoHK RESULT =null;
		int carleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int carright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		String car = (String)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                    NodoHK nodo = new NodoHK("caracter");
                    nodo.hijos.add(new NodoHK(car, carleft, carright));
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("DIMS",34, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DIMS ::= ARITMETICAS 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("DIMS",34, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LST_DIMS ::= DIMS 
            {
              NodoHK RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int diright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK di = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                    NodoHK nodo = new NodoHK("DIMENSIONES");
                    nodo.hijos.add(di);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LST_DIMS",33, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LST_DIMS ::= LST_DIMS coma DIMS 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).value;
		int dileft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int diright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK di = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                    nodo.hijos.add(di);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LST_DIMS",33, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LLAMADAS ::= MET_NATIVOS 
            {
              NodoHK RESULT =null;
		int naleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int naright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK na = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                    RESULT = na;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LLAMADAS",48, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LLAMADAS ::= LLAMADA_MET 
            {
              NodoHK RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK me = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                    RESULT = me;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LLAMADAS",48, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ASIGNA_LISTA ::= identificador 
            {
              NodoHK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                        NodoHK nodo = new NodoHK("identificador");
                        nodo.hijos.add(new NodoHK(id, idleft, idright));
                        RESULT = nodo;
                    
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("ASIGNA_LISTA",35, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ASIGNA_LISTA ::= texto 
            {
              NodoHK RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                        NodoHK nodo = new NodoHK("cadena");
                        nodo.hijos.add(new NodoHK(cad, cadleft, cadright));
                        RESULT = nodo;
                    
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("ASIGNA_LISTA",35, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ASIGNA_LISTA ::= cor_izq LST_DIMS cor_der 
            {
              NodoHK RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK di = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		
                        NodoHK nodo = new NodoHK("lista");
                        nodo.hijos.add(di);
                        RESULT = nodo;
                    
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("ASIGNA_LISTA",35, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LISTA ::= tkn_let identificador igual BUSCA_LIST 
            {
              NodoHK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).value;
		int asgleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int asgright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK asg = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
			NodoHK nodo = new NodoHK("DECLARA_ASIGNA_LISTA");
                        nodo.hijos.add(new NodoHK(id, idleft, idright));
                        nodo.hijos.add(asg);
                        RESULT = nodo;
                    
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LISTA",10, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LISTA ::= tkn_let identificador igual LLAMADAS 
            {
              NodoHK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).value;
		int asgleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int asgright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK asg = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                        NodoHK nodo = new NodoHK("DECLARA_ASIGNA_LISTA");
                        nodo.hijos.add(new NodoHK(id, idleft, idright));
                        nodo.hijos.add(asg);
                        RESULT = nodo;
                    
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LISTA",10, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LISTA ::= tkn_let identificador igual ASIGNA_LISTA 
            {
              NodoHK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).value;
		int asgleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int asgright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK asg = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                        NodoHK nodo = new NodoHK("DECLARA_ASIGNA_LISTA");
                        nodo.hijos.add(new NodoHK(id, idleft, idright));
                        nodo.hijos.add(asg);
                        RESULT = nodo;
                    
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LISTA",10, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // MET_NATIVOS ::= CONCAT 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("MET_NATIVOS",32, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // MET_NATIVOS ::= LENGTH 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("MET_NATIVOS",32, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MET_NATIVOS ::= ASC 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("MET_NATIVOS",32, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // MET_NATIVOS ::= DESC 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("MET_NATIVOS",32, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // MET_NATIVOS ::= PAR 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("MET_NATIVOS",32, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MET_NATIVOS ::= IMPR 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("MET_NATIVOS",32, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MET_NATIVOS ::= REVERS 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("MET_NATIVOS",32, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MET_NATIVOS ::= PRODUCT 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("MET_NATIVOS",32, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // MET_NATIVOS ::= SUM 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("MET_NATIVOS",32, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // MET_NATIVOS ::= MAX 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("MET_NATIVOS",32, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // MET_NATIVOS ::= MIN 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("MET_NATIVOS",32, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // MET_NATIVOS ::= DECC 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("MET_NATIVOS",32, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // MET_NATIVOS ::= SUCC 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("MET_NATIVOS",32, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LPAR ::= MET_NATIVOS 
            {
              NodoHK RESULT =null;
		int naleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int naright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK na = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                    RESULT = na;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LPAR",24, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LPAR ::= cor_izq LST_DIMS cor_der 
            {
              NodoHK RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK di = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		
                    NodoHK nodo = new NodoHK("lista");
                    nodo.hijos.add(di);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LPAR",24, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LPAR ::= ARITMETICAS 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LPAR",24, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LST_PAR ::= LPAR 
            {
              NodoHK RESULT =null;
		int paleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int paright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK pa = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                    NodoHK nodo = new NodoHK("PARAMETROS");
                    nodo.hijos.add(pa);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LST_PAR",23, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LST_PAR ::= LST_PAR coma LPAR 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int paright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK pa = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                    nodo.hijos.add(pa);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LST_PAR",23, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LLAMADA_MET ::= dolar identificador llave_izq llave_der dolar 
            {
              NodoHK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)).value;
		
                    NodoHK nodo = new NodoHK("LLAMADA_MET");
                    nodo.hijos.add(new NodoHK(id, idleft, idright));
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LLAMADA_MET",8, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LLAMADA_MET ::= dolar identificador llave_izq LST_PAR llave_der dolar 
            {
              NodoHK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-4)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).right;
		NodoHK param = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).value;
		
                    NodoHK nodo = new NodoHK("LLAMADA_MET");
                    nodo.hijos.add(new NodoHK(id, idleft, idright));
                    nodo.hijos.add(param);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LLAMADA_MET",8, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VALOR ::= caracter 
            {
              NodoHK RESULT =null;
		int carleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int carright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		String car = (String)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                NodoHK nodo = new NodoHK("caracter");
                nodo.hijos.add(new NodoHK(car, carleft, carright));
                RESULT = nodo;
            
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("VALOR",31, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VALOR ::= decimal 
            {
              NodoHK RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                NodoHK nodo = new NodoHK("decimal");
                nodo.hijos.add(new NodoHK(dec, decleft, decright));
                RESULT = nodo;
            
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("VALOR",31, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VALOR ::= numero 
            {
              NodoHK RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                NodoHK nodo = new NodoHK("entero");
                nodo.hijos.add(new NodoHK(num, numleft, numright));
                RESULT = nodo;
            
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("VALOR",31, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CASOS ::= VALOR dosp LST_SENTENCIAS pyc 
            {
              NodoHK RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)).right;
		NodoHK val = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK lst = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		
                NodoHK nodo = new NodoHK("CASO");
                nodo.hijos.add(val);
                nodo.hijos.add(lst);
                RESULT = nodo;
            
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CASOS",28, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LST_CASOS ::= CASOS 
            {
              NodoHK RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK ca = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                    NodoHK nodo = new NodoHK("LST_CASOS");
                    nodo.hijos.add(ca);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LST_CASOS",27, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LST_CASOS ::= LST_CASOS CASOS 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK ca = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                    nodo.hijos.add(ca);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LST_CASOS",27, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CASE ::= tkn_case ARITMETICAS LST_CASOS tkn_end 
            {
              NodoHK RESULT =null;
		int loleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).left;
		int loright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).right;
		NodoHK lo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK lst = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		
                    NodoHK nodo = new NodoHK("NCASE");
                    nodo.hijos.add(lo);
                    nodo.hijos.add(lst);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("CASE",7, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // IF ::= tkn_if COND tkn_then LST_SENTENCIAS tkn_else LST_SENTENCIAS tkn_end 
            {
              NodoHK RESULT =null;
		int loleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-5)).left;
		int loright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-5)).right;
		NodoHK lo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-5)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)).right;
		NodoHK lst = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)).value;
		int lst2left = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int lst2right = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK lst2 = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		
                    NodoHK nodo = new NodoHK("SINO");
                    NodoHK si = new NodoHK("SI");
                    si.hijos.add(lo);
                    si.hijos.add(lst);
                    nodo.hijos.add(si);
                    nodo.hijos.add(lst2);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIAS ::= BUSCA_LIST 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",5, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIAS ::= CALCULAR 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",5, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIAS ::= MET_NATIVOS 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",5, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIAS ::= LISTA 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",5, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIAS ::= LLAMADA_MET 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",5, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIAS ::= CASE 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",5, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIAS ::= IF 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		 RESULT = nodo; 
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",5, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LST_SENTENCIAS ::= SENTENCIAS 
            {
              NodoHK RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK se = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                        NodoHK nodo = new NodoHK("SENTENCIAS");
                        nodo.hijos.add(se);
                        RESULT = nodo;
                    
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LST_SENTENCIAS",4, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LST_SENTENCIAS ::= LST_SENTENCIAS SENTENCIAS 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK se = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                        nodo.hijos.add(se);
                        RESULT = nodo;
                    
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LST_SENTENCIAS",4, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PARAMETROS ::= identificador 
            {
              NodoHK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                        NodoHK nodo = new NodoHK(id, idleft, idright);
                        RESULT = nodo;
                    
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("PARAMETROS",26, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LST_PARAMETROS ::= PARAMETROS 
            {
              NodoHK RESULT =null;
		int paleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int paright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK pa = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                            NodoHK nodo = new NodoHK("PARAMETROS");
                            nodo.hijos.add(pa);
                            RESULT = nodo;
                        
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LST_PARAMETROS",25, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LST_PARAMETROS ::= LST_PARAMETROS coma PARAMETROS 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int paright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK pa = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                            nodo.hijos.add(pa);
                            RESULT = nodo;
                        
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LST_PARAMETROS",25, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FUNCION ::= identificador igual LST_SENTENCIAS tkn_end 
            {
              NodoHK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK lst = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		
                    NodoHK nodo = new NodoHK("FUNCION");
                    nodo.hijos.add(new NodoHK(id, idleft, idright));
                    nodo.hijos.add(new NodoHK("sinparametros"));
                    nodo.hijos.add(lst);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("FUNCION",3, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FUNCION ::= identificador LST_PARAMETROS igual LST_SENTENCIAS tkn_end 
            {
              NodoHK RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-4)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)).right;
		NodoHK pa = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK lst = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		
                    NodoHK nodo = new NodoHK("FUNCION");
                    nodo.hijos.add(new NodoHK(id, idleft, idright));
                    nodo.hijos.add(pa);
                    nodo.hijos.add(lst);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("FUNCION",3, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENT ::= FUNCION 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		RESULT = nodo; 
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("SENT",2, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LST_SEN ::= SENT 
            {
              NodoHK RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK se = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                    NodoHK nodo = new NodoHK("LST_FUNCIONES");
                    nodo.hijos.add(se);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LST_SEN",1, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LST_SEN ::= LST_SEN SENT 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK se = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                    nodo.hijos.add(se);
                    RESULT = nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("LST_SEN",1, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LST_SEN 
            {
              NodoHK RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()).right;
		NodoHK nodo = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.peek()).value;
		
                    parser.nodo=nodo;
                
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          return CUP$sintacticoHaskell$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).right;
		NodoHK start_val = (NodoHK)((java_cup.runtime.Symbol) CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)).value;
		RESULT = start_val;
              CUP$sintacticoHaskell$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.elementAt(CUP$sintacticoHaskell$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoHaskell$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintacticoHaskell$parser.done_parsing();
          return CUP$sintacticoHaskell$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

