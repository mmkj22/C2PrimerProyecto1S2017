/* The following code was generated by JFlex 1.4.1 on 3/24/17 11:23 AM */

/*
 * Generated on 3/24/17 11:23 AM
 */


import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * 
 */

public class GraphikSyntax extends AbstractJFlexTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int MLC = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\20\1\10\1\0\1\20\1\16\22\0\1\53\1\26\1\15"+
    "\1\17\1\1\1\26\1\26\1\7\2\30\1\26\1\24\1\26\1\24"+
    "\1\22\1\21\1\4\3\4\4\6\2\3\1\42\1\26\1\16\1\26"+
    "\1\16\1\26\1\27\1\44\1\45\1\47\1\5\1\23\1\36\1\55"+
    "\1\31\1\40\1\1\1\56\1\41\1\54\1\50\1\46\1\34\1\1"+
    "\1\52\1\35\1\32\1\12\1\57\1\43\3\1\1\30\1\11\1\30"+
    "\1\16\1\2\1\0\1\44\1\14\1\47\1\5\1\23\1\37\1\55"+
    "\1\60\1\40\1\1\1\56\1\41\1\54\1\51\1\46\1\34\1\1"+
    "\1\13\1\35\1\33\1\12\1\57\1\61\3\1\1\25\1\16\1\25"+
    "\1\26\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\1\2\1\1\1\3\1\4\2\1\1\5"+
    "\1\6\1\7\2\1\1\10\15\1\1\11\1\12\10\11"+
    "\1\13\6\11\1\0\1\14\1\0\1\14\3\1\1\3"+
    "\1\15\1\0\1\3\2\1\2\5\1\16\1\17\1\20"+
    "\10\1\1\21\14\1\1\22\3\11\2\0\1\11\2\0"+
    "\3\11\2\0\1\11\3\0\1\20\1\0\4\1\1\3"+
    "\1\23\2\3\1\15\1\3\2\1\1\5\1\24\1\5"+
    "\17\1\1\21\12\1\3\11\2\0\1\11\2\0\3\11"+
    "\2\0\1\11\3\0\3\1\1\3\1\1\1\5\25\1"+
    "\2\11\1\0\1\11\1\25\1\0\2\11\1\0\1\11"+
    "\1\26\2\0\2\1\1\21\1\3\1\1\1\5\12\1"+
    "\1\21\4\1\2\0\1\11\3\0\2\1\1\3\1\1"+
    "\1\5\4\1\1\21\12\1\1\21\5\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[257];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\226\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc"+
    "\0\226\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a"+
    "\0\u044c\0\u047e\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578\0\226"+
    "\0\u05aa\0\u05dc\0\u060e\0\u0640\0\u0672\0\u06a4\0\u06d6\0\u0708"+
    "\0\226\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834\0\u0866"+
    "\0\u0898\0\u028a\0\u08ca\0\u08fc\0\u092e\0\u0960\0\u0992\0\226"+
    "\0\u09c4\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\226\0\226"+
    "\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e"+
    "\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\u0dac\0\u0dde"+
    "\0\u0e10\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\226\0\u0f3c"+
    "\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\u1068\0\u109a\0\u10cc"+
    "\0\u10fe\0\u1130\0\u1162\0\u1194\0\u11c6\0\u11f8\0\u122a\0\u125c"+
    "\0\u128e\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388\0\u13ba\0\226"+
    "\0\u13ec\0\u141e\0\u09c4\0\u1450\0\u1482\0\u14b4\0\u14e6\0\226"+
    "\0\u1518\0\u154a\0\u157c\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u1676"+
    "\0\u16a8\0\u16da\0\u170c\0\u173e\0\u1770\0\u17a2\0\u17d4\0\u1806"+
    "\0\310\0\u1838\0\u186a\0\u189c\0\u18ce\0\u1900\0\u1932\0\u1964"+
    "\0\u1996\0\u19c8\0\u19fa\0\u1a2c\0\u1a5e\0\u1a90\0\u1ac2\0\u1af4"+
    "\0\u1b26\0\u1b58\0\u1b8a\0\u1bbc\0\u1bee\0\u1c20\0\u1c52\0\u1c84"+
    "\0\u1cb6\0\u1ce8\0\u1d1a\0\u1d4c\0\u1d7e\0\u1db0\0\u1de2\0\u1e14"+
    "\0\u1e46\0\u1e78\0\u1eaa\0\u1edc\0\u1f0e\0\u1f40\0\u1f72\0\u1fa4"+
    "\0\u1fd6\0\u2008\0\u203a\0\u206c\0\u209e\0\u20d0\0\u2102\0\u2134"+
    "\0\u2166\0\u2198\0\u21ca\0\u21fc\0\u222e\0\u2260\0\u2292\0\u22c4"+
    "\0\u22f6\0\u2328\0\u235a\0\u238c\0\u23be\0\u23f0\0\u2422\0\u2454"+
    "\0\u2486\0\u24b8\0\u24ea\0\u251c\0\u254e\0\u2580\0\u25b2\0\u25e4"+
    "\0\u2616\0\u2648\0\u267a\0\u26ac\0\u26de\0\u2710\0\u2742\0\u2774"+
    "\0\u27a6\0\u27d8\0\u280a\0\u283c\0\226\0\u286e\0\u28a0\0\u28d2"+
    "\0\u2904\0\u2936\0\u238c\0\u2968\0\u299a\0\u24b8\0\u29cc\0\u29fe"+
    "\0\u2a30\0\u2a62\0\u2a94\0\u2ac6\0\u2af8\0\u2b2a\0\u2b5c\0\u2b8e"+
    "\0\u2bc0\0\u2bf2\0\u2c24\0\u2c56\0\u2c88\0\u2cba\0\u2cec\0\u2d1e"+
    "\0\u2d50\0\u2d82\0\u2bc0\0\u2d1e\0\u2db4\0\u2de6\0\u2e18\0\u2e4a"+
    "\0\u2e7c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[257];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\2\6\1\7\1\6\1\10\1\11\1\4"+
    "\1\5\1\12\1\13\1\14\1\4\1\15\1\16\1\4"+
    "\1\17\1\20\1\4\1\21\2\4\1\21\1\22\2\23"+
    "\1\24\1\25\2\26\1\27\1\30\1\4\1\5\1\31"+
    "\1\13\1\5\1\32\2\33\1\12\1\16\1\34\1\35"+
    "\1\5\1\36\1\22\1\5\10\37\1\40\10\37\1\41"+
    "\7\37\1\42\4\37\1\43\1\44\3\37\1\45\14\37"+
    "\1\46\1\47\10\50\1\51\20\50\1\52\4\50\1\53"+
    "\1\54\3\50\1\55\14\50\1\56\1\57\63\0\6\5"+
    "\2\0\1\60\3\5\6\0\1\5\5\0\11\5\1\0"+
    "\10\5\1\0\6\5\3\61\2\6\1\61\1\6\2\0"+
    "\4\61\2\0\1\61\2\0\1\62\1\63\3\0\1\61"+
    "\1\0\11\61\1\0\10\61\1\0\6\61\1\0\6\5"+
    "\2\0\1\60\3\5\6\0\1\64\5\0\11\5\1\0"+
    "\1\5\1\65\1\5\1\66\4\5\1\0\6\5\7\67"+
    "\1\70\1\71\1\72\50\67\1\0\6\5\2\0\1\60"+
    "\3\5\6\0\1\73\5\0\11\5\1\0\10\5\1\0"+
    "\6\5\1\0\6\5\2\0\1\60\3\5\6\0\1\5"+
    "\5\0\11\5\1\0\3\5\1\74\4\5\1\0\6\5"+
    "\10\14\1\75\1\76\3\14\1\77\44\14\21\0\1\100"+
    "\60\0\1\16\32\0\1\16\11\0\2\101\1\0\1\101"+
    "\54\0\6\5\2\0\1\60\3\5\6\0\1\5\5\0"+
    "\11\5\1\0\5\5\2\102\1\5\1\0\6\5\1\0"+
    "\6\5\2\0\1\60\3\5\6\0\1\103\5\0\11\5"+
    "\1\0\1\5\1\104\6\5\1\0\6\5\1\0\6\5"+
    "\2\0\1\60\3\5\6\0\1\105\5\0\11\5\1\0"+
    "\10\5\1\0\6\5\1\0\6\5\2\0\1\60\1\106"+
    "\1\107\1\5\6\0\1\5\5\0\11\5\1\0\1\5"+
    "\1\110\5\5\1\107\1\0\6\5\1\0\6\5\2\0"+
    "\1\60\3\5\6\0\1\111\5\0\7\5\1\112\1\5"+
    "\1\0\10\5\1\0\6\5\1\0\6\5\2\0\1\60"+
    "\3\5\6\0\1\5\5\0\11\5\1\0\1\5\1\113"+
    "\6\5\1\0\6\5\1\0\6\5\2\0\1\60\3\5"+
    "\6\0\1\5\5\0\11\5\1\0\5\5\2\114\1\5"+
    "\1\0\1\115\5\5\1\0\6\5\2\0\1\60\3\5"+
    "\6\0\1\5\5\0\10\5\1\116\1\0\10\5\1\0"+
    "\6\5\1\0\6\5\2\0\1\60\3\5\6\0\1\5"+
    "\5\0\10\5\1\117\1\0\10\5\1\0\6\5\1\0"+
    "\6\5\2\0\1\60\3\5\6\0\1\5\5\0\11\5"+
    "\1\0\1\5\1\120\1\5\1\121\4\5\1\0\6\5"+
    "\1\0\6\5\2\0\1\60\1\122\2\5\6\0\1\5"+
    "\5\0\11\5\1\0\10\5\1\0\6\5\1\0\6\5"+
    "\2\0\1\60\3\5\6\0\1\5\5\0\7\5\1\123"+
    "\1\5\1\0\10\5\1\0\6\5\1\0\6\5\2\0"+
    "\1\60\1\5\1\124\1\5\6\0\1\5\5\0\11\5"+
    "\1\0\7\5\1\124\1\0\6\5\1\0\6\5\2\0"+
    "\1\60\3\5\6\0\1\125\5\0\11\5\1\0\1\5"+
    "\1\126\6\5\1\0\6\5\10\37\1\0\10\37\1\0"+
    "\15\37\1\0\20\37\21\0\1\127\42\0\10\37\1\0"+
    "\10\37\1\0\10\37\2\130\3\37\1\0\20\37\2\0"+
    "\10\37\1\0\10\37\1\0\10\37\2\131\3\37\1\0"+
    "\1\132\17\37\34\0\2\133\4\0\1\134\21\0\10\37"+
    "\1\0\10\37\1\0\15\37\1\0\3\37\1\135\14\37"+
    "\1\0\1\136\32\0\2\137\71\0\1\136\15\0\1\136"+
    "\10\50\1\0\26\50\1\0\20\50\2\0\10\50\1\0"+
    "\21\50\2\140\3\50\1\0\20\50\2\0\10\50\1\0"+
    "\21\50\2\141\3\50\1\0\1\142\17\50\34\0\2\143"+
    "\4\0\1\144\21\0\10\50\1\0\26\50\1\0\3\50"+
    "\1\145\14\50\1\0\1\146\32\0\2\147\71\0\1\146"+
    "\15\0\1\146\12\0\1\150\47\0\7\61\2\0\4\61"+
    "\2\0\1\61\3\0\1\61\3\0\1\61\1\0\11\61"+
    "\1\0\10\61\1\0\11\61\2\151\1\61\1\151\2\0"+
    "\4\61\2\0\1\61\3\0\1\61\1\152\2\0\1\61"+
    "\1\0\11\61\1\0\10\61\1\0\6\61\1\0\6\5"+
    "\2\0\1\60\3\5\6\0\1\5\5\0\5\5\2\153"+
    "\2\5\1\0\4\5\1\154\3\5\1\0\6\5\1\0"+
    "\6\5\2\0\1\60\3\5\6\0\1\5\5\0\1\5"+
    "\2\155\6\5\1\0\10\5\1\0\6\5\1\0\6\5"+
    "\2\0\1\60\3\5\6\0\1\5\5\0\11\5\1\0"+
    "\5\5\2\156\1\5\1\0\6\5\7\157\1\160\1\0"+
    "\51\157\7\0\1\160\52\0\4\157\1\161\1\157\1\162"+
    "\1\163\1\0\1\67\1\164\3\67\15\157\1\67\3\157"+
    "\1\67\11\157\1\67\10\157\1\0\6\5\2\0\1\60"+
    "\3\5\6\0\1\5\5\0\1\5\2\165\6\5\1\0"+
    "\10\5\1\0\6\5\1\0\6\5\2\0\1\60\3\5"+
    "\6\0\1\5\5\0\11\5\1\0\3\5\1\166\4\5"+
    "\1\0\6\5\11\75\1\167\3\75\1\170\50\75\1\14"+
    "\1\75\2\14\1\0\1\14\1\171\3\14\15\75\1\14"+
    "\3\75\1\14\11\75\1\14\10\75\3\61\2\101\1\61"+
    "\1\101\2\0\4\61\2\0\1\61\3\0\1\63\3\0"+
    "\1\61\1\0\11\61\1\0\10\61\1\0\6\61\1\0"+
    "\6\5\2\0\1\60\3\5\6\0\1\5\5\0\1\5"+
    "\2\172\6\5\1\0\10\5\1\0\6\5\1\0\6\5"+
    "\2\0\1\60\1\5\1\173\1\5\6\0\1\5\5\0"+
    "\11\5\1\0\7\5\1\173\1\0\6\5\1\0\6\5"+
    "\2\0\1\60\3\5\6\0\1\5\5\0\11\5\1\0"+
    "\4\5\1\174\3\5\1\0\6\5\1\0\6\5\2\0"+
    "\1\60\1\5\1\175\1\5\6\0\1\5\5\0\11\5"+
    "\1\0\7\5\1\175\1\0\6\5\1\0\6\5\2\0"+
    "\1\60\2\5\1\176\6\0\1\5\5\0\11\5\1\0"+
    "\2\5\1\176\5\5\1\0\6\5\1\0\6\5\2\0"+
    "\1\60\3\5\6\0\1\5\5\0\7\5\1\177\1\5"+
    "\1\0\3\5\1\200\4\5\1\0\6\5\1\0\6\5"+
    "\2\0\1\60\1\5\1\201\1\5\6\0\1\5\5\0"+
    "\11\5\1\0\7\5\1\201\1\0\6\5\1\0\6\5"+
    "\2\0\1\60\3\5\6\0\1\5\5\0\10\5\1\202"+
    "\1\0\10\5\1\0\6\5\1\0\6\5\2\0\1\60"+
    "\3\5\6\0\1\5\5\0\11\5\1\0\5\5\2\203"+
    "\1\5\1\0\6\5\1\0\6\5\2\0\1\60\3\5"+
    "\6\0\1\5\5\0\10\5\1\204\1\0\10\5\1\0"+
    "\6\5\1\0\6\5\2\0\1\60\3\5\6\0\1\5"+
    "\5\0\7\5\1\205\1\5\1\0\4\5\1\206\3\5"+
    "\1\0\6\5\1\0\6\5\2\0\1\60\3\5\6\0"+
    "\1\5\5\0\3\5\1\207\5\5\1\0\10\5\1\0"+
    "\6\5\1\0\6\5\2\0\1\60\3\5\6\0\1\5"+
    "\5\0\11\5\1\0\1\5\1\210\6\5\1\0\6\5"+
    "\1\0\6\5\2\0\1\60\3\5\6\0\1\5\5\0"+
    "\4\5\1\211\4\5\1\0\10\5\1\0\6\5\1\0"+
    "\4\5\1\212\1\5\2\0\1\60\1\5\1\213\1\5"+
    "\6\0\1\5\5\0\4\5\1\214\4\5\1\0\7\5"+
    "\1\213\1\0\6\5\1\0\6\5\2\0\1\60\3\5"+
    "\6\0\1\5\5\0\10\5\1\215\1\0\5\5\2\216"+
    "\1\5\1\0\6\5\1\0\6\5\2\0\1\60\3\5"+
    "\6\0\1\217\5\0\11\5\1\0\10\5\1\0\6\5"+
    "\1\0\6\5\2\0\1\60\3\5\6\0\1\220\5\0"+
    "\11\5\1\0\10\5\1\0\6\5\1\0\6\5\2\0"+
    "\1\60\3\5\6\0\1\5\5\0\11\5\1\0\1\5"+
    "\1\221\6\5\1\0\6\5\1\0\6\5\2\0\1\60"+
    "\1\5\1\222\1\5\6\0\1\5\5\0\11\5\1\0"+
    "\7\5\1\222\1\0\6\5\1\0\6\5\2\0\1\60"+
    "\1\5\1\211\1\5\6\0\1\5\5\0\11\5\1\0"+
    "\4\5\1\223\2\5\1\211\1\0\6\5\10\37\1\0"+
    "\10\37\1\0\10\37\2\224\3\37\1\0\20\37\2\0"+
    "\10\37\1\0\10\37\1\0\12\37\1\225\2\37\1\0"+
    "\20\37\2\0\10\37\1\0\10\37\1\0\15\37\1\0"+
    "\1\37\1\226\16\37\36\0\1\227\66\0\1\230\20\0"+
    "\10\37\1\0\10\37\1\0\15\37\1\0\3\37\1\231"+
    "\14\37\1\0\1\232\43\0\1\232\15\0\1\232\32\0"+
    "\2\233\26\0\10\50\1\0\21\50\2\234\3\50\1\0"+
    "\20\50\2\0\10\50\1\0\23\50\1\235\2\50\1\0"+
    "\20\50\2\0\10\50\1\0\26\50\1\0\1\50\1\236"+
    "\16\50\36\0\1\237\66\0\1\240\20\0\10\50\1\0"+
    "\26\50\1\0\3\50\1\241\14\50\1\0\1\242\43\0"+
    "\1\242\15\0\1\242\32\0\2\243\31\0\4\244\5\0"+
    "\1\244\6\0\1\244\12\0\2\244\4\0\2\244\1\0"+
    "\1\244\12\0\3\61\2\151\1\61\1\151\2\0\4\61"+
    "\2\0\1\61\3\0\1\61\3\0\1\61\1\0\11\61"+
    "\1\0\10\61\1\0\6\61\3\0\2\151\1\0\1\151"+
    "\54\0\6\5\2\0\1\60\3\5\6\0\1\245\5\0"+
    "\11\5\1\0\10\5\1\0\6\5\1\0\6\5\2\0"+
    "\1\60\3\5\6\0\1\5\5\0\7\5\1\246\1\5"+
    "\1\0\10\5\1\0\6\5\1\0\6\5\2\0\1\60"+
    "\3\5\6\0\1\5\5\0\11\5\1\0\3\5\1\117"+
    "\4\5\1\0\6\5\1\0\4\5\1\247\1\5\2\0"+
    "\1\60\3\5\6\0\1\5\5\0\11\5\1\0\10\5"+
    "\1\0\6\5\7\157\1\70\1\0\55\157\1\162\1\157"+
    "\1\162\1\160\1\0\55\157\1\67\1\157\1\67\1\160"+
    "\1\0\54\157\4\250\1\70\1\0\3\157\1\250\6\157"+
    "\1\250\12\157\2\250\4\157\2\250\1\157\1\250\12\157"+
    "\1\0\6\5\2\0\1\60\3\5\6\0\1\5\5\0"+
    "\11\5\1\0\3\5\1\251\4\5\1\0\6\5\1\0"+
    "\6\5\2\0\1\60\3\5\6\0\1\5\5\0\10\5"+
    "\1\211\1\0\10\5\1\0\6\5\10\75\1\0\54\75"+
    "\4\252\2\75\1\167\2\75\1\252\1\170\5\75\1\252"+
    "\12\75\2\252\4\75\2\252\1\75\1\252\12\75\1\0"+
    "\6\5\2\0\1\60\3\5\6\0\1\253\5\0\11\5"+
    "\1\0\10\5\1\0\6\5\1\0\6\5\2\0\1\60"+
    "\3\5\6\0\1\254\5\0\11\5\1\0\10\5\1\0"+
    "\6\5\1\0\6\5\2\0\1\60\3\5\6\0\1\255"+
    "\5\0\11\5\1\0\10\5\1\0\6\5\1\0\6\5"+
    "\2\0\1\60\3\5\6\0\1\5\5\0\11\5\1\0"+
    "\10\5\1\0\1\256\5\5\1\0\6\5\2\0\1\60"+
    "\3\5\6\0\1\5\5\0\10\5\1\257\1\0\10\5"+
    "\1\0\6\5\1\0\6\5\2\0\1\60\3\5\6\0"+
    "\1\5\5\0\11\5\1\0\10\5\1\0\3\5\1\260"+
    "\2\5\1\0\6\5\2\0\1\60\3\5\6\0\1\5"+
    "\5\0\1\5\2\261\6\5\1\0\4\5\1\262\3\5"+
    "\1\0\6\5\1\0\6\5\2\0\1\60\3\5\6\0"+
    "\1\5\5\0\11\5\1\0\1\5\1\211\6\5\1\0"+
    "\6\5\1\0\6\5\2\0\1\60\3\5\6\0\1\263"+
    "\5\0\11\5\1\0\10\5\1\0\6\5\1\0\6\5"+
    "\2\0\1\60\3\5\6\0\1\5\5\0\11\5\1\0"+
    "\3\5\1\211\4\5\1\0\6\5\1\0\6\5\2\0"+
    "\1\60\3\5\6\0\1\5\5\0\4\5\1\203\4\5"+
    "\1\0\10\5\1\0\6\5\1\0\6\5\2\0\1\60"+
    "\3\5\6\0\1\5\5\0\11\5\1\0\4\5\1\223"+
    "\3\5\1\0\6\5\1\0\6\5\2\0\1\60\3\5"+
    "\6\0\1\5\5\0\10\5\1\264\1\0\10\5\1\0"+
    "\6\5\1\0\6\5\2\0\1\60\1\5\1\265\1\5"+
    "\6\0\1\5\5\0\11\5\1\0\3\5\1\266\3\5"+
    "\1\265\1\0\6\5\1\0\6\5\2\0\1\60\3\5"+
    "\6\0\1\5\5\0\11\5\1\0\10\5\1\0\1\267"+
    "\5\5\1\0\6\5\2\0\1\60\3\5\6\0\1\270"+
    "\5\0\11\5\1\0\10\5\1\0\6\5\1\0\6\5"+
    "\2\0\1\60\3\5\6\0\1\5\5\0\11\5\1\0"+
    "\1\5\1\271\6\5\1\0\6\5\1\0\6\5\2\0"+
    "\1\60\3\5\6\0\1\5\5\0\11\5\1\0\3\5"+
    "\1\272\4\5\1\0\6\5\1\0\6\5\2\0\1\60"+
    "\1\273\2\5\6\0\1\5\5\0\11\5\1\0\10\5"+
    "\1\0\6\5\1\0\6\5\2\0\1\60\3\5\6\0"+
    "\1\5\5\0\1\5\2\274\6\5\1\0\10\5\1\0"+
    "\6\5\1\0\6\5\2\0\1\60\3\5\6\0\1\5"+
    "\5\0\11\5\1\0\10\5\1\0\3\5\1\203\2\5"+
    "\1\0\6\5\2\0\1\60\3\5\6\0\1\5\5\0"+
    "\11\5\1\0\5\5\2\275\1\5\1\0\6\5\1\0"+
    "\6\5\2\0\1\60\3\5\6\0\1\5\5\0\3\5"+
    "\1\276\5\5\1\0\10\5\1\0\6\5\1\0\4\5"+
    "\1\277\1\5\2\0\1\60\3\5\6\0\1\5\5\0"+
    "\11\5\1\0\10\5\1\0\6\5\1\0\6\5\2\0"+
    "\1\60\3\5\6\0\1\5\5\0\7\5\1\203\1\5"+
    "\1\0\10\5\1\0\6\5\10\37\1\0\10\37\1\0"+
    "\12\37\1\300\2\37\1\0\20\37\2\0\10\37\1\0"+
    "\10\37\1\0\15\37\1\0\2\37\1\301\15\37\2\0"+
    "\10\37\1\0\10\37\1\0\1\37\1\225\13\37\1\0"+
    "\20\37\44\0\1\302\42\0\1\227\36\0\10\37\1\0"+
    "\10\37\1\0\1\303\14\37\1\0\20\37\24\0\1\304"+
    "\73\0\1\305\25\0\10\50\1\0\23\50\1\306\2\50"+
    "\1\0\20\50\2\0\10\50\1\0\26\50\1\0\2\50"+
    "\1\307\15\50\2\0\10\50\1\0\12\50\1\235\13\50"+
    "\1\0\20\50\44\0\1\310\42\0\1\237\36\0\10\50"+
    "\1\0\11\50\1\311\14\50\1\0\20\50\24\0\1\312"+
    "\73\0\1\313\30\0\4\314\5\0\1\314\6\0\1\314"+
    "\12\0\2\314\4\0\2\314\1\0\1\314\13\0\6\5"+
    "\2\0\1\60\3\5\6\0\1\5\5\0\11\5\1\0"+
    "\4\5\1\315\3\5\1\0\6\5\1\0\6\5\2\0"+
    "\1\60\3\5\6\0\1\5\5\0\11\5\1\0\10\5"+
    "\1\0\1\316\5\5\1\0\6\5\2\0\1\60\3\5"+
    "\6\0\1\317\5\0\11\5\1\0\10\5\1\0\6\5"+
    "\3\157\4\320\1\70\1\0\3\157\1\320\6\157\1\320"+
    "\12\157\2\320\4\157\2\320\1\157\1\320\12\157\1\0"+
    "\6\5\2\0\1\60\1\5\1\321\1\5\6\0\1\5"+
    "\5\0\11\5\1\0\7\5\1\321\1\0\6\5\3\75"+
    "\4\322\2\75\1\167\2\75\1\322\1\170\5\75\1\322"+
    "\12\75\2\322\4\75\2\322\1\75\1\322\12\75\1\0"+
    "\6\5\2\0\1\60\1\5\1\203\1\5\6\0\1\5"+
    "\5\0\11\5\1\0\7\5\1\203\1\0\6\5\1\0"+
    "\4\5\1\201\1\5\2\0\1\60\3\5\6\0\1\5"+
    "\5\0\11\5\1\0\10\5\1\0\6\5\1\0\6\5"+
    "\2\0\1\60\1\5\1\211\1\5\6\0\1\5\5\0"+
    "\11\5\1\0\7\5\1\211\1\0\6\5\1\0\6\5"+
    "\2\0\1\60\3\5\6\0\1\5\5\0\7\5\1\321"+
    "\1\5\1\0\10\5\1\0\6\5\1\0\6\5\2\0"+
    "\1\60\3\5\6\0\1\5\5\0\7\5\1\323\1\5"+
    "\1\0\10\5\1\0\6\5\1\0\6\5\2\0\1\60"+
    "\3\5\6\0\1\5\5\0\11\5\1\0\1\5\1\324"+
    "\6\5\1\0\6\5\1\0\6\5\2\0\1\60\3\5"+
    "\6\0\1\325\5\0\11\5\1\0\10\5\1\0\6\5"+
    "\1\0\6\5\2\0\1\60\3\5\6\0\1\326\5\0"+
    "\11\5\1\0\10\5\1\0\6\5\1\0\6\5\2\0"+
    "\1\60\3\5\6\0\1\5\5\0\11\5\1\0\4\5"+
    "\1\327\3\5\1\0\6\5\1\0\6\5\2\0\1\60"+
    "\1\330\2\5\6\0\1\5\5\0\11\5\1\0\10\5"+
    "\1\0\6\5\1\0\6\5\2\0\1\60\3\5\6\0"+
    "\1\5\5\0\7\5\1\331\1\5\1\0\10\5\1\0"+
    "\6\5\1\0\6\5\2\0\1\60\1\5\1\332\1\5"+
    "\6\0\1\5\5\0\11\5\1\0\7\5\1\332\1\0"+
    "\6\5\1\0\6\5\2\0\1\60\3\5\6\0\1\5"+
    "\5\0\11\5\1\0\1\5\1\333\6\5\1\0\6\5"+
    "\1\0\6\5\2\0\1\60\3\5\6\0\1\5\5\0"+
    "\11\5\1\0\5\5\2\201\1\5\1\0\6\5\1\0"+
    "\6\5\2\0\1\60\3\5\6\0\1\5\5\0\11\5"+
    "\1\0\4\5\1\334\3\5\1\0\6\5\1\0\6\5"+
    "\2\0\1\60\3\5\6\0\1\5\5\0\11\5\1\0"+
    "\10\5\1\335\6\5\1\0\6\5\2\0\1\60\3\5"+
    "\6\0\1\5\5\0\11\5\1\0\10\5\1\0\1\270"+
    "\5\5\1\0\6\5\2\0\1\60\3\5\6\0\1\5"+
    "\5\0\7\5\1\336\1\5\1\0\10\5\1\0\6\5"+
    "\1\0\6\5\2\0\1\60\3\5\6\0\1\5\5\0"+
    "\1\5\2\337\6\5\1\0\10\5\1\0\6\5\1\0"+
    "\6\5\2\0\1\60\3\5\6\0\1\5\5\0\1\340"+
    "\10\5\1\0\10\5\1\0\4\5\1\340\1\5\1\0"+
    "\6\5\2\0\1\60\3\5\6\0\1\5\5\0\11\5"+
    "\1\0\1\5\1\341\6\5\1\0\6\5\10\37\1\0"+
    "\10\37\1\0\13\37\1\225\1\37\1\0\2\37\1\301"+
    "\15\37\2\0\10\37\1\0\10\37\1\342\15\37\1\0"+
    "\20\37\23\0\1\342\40\0\1\37\7\303\1\0\1\37"+
    "\3\303\2\37\1\303\1\37\1\304\3\303\1\37\11\303"+
    "\1\304\13\303\1\37\4\303\2\304\1\0\1\304\1\343"+
    "\4\304\1\343\2\0\3\304\2\0\1\343\1\0\1\304"+
    "\1\343\1\304\1\343\1\0\3\343\11\304\1\343\10\304"+
    "\1\0\6\304\35\0\1\227\4\0\1\302\17\0\10\50"+
    "\1\0\24\50\1\235\1\50\1\0\2\50\1\307\15\50"+
    "\2\0\10\50\1\0\10\50\1\344\15\50\1\0\20\50"+
    "\23\0\1\345\40\0\1\50\7\311\1\0\1\50\3\311"+
    "\2\50\1\311\1\50\4\311\1\50\11\311\1\312\13\311"+
    "\1\50\4\311\2\312\1\0\1\312\1\346\4\312\1\346"+
    "\2\0\3\312\2\0\1\346\1\0\1\312\1\346\1\312"+
    "\1\346\1\0\3\346\11\312\1\346\10\312\1\0\6\312"+
    "\35\0\1\237\4\0\1\310\22\0\4\347\5\0\1\347"+
    "\6\0\1\347\12\0\2\347\4\0\2\347\1\0\1\347"+
    "\13\0\6\5\2\0\1\60\3\5\6\0\1\5\5\0"+
    "\1\5\2\203\6\5\1\0\10\5\1\0\6\5\1\0"+
    "\6\5\2\0\1\60\3\5\6\0\1\5\5\0\11\5"+
    "\1\0\1\5\1\166\6\5\1\0\6\5\1\0\6\5"+
    "\2\0\1\60\3\5\6\0\1\5\5\0\1\5\2\350"+
    "\6\5\1\0\4\5\1\351\3\5\1\0\6\5\3\157"+
    "\4\352\1\70\1\0\3\157\1\352\6\157\1\352\12\157"+
    "\2\352\4\157\2\352\1\157\1\352\12\157\1\0\6\5"+
    "\2\0\1\60\3\5\6\0\1\5\5\0\11\5\1\0"+
    "\5\5\2\353\1\5\1\0\6\5\3\75\4\354\2\75"+
    "\1\167\2\75\1\354\1\170\5\75\1\354\12\75\2\354"+
    "\4\75\2\354\1\75\1\354\12\75\1\0\6\5\2\0"+
    "\1\60\3\5\6\0\1\5\5\0\11\5\1\0\4\5"+
    "\1\203\3\5\1\0\6\5\1\0\4\5\1\203\1\5"+
    "\2\0\1\60\3\5\6\0\1\5\5\0\11\5\1\0"+
    "\10\5\1\0\6\5\1\0\6\5\2\0\1\60\3\5"+
    "\6\0\1\5\5\0\11\5\1\0\10\5\1\0\1\5"+
    "\1\355\4\5\1\0\6\5\2\0\1\60\3\5\6\0"+
    "\1\5\5\0\4\5\1\353\4\5\1\0\10\5\1\0"+
    "\6\5\1\0\6\5\2\0\1\60\3\5\6\0\1\5"+
    "\5\0\11\5\1\0\4\5\1\356\3\5\1\0\6\5"+
    "\1\0\6\5\2\0\1\60\3\5\6\0\1\5\5\0"+
    "\7\5\1\357\1\5\1\0\10\5\1\0\6\5\1\0"+
    "\6\5\2\0\1\60\3\5\6\0\1\5\5\0\11\5"+
    "\1\0\10\5\1\0\1\360\5\5\1\0\6\5\2\0"+
    "\1\60\3\5\6\0\1\5\5\0\1\5\2\353\6\5"+
    "\1\0\10\5\1\0\6\5\1\0\6\5\2\0\1\60"+
    "\1\5\1\361\1\5\6\0\1\5\5\0\11\5\1\0"+
    "\7\5\1\361\1\0\6\5\1\0\6\5\2\0\1\60"+
    "\3\5\6\0\1\5\5\0\1\5\2\174\6\5\1\0"+
    "\10\5\1\0\6\5\1\0\6\5\2\0\1\60\3\5"+
    "\6\0\1\5\5\0\11\5\1\0\5\5\2\362\1\5"+
    "\1\0\6\5\1\0\6\5\2\0\1\60\1\5\1\363"+
    "\1\5\6\0\1\5\5\0\11\5\1\0\7\5\1\363"+
    "\1\0\6\5\1\0\6\5\2\0\1\60\3\5\6\0"+
    "\1\5\5\0\7\5\1\364\1\5\1\0\10\5\1\0"+
    "\6\5\1\0\4\5\1\172\1\5\2\0\1\60\3\5"+
    "\6\0\1\5\5\0\11\5\1\0\10\5\1\0\6\5"+
    "\21\0\1\304\40\0\10\50\1\0\10\50\1\311\15\50"+
    "\1\0\20\50\23\0\1\312\43\0\4\5\5\0\1\5"+
    "\6\0\1\5\12\0\2\5\4\0\2\5\1\0\1\5"+
    "\13\0\6\5\2\0\1\60\3\5\6\0\1\5\5\0"+
    "\11\5\1\0\3\5\1\324\4\5\1\0\6\5\1\0"+
    "\6\5\2\0\1\60\3\5\6\0\1\5\5\0\11\5"+
    "\1\0\1\5\1\254\6\5\1\0\6\5\3\157\4\67"+
    "\1\70\1\0\3\157\1\67\6\157\1\67\12\157\2\67"+
    "\4\157\2\67\1\157\1\67\12\157\1\0\6\5\2\0"+
    "\1\60\3\5\6\0\1\5\5\0\11\5\1\0\1\5"+
    "\1\255\6\5\1\0\6\5\3\75\4\14\2\75\1\167"+
    "\2\75\1\14\1\170\5\75\1\14\12\75\2\14\4\75"+
    "\2\14\1\75\1\14\12\75\1\0\6\5\2\0\1\60"+
    "\3\5\6\0\1\5\5\0\7\5\1\324\1\5\1\0"+
    "\10\5\1\0\6\5\1\0\6\5\2\0\1\60\3\5"+
    "\6\0\1\5\5\0\7\5\1\365\1\5\1\0\10\5"+
    "\1\0\6\5\1\0\6\5\2\0\1\60\1\5\1\366"+
    "\1\5\6\0\1\5\5\0\11\5\1\0\7\5\1\366"+
    "\1\0\6\5\1\0\6\5\2\0\1\60\3\5\6\0"+
    "\1\5\5\0\7\5\1\367\1\5\1\0\10\5\1\0"+
    "\6\5\1\0\6\5\2\0\1\60\3\5\6\0\1\5"+
    "\5\0\1\370\10\5\1\0\10\5\1\0\4\5\1\370"+
    "\1\5\1\0\6\5\2\0\1\60\1\353\2\5\6\0"+
    "\1\5\5\0\11\5\1\0\10\5\1\0\6\5\1\0"+
    "\6\5\2\0\1\60\3\5\6\0\1\5\5\0\11\5"+
    "\1\0\1\5\1\117\6\5\1\0\6\5\1\0\6\5"+
    "\2\0\1\60\3\5\6\0\1\5\5\0\11\5\1\0"+
    "\10\5\1\0\2\5\1\371\3\5\1\0\6\5\2\0"+
    "\1\60\3\5\6\0\1\5\5\0\11\5\1\0\3\5"+
    "\1\372\4\5\1\0\6\5\1\0\1\5\1\373\4\5"+
    "\2\0\1\60\3\5\6\0\1\5\5\0\11\5\1\0"+
    "\10\5\1\0\6\5\1\0\6\5\2\0\1\60\1\5"+
    "\1\374\1\5\6\0\1\5\5\0\11\5\1\0\7\5"+
    "\1\374\1\0\6\5\1\0\6\5\2\0\1\60\3\5"+
    "\6\0\1\5\5\0\11\5\1\0\10\5\1\0\2\5"+
    "\1\211\3\5\1\0\6\5\2\0\1\60\3\5\6\0"+
    "\1\5\5\0\11\5\1\0\1\5\1\375\6\5\1\0"+
    "\6\5\1\0\6\5\2\0\1\60\3\5\6\0\1\5"+
    "\5\0\11\5\1\0\5\5\2\211\1\5\1\0\6\5"+
    "\1\0\6\5\2\0\1\60\1\5\1\376\1\5\6\0"+
    "\1\5\5\0\11\5\1\0\7\5\1\376\1\0\6\5"+
    "\1\0\1\5\1\377\4\5\2\0\1\60\3\5\6\0"+
    "\1\5\5\0\11\5\1\0\10\5\1\0\6\5\1\0"+
    "\6\5\2\0\1\60\3\5\6\0\1\5\5\0\5\5"+
    "\2\u0100\2\5\1\0\10\5\1\0\6\5\1\0\6\5"+
    "\2\0\1\60\1\u0101\2\5\6\0\1\5\5\0\11\5"+
    "\1\0\10\5\1\0\6\5\1\0\6\5\2\0\1\60"+
    "\3\5\6\0\1\5\5\0\11\5\1\0\5\5\2\327"+
    "\1\5\1\0\6\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11950];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\4\1\1\11\7\1\1\11\16\1\1\11"+
    "\10\1\1\11\6\1\1\0\1\1\1\0\5\1\1\11"+
    "\1\0\5\1\2\11\26\1\1\11\3\1\2\0\1\1"+
    "\2\0\3\1\2\0\1\1\3\0\1\1\1\0\5\1"+
    "\1\11\7\1\1\11\36\1\2\0\1\1\2\0\3\1"+
    "\2\0\1\1\3\0\35\1\1\0\2\1\1\0\2\1"+
    "\1\0\2\1\2\0\20\1\1\11\4\1\2\0\1\1"+
    "\3\0\32\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[257];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public GraphikSyntax() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * {@inheritDoc}
	 */
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { "#", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
						case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;

			/* No documentation comments */
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public GraphikSyntax(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public GraphikSyntax(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 184) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { addNullToken(); return firstToken;
          }
        case 23: break;
        case 19: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 24: break;
        case 15: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 25: break;
        case 7: 
          { addToken(Token.WHITESPACE);
          }
        case 26: break;
        case 20: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 27: break;
        case 16: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 28: break;
        case 17: 
          { addToken(Token.RESERVED_WORD);
          }
        case 29: break;
        case 8: 
          { addToken(Token.SEPARATOR);
          }
        case 30: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 31: break;
        case 11: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 32: break;
        case 3: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 33: break;
        case 5: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 34: break;
        case 18: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
          }
        case 35: break;
        case 13: 
          { addToken(Token.ERROR_CHAR);
          }
        case 36: break;
        case 14: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 37: break;
        case 22: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 38: break;
        case 21: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 39: break;
        case 12: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 40: break;
        case 6: 
          { start = zzMarkedPos-1; yybegin(EOL_COMMENT);
          }
        case 41: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 42: break;
        case 9: 
          { 
          }
        case 43: break;
        case 10: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 44: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 258: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 259: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 260: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
